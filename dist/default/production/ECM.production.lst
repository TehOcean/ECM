

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Nov 28 12:40:52 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    23  0000                     
    24                           ; Version 2.10
    25                           ; Generated 31/07/2019 GMT
    26                           ; 
    27                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F4331 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     
    59                           	psect	idataCOMRAM
    60  00052E                     __pidataCOMRAM:
    61                           	opt callstack 0
    62                           
    63                           ;initializer for _TurningSpeed
    64  00052E  4B                 	db	75
    65  0000                     _TMR1	set	4046
    66  0000                     _LATD	set	3980
    67  0000                     _LATC	set	3979
    68  0000                     _T1CONbits	set	4045
    69  0000                     _INTCON2bits	set	4081
    70  0000                     _CCP2CONbits	set	4026
    71  0000                     _CCP1CONbits	set	4029
    72  0000                     _PIE1bits	set	3997
    73  0000                     _RCONbits	set	4048
    74  0000                     _OSCCONbits	set	4051
    75  0000                     _OSCCON	set	4051
    76  0000                     _CCPR2H	set	4028
    77  0000                     _CCPR2L	set	4027
    78  0000                     _PIR2bits	set	4001
    79  0000                     _CCPR1H	set	4031
    80  0000                     _CCPR1L	set	4030
    81  0000                     _INTCONbits	set	4082
    82  0000                     _RCSTAbits	set	4011
    83  0000                     _TXSTAbits	set	4012
    84  0000                     _BAUDCONbits	set	4010
    85  0000                     _SPBRGH	set	4016
    86  0000                     _SPBRG	set	4015
    87  0000                     _TXREG	set	4013
    88  0000                     _RCREG	set	4014
    89  0000                     _PIR1bits	set	3998
    90  0000                     _LATB	set	3978
    91  0000                     _PTPERH	set	3962
    92  0000                     _PTPERL	set	3963
    93  0000                     _PWMCON1	set	3950
    94  0000                     _PWMCON0	set	3951
    95  0000                     _PTCON1	set	3966
    96  0000                     _PTCON0	set	3967
    97  0000                     _LATBbits	set	3978
    98  0000                     _TRISBbits	set	3987
    99  0000                     _TRISDbits	set	3989
   100  0000                     _TRISCbits	set	3988
   101  0000                     _TRISAbits	set	3986
   102  0000                     _LATAbits	set	3977
   103  0000                     _LATDbits	set	3980
   104  0000                     _LATCbits	set	3979
   105  0000                     _PDC1H	set	3958
   106  0000                     _PDC1L	set	3959
   107  0000                     _PDC0H	set	3960
   108  0000                     _PDC0L	set	3961
   109                           
   110                           ; #config settings
   111  0000                     
   112                           	psect	cinit
   113  0004BE                     __pcinit:
   114                           	opt callstack 0
   115  0004BE                     start_initialization:
   116                           	opt callstack 0
   117  0004BE                     __initialization:
   118                           	opt callstack 0
   119                           
   120                           ; Initialize objects allocated to COMRAM (1 bytes)
   121                           ; load TBLPTR registers with __pidataCOMRAM
   122  0004BE  0E2E               	movlw	low __pidataCOMRAM
   123  0004C0  6EF6               	movwf	tblptrl,c
   124  0004C2  0E05               	movlw	high __pidataCOMRAM
   125  0004C4  6EF7               	movwf	tblptrh,c
   126  0004C6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   127  0004C8  6EF8               	movwf	tblptru,c
   128  0004CA  0009               	tblrd		*+	;fetch initializer
   129  0004CC  CFF5 F03A          	movff	tablat,__pdataCOMRAM
   130                           
   131                           ; Clear objects allocated to COMRAM (22 bytes)
   132  0004D0  EE00  F024         	lfsr	0,__pbssCOMRAM
   133  0004D4  0E16               	movlw	22
   134  0004D6                     clear_0:
   135  0004D6  6AEE               	clrf	postinc0,c
   136  0004D8  06E8               	decf	wreg,f,c
   137  0004DA  E1FD               	bnz	clear_0
   138  0004DC                     end_of_initialization:
   139                           	opt callstack 0
   140  0004DC                     __end_of__initialization:
   141                           	opt callstack 0
   142  0004DC  903B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   143  0004DE  923B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   144  0004E0  0100               	movlb	0
   145  0004E2  EF8A  F001         	goto	_main	;jump to C main() function
   146                           
   147                           	psect	bssCOMRAM
   148  000024                     __pbssCOMRAM:
   149                           	opt callstack 0
   150  000024                     _left:
   151                           	opt callstack 0
   152  000024                     	ds	2
   153  000026                     _right:
   154                           	opt callstack 0
   155  000026                     	ds	2
   156  000028                     _motorR:
   157                           	opt callstack 0
   158  000028                     	ds	9
   159  000031                     _motorL:
   160                           	opt callstack 0
   161  000031                     	ds	9
   162                           
   163                           	psect	dataCOMRAM
   164  00003A                     __pdataCOMRAM:
   165                           	opt callstack 0
   166  00003A                     _TurningSpeed:
   167                           	opt callstack 0
   168  00003A                     	ds	1
   169                           
   170                           	psect	cstackCOMRAM
   171  000001                     __pcstackCOMRAM:
   172                           	opt callstack 0
   173  000001                     LEDout@number:
   174                           	opt callstack 0
   175                           
   176                           ; 2 bytes @ 0x0
   177  000001                     	ds	2
   178  000003                     ??_LEDout:
   179                           
   180                           ; 1 bytes @ 0x2
   181  000003                     	ds	3
   182  000006                     ??_InterruptHandlerLow:
   183                           
   184                           ; 1 bytes @ 0x5
   185  000006                     	ds	5
   186  00000B                     ?___wmul:
   187                           	opt callstack 0
   188  00000B                     ___wmul@multiplier:
   189                           	opt callstack 0
   190                           
   191                           ; 2 bytes @ 0xA
   192  00000B                     	ds	2
   193  00000D                     ___wmul@multiplicand:
   194                           	opt callstack 0
   195                           
   196                           ; 2 bytes @ 0xC
   197  00000D                     	ds	2
   198  00000F                     ___wmul@product:
   199                           	opt callstack 0
   200                           
   201                           ; 2 bytes @ 0xE
   202  00000F                     	ds	2
   203  000011                     ?___awdiv:
   204                           	opt callstack 0
   205  000011                     ___awdiv@dividend:
   206                           	opt callstack 0
   207                           
   208                           ; 2 bytes @ 0x10
   209  000011                     	ds	2
   210  000013                     ___awdiv@divisor:
   211                           	opt callstack 0
   212                           
   213                           ; 2 bytes @ 0x12
   214  000013                     	ds	2
   215  000015                     ___awdiv@counter:
   216                           	opt callstack 0
   217                           
   218                           ; 1 bytes @ 0x14
   219  000015                     	ds	1
   220  000016                     ___awdiv@sign:
   221                           	opt callstack 0
   222                           
   223                           ; 1 bytes @ 0x15
   224  000016                     	ds	1
   225  000017                     ___awdiv@quotient:
   226                           	opt callstack 0
   227                           
   228                           ; 2 bytes @ 0x16
   229  000017                     	ds	2
   230  000019                     setMotorPWM@m:
   231                           	opt callstack 0
   232                           
   233                           ; 2 bytes @ 0x18
   234  000019                     	ds	2
   235  00001B                     ??_setMotorPWM:
   236                           
   237                           ; 1 bytes @ 0x1A
   238  00001B                     	ds	3
   239  00001E                     setMotorPWM@PWMduty:
   240                           	opt callstack 0
   241                           
   242                           ; 2 bytes @ 0x1D
   243  00001E                     	ds	2
   244  000020                     turnLeft@m_L:
   245                           	opt callstack 0
   246  000020                     turnRight@m_L:
   247                           	opt callstack 0
   248                           
   249                           ; 2 bytes @ 0x1F
   250  000020                     	ds	2
   251  000022                     turnLeft@m_R:
   252                           	opt callstack 0
   253  000022                     turnRight@m_R:
   254                           	opt callstack 0
   255                           
   256                           ; 2 bytes @ 0x21
   257  000022                     	ds	2
   258  000024                     
   259                           ; 1 bytes @ 0x23
   260 ;;
   261 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   262 ;;
   263 ;; *************** function _main *****************
   264 ;; Defined at:
   265 ;;		line 42 in file "main.c"
   266 ;; Parameters:    Size  Location     Type
   267 ;;		None
   268 ;; Auto vars:     Size  Location     Type
   269 ;;		None
   270 ;; Return value:  Size  Location     Type
   271 ;;                  1    wreg      void 
   272 ;; Registers used:
   273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   274 ;; Tracked objects:
   275 ;;		On entry : 0/0
   276 ;;		On exit  : 0/0
   277 ;;		Unchanged: 0/0
   278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   279 ;;      Params:         0       0       0       0
   280 ;;      Locals:         0       0       0       0
   281 ;;      Temps:          0       0       0       0
   282 ;;      Totals:         0       0       0       0
   283 ;;Total ram usage:        0 bytes
   284 ;; Hardware stack levels required when called:    5
   285 ;; This function calls:
   286 ;;		_LEDInit
   287 ;;		_initMotor
   288 ;;		_turnLeft
   289 ;;		_turnRight
   290 ;; This function is called by:
   291 ;;		Startup code after reset
   292 ;; This function uses a non-reentrant model
   293 ;;
   294                           
   295                           	psect	text0
   296  000314                     __ptext0:
   297                           	opt callstack 0
   298  000314                     _main:
   299                           	opt callstack 26
   300  000314                     
   301                           ;main.c: 43:     OSCCON = 0x72;
   302  000314  0E72               	movlw	114
   303  000316  6ED3               	movwf	211,c	;volatile
   304  000318                     l216:
   305  000318  A4D3               	btfss	211,2,c	;volatile
   306  00031A  EF91  F001         	goto	u391
   307  00031E  EF93  F001         	goto	u390
   308  000322                     u391:
   309  000322  EF8C  F001         	goto	l216
   310  000326                     u390:
   311  000326                     
   312                           ;main.c: 48:     initMotor();
   313  000326  ECD4  F001         	call	_initMotor	;wreg free
   314  00032A                     
   315                           ;main.c: 50:     INTCONbits.GIEH = 1;
   316  00032A  8EF2               	bsf	242,7,c	;volatile
   317  00032C                     
   318                           ;main.c: 51:     INTCONbits.GIEL = 1;
   319  00032C  8CF2               	bsf	242,6,c	;volatile
   320  00032E                     
   321                           ;main.c: 52:     RCONbits.IPEN = 1;
   322  00032E  8ED0               	bsf	208,7,c	;volatile
   323  000330                     
   324                           ;main.c: 53:     PIE1bits.RCIE = 1;
   325  000330  8A9D               	bsf	157,5,c	;volatile
   326  000332                     
   327                           ;main.c: 55:     TRISCbits.RC1 = 1;
   328  000332  8294               	bsf	148,1,c	;volatile
   329  000334                     
   330                           ;main.c: 56:     TRISCbits.RC2 = 1;
   331  000334  8494               	bsf	148,2,c	;volatile
   332  000336                     
   333                           ;main.c: 57:     TRISCbits.RC3 = 1;
   334  000336  8694               	bsf	148,3,c	;volatile
   335  000338                     
   336                           ;main.c: 58:     CCP1CONbits.CCP1M3 = 0;
   337  000338  96BD               	bcf	189,3,c	;volatile
   338  00033A                     
   339                           ;main.c: 59:     CCP1CONbits.CCP1M2 = 1;
   340  00033A  84BD               	bsf	189,2,c	;volatile
   341  00033C                     
   342                           ;main.c: 60:     CCP1CONbits.CCP1M1 = 0;
   343  00033C  92BD               	bcf	189,1,c	;volatile
   344  00033E                     
   345                           ;main.c: 61:     CCP1CONbits.CCP1M0 = 1;
   346  00033E  80BD               	bsf	189,0,c	;volatile
   347  000340                     
   348                           ;main.c: 63:     CCP2CONbits.CCP2M3 = 0;
   349  000340  96BA               	bcf	186,3,c	;volatile
   350  000342                     
   351                           ;main.c: 64:     CCP2CONbits.CCP2M2 = 1;
   352  000342  84BA               	bsf	186,2,c	;volatile
   353  000344                     
   354                           ;main.c: 65:     CCP2CONbits.CCP2M1 = 0;
   355  000344  92BA               	bcf	186,1,c	;volatile
   356  000346                     
   357                           ;main.c: 66:     CCP2CONbits.CCP2M0 = 1;
   358  000346  80BA               	bsf	186,0,c	;volatile
   359  000348                     
   360                           ;main.c: 67:     LEDInit();
   361  000348  EC86  F002         	call	_LEDInit	;wreg free
   362  00034C                     
   363                           ;main.c: 69:     INTCONbits.INT0IE = 1;
   364  00034C  88F2               	bsf	242,4,c	;volatile
   365  00034E                     
   366                           ;main.c: 70:     INTCON2bits.INTEDG0 = 0;
   367  00034E  9CF1               	bcf	241,6,c	;volatile
   368  000350                     
   369                           ;main.c: 72:     T1CONbits.TMR1ON = 1;
   370  000350  80CD               	bsf	205,0,c	;volatile
   371  000352                     
   372                           ;main.c: 73:     T1CONbits.RD16 = 1;
   373  000352  8ECD               	bsf	205,7,c	;volatile
   374  000354                     
   375                           ;main.c: 74:     T1CONbits.TMR1CS = 0;
   376  000354  92CD               	bcf	205,1,c	;volatile
   377  000356                     
   378                           ;main.c: 75:     T1CONbits.T1OSCEN = 0;
   379  000356  96CD               	bcf	205,3,c	;volatile
   380  000358                     
   381                           ;main.c: 76:     T1CONbits.T1CKPS0 = 1;
   382  000358  88CD               	bsf	205,4,c	;volatile
   383  00035A                     
   384                           ;main.c: 77:     T1CONbits.T1CKPS1 = 1;
   385  00035A  8ACD               	bsf	205,5,c	;volatile
   386  00035C                     
   387                           ;main.c: 78:     T1CONbits.T1RUN = 1;
   388  00035C  8CCD               	bsf	205,6,c	;volatile
   389  00035E                     l219:
   390                           
   391                           ;main.c: 88:                 if (left>right){
   392  00035E  5024               	movf	_left^0,w,c	;volatile
   393  000360  5C26               	subwf	_right^0,w,c	;volatile
   394  000362  5025               	movf	(_left+1)^0,w,c	;volatile
   395  000364  5827               	subwfb	(_right+1)^0,w,c	;volatile
   396  000366  B0D8               	btfsc	status,0,c
   397  000368  EFB8  F001         	goto	u401
   398  00036C  EFBA  F001         	goto	u400
   399  000370                     u401:
   400  000370  EFC6  F001         	goto	l1446
   401  000374                     u400:
   402  000374                     
   403                           ;main.c: 89:                     turnLeft(&motorL, &motorR);
   404  000374  0E31               	movlw	low _motorL
   405  000376  6E20               	movwf	turnLeft@m_L^0,c
   406  000378  0E00               	movlw	high _motorL
   407  00037A  6E21               	movwf	(turnLeft@m_L+1)^0,c
   408  00037C  0E28               	movlw	low _motorR
   409  00037E  6E22               	movwf	turnLeft@m_R^0,c
   410  000380  0E00               	movlw	high _motorR
   411  000382  6E23               	movwf	(turnLeft@m_R+1)^0,c
   412  000384  EC4A  F002         	call	_turnLeft	;wreg free
   413                           
   414                           ;main.c: 90:                 }
   415  000388  EFAF  F001         	goto	l219
   416  00038C                     l1446:
   417                           
   418                           ;main.c: 92:                     turnRight(&motorL, &motorR);
   419  00038C  0E31               	movlw	low _motorL
   420  00038E  6E20               	movwf	turnRight@m_L^0,c
   421  000390  0E00               	movlw	high _motorL
   422  000392  6E21               	movwf	(turnRight@m_L+1)^0,c
   423  000394  0E28               	movlw	low _motorR
   424  000396  6E22               	movwf	turnRight@m_R^0,c
   425  000398  0E00               	movlw	high _motorR
   426  00039A  6E23               	movwf	(turnRight@m_R+1)^0,c
   427  00039C  EC35  F002         	call	_turnRight	;wreg free
   428  0003A0  EFAF  F001         	goto	l219
   429  0003A4  EF59  F000         	goto	start
   430  0003A8                     __end_of_main:
   431                           	opt callstack 0
   432                           
   433 ;; *************** function _turnRight *****************
   434 ;; Defined at:
   435 ;;		line 80 in file "motor.c"
   436 ;; Parameters:    Size  Location     Type
   437 ;;  m_L             2   31[COMRAM] PTR struct DC_motor
   438 ;;		 -> motorL(9), 
   439 ;;  m_R             2   33[COMRAM] PTR struct DC_motor
   440 ;;		 -> motorR(9), 
   441 ;; Auto vars:     Size  Location     Type
   442 ;;		None
   443 ;; Return value:  Size  Location     Type
   444 ;;                  1    wreg      void 
   445 ;; Registers used:
   446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   447 ;; Tracked objects:
   448 ;;		On entry : 0/0
   449 ;;		On exit  : 0/0
   450 ;;		Unchanged: 0/0
   451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   452 ;;      Params:         4       0       0       0
   453 ;;      Locals:         0       0       0       0
   454 ;;      Temps:          0       0       0       0
   455 ;;      Totals:         4       0       0       0
   456 ;;Total ram usage:        4 bytes
   457 ;; Hardware stack levels used:    1
   458 ;; Hardware stack levels required when called:    4
   459 ;; This function calls:
   460 ;;		_setMotorPWM
   461 ;; This function is called by:
   462 ;;		_main
   463 ;; This function uses a non-reentrant model
   464 ;;
   465                           
   466                           	psect	text1
   467  00046A                     __ptext1:
   468                           	opt callstack 0
   469  00046A                     _turnRight:
   470                           	opt callstack 26
   471  00046A                     
   472                           ;motor.c: 81:     motorR.direction = 1;
   473  00046A  0E01               	movlw	1
   474  00046C  6E29               	movwf	(_motorR+1)^0,c	;volatile
   475                           
   476                           ;motor.c: 82:     motorL.direction = 0;
   477  00046E  0E00               	movlw	0
   478  000470  6E32               	movwf	(_motorL+1)^0,c	;volatile
   479  000472                     
   480                           ;motor.c: 83:     motorR.power = TurningSpeed;
   481  000472  C03A  F028         	movff	_TurningSpeed,_motorR	;volatile
   482  000476                     
   483                           ;motor.c: 84:     motorL.power = TurningSpeed;
   484  000476  C03A  F031         	movff	_TurningSpeed,_motorL	;volatile
   485  00047A                     
   486                           ;motor.c: 85:     setMotorPWM(&motorR);
   487  00047A  0E28               	movlw	low _motorR
   488  00047C  6E19               	movwf	setMotorPWM@m^0,c
   489  00047E  0E00               	movlw	high _motorR
   490  000480  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   491  000482  EC5B  F000         	call	_setMotorPWM	;wreg free
   492  000486                     
   493                           ;motor.c: 86:     setMotorPWM(&motorL);
   494  000486  0E31               	movlw	low _motorL
   495  000488  6E19               	movwf	setMotorPWM@m^0,c
   496  00048A  0E00               	movlw	high _motorL
   497  00048C  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   498  00048E  EC5B  F000         	call	_setMotorPWM	;wreg free
   499  000492  0012               	return		;funcret
   500  000494                     __end_of_turnRight:
   501                           	opt callstack 0
   502                           
   503 ;; *************** function _turnLeft *****************
   504 ;; Defined at:
   505 ;;		line 70 in file "motor.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;  m_L             2   31[COMRAM] PTR struct DC_motor
   508 ;;		 -> motorL(9), 
   509 ;;  m_R             2   33[COMRAM] PTR struct DC_motor
   510 ;;		 -> motorR(9), 
   511 ;; Auto vars:     Size  Location     Type
   512 ;;		None
   513 ;; Return value:  Size  Location     Type
   514 ;;                  1    wreg      void 
   515 ;; Registers used:
   516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   517 ;; Tracked objects:
   518 ;;		On entry : 0/0
   519 ;;		On exit  : 0/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   522 ;;      Params:         4       0       0       0
   523 ;;      Locals:         0       0       0       0
   524 ;;      Temps:          0       0       0       0
   525 ;;      Totals:         4       0       0       0
   526 ;;Total ram usage:        4 bytes
   527 ;; Hardware stack levels used:    1
   528 ;; Hardware stack levels required when called:    4
   529 ;; This function calls:
   530 ;;		_setMotorPWM
   531 ;; This function is called by:
   532 ;;		_main
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536                           	psect	text2
   537  000494                     __ptext2:
   538                           	opt callstack 0
   539  000494                     _turnLeft:
   540                           	opt callstack 26
   541  000494                     
   542                           ;motor.c: 71:     motorL.direction = 1;
   543  000494  0E01               	movlw	1
   544  000496  6E32               	movwf	(_motorL+1)^0,c	;volatile
   545                           
   546                           ;motor.c: 72:     motorR.direction = 0;
   547  000498  0E00               	movlw	0
   548  00049A  6E29               	movwf	(_motorR+1)^0,c	;volatile
   549  00049C                     
   550                           ;motor.c: 73:     motorL.power = TurningSpeed;
   551  00049C  C03A  F031         	movff	_TurningSpeed,_motorL	;volatile
   552  0004A0                     
   553                           ;motor.c: 74:     motorR.power = TurningSpeed;
   554  0004A0  C03A  F028         	movff	_TurningSpeed,_motorR	;volatile
   555  0004A4                     
   556                           ;motor.c: 75:     setMotorPWM(&motorR);
   557  0004A4  0E28               	movlw	low _motorR
   558  0004A6  6E19               	movwf	setMotorPWM@m^0,c
   559  0004A8  0E00               	movlw	high _motorR
   560  0004AA  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   561  0004AC  EC5B  F000         	call	_setMotorPWM	;wreg free
   562  0004B0                     
   563                           ;motor.c: 76:     setMotorPWM(&motorL);
   564  0004B0  0E31               	movlw	low _motorL
   565  0004B2  6E19               	movwf	setMotorPWM@m^0,c
   566  0004B4  0E00               	movlw	high _motorL
   567  0004B6  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   568  0004B8  EC5B  F000         	call	_setMotorPWM	;wreg free
   569  0004BC  0012               	return		;funcret
   570  0004BE                     __end_of_turnLeft:
   571                           	opt callstack 0
   572                           
   573 ;; *************** function _setMotorPWM *****************
   574 ;; Defined at:
   575 ;;		line 41 in file "motor.c"
   576 ;; Parameters:    Size  Location     Type
   577 ;;  m               2   24[COMRAM] PTR struct DC_motor
   578 ;;		 -> motorR(9), motorL(9), 
   579 ;; Auto vars:     Size  Location     Type
   580 ;;  PWMduty         2   29[COMRAM] int 
   581 ;; Return value:  Size  Location     Type
   582 ;;                  1    wreg      void 
   583 ;; Registers used:
   584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   585 ;; Tracked objects:
   586 ;;		On entry : 0/0
   587 ;;		On exit  : 0/0
   588 ;;		Unchanged: 0/0
   589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   590 ;;      Params:         2       0       0       0
   591 ;;      Locals:         2       0       0       0
   592 ;;      Temps:          3       0       0       0
   593 ;;      Totals:         7       0       0       0
   594 ;;Total ram usage:        7 bytes
   595 ;; Hardware stack levels used:    1
   596 ;; Hardware stack levels required when called:    3
   597 ;; This function calls:
   598 ;;		___awdiv
   599 ;;		___wmul
   600 ;; This function is called by:
   601 ;;		_turnLeft
   602 ;;		_turnRight
   603 ;;		_stop
   604 ;;		_fullSpeedAhead
   605 ;;		_setMotorFullSpeed
   606 ;; This function uses a non-reentrant model
   607 ;;
   608                           
   609                           	psect	text3
   610  0000B6                     __ptext3:
   611                           	opt callstack 0
   612  0000B6                     _setMotorPWM:
   613                           	opt callstack 26
   614  0000B6                     
   615                           ;motor.c: 42:     int PWMduty;;motor.c: 43:     if (m->direction) {
   616  0000B6  EE20 F001          	lfsr	2,1
   617  0000BA  5019               	movf	setMotorPWM@m^0,w,c
   618  0000BC  26D9               	addwf	fsr2l,f,c
   619  0000BE  501A               	movf	(setMotorPWM@m+1)^0,w,c
   620  0000C0  22DA               	addwfc	fsr2h,f,c
   621  0000C2  50DF               	movf	indf2,w,c
   622  0000C4  B4D8               	btfsc	status,2,c
   623  0000C6  EF67  F000         	goto	u301
   624  0000CA  EF69  F000         	goto	u300
   625  0000CE                     u301:
   626  0000CE  EF9A  F000         	goto	l1302
   627  0000D2                     u300:
   628  0000D2                     
   629                           ;motor.c: 45:         PWMduty = m->PWMperiod - ((int) (m->power)*(m->PWMperiod)) / 100;
   630  0000D2  C019  FFD9         	movff	setMotorPWM@m,fsr2l
   631  0000D6  C01A  FFDA         	movff	setMotorPWM@m+1,fsr2h
   632  0000DA  50DF               	movf	indf2,w,c
   633  0000DC  6E1B               	movwf	??_setMotorPWM^0,c
   634  0000DE  501B               	movf	??_setMotorPWM^0,w,c
   635  0000E0  6E0B               	movwf	___wmul@multiplier^0,c
   636  0000E2  6A0C               	clrf	(___wmul@multiplier+1)^0,c
   637  0000E4  EE20 F007          	lfsr	2,7
   638  0000E8  5019               	movf	setMotorPWM@m^0,w,c
   639  0000EA  26D9               	addwf	fsr2l,f,c
   640  0000EC  501A               	movf	(setMotorPWM@m+1)^0,w,c
   641  0000EE  22DA               	addwfc	fsr2h,f,c
   642  0000F0  CFDE F00D          	movff	postinc2,___wmul@multiplicand
   643  0000F4  CFDD F00E          	movff	postdec2,___wmul@multiplicand+1
   644  0000F8  EC73  F002         	call	___wmul	;wreg free
   645  0000FC  C00B  F011         	movff	?___wmul,___awdiv@dividend
   646  000100  C00C  F012         	movff	?___wmul+1,___awdiv@dividend+1
   647  000104  0E00               	movlw	0
   648  000106  6E14               	movwf	(___awdiv@divisor+1)^0,c
   649  000108  0E64               	movlw	100
   650  00010A  6E13               	movwf	___awdiv@divisor^0,c
   651  00010C  EC28  F001         	call	___awdiv	;wreg free
   652  000110  EE20 F007          	lfsr	2,7
   653  000114  5019               	movf	setMotorPWM@m^0,w,c
   654  000116  26D9               	addwf	fsr2l,f,c
   655  000118  501A               	movf	(setMotorPWM@m+1)^0,w,c
   656  00011A  22DA               	addwfc	fsr2h,f,c
   657  00011C  CFDE F01C          	movff	postinc2,??_setMotorPWM+1
   658  000120  CFDD F01D          	movff	postdec2,??_setMotorPWM+2
   659  000124  5011               	movf	?___awdiv^0,w,c
   660  000126  5C1C               	subwf	(??_setMotorPWM+1)^0,w,c
   661  000128  6E1E               	movwf	setMotorPWM@PWMduty^0,c
   662  00012A  5012               	movf	(?___awdiv+1)^0,w,c
   663  00012C  581D               	subwfb	(??_setMotorPWM+2)^0,w,c
   664  00012E  6E1F               	movwf	(setMotorPWM@PWMduty+1)^0,c
   665                           
   666                           ;motor.c: 46:     } else {
   667  000130  EFBD  F000         	goto	l1304
   668  000134                     l1302:
   669                           
   670                           ;motor.c: 48:         PWMduty = ((int) (m->power)*(m->PWMperiod)) / 100;
   671  000134  C019  FFD9         	movff	setMotorPWM@m,fsr2l
   672  000138  C01A  FFDA         	movff	setMotorPWM@m+1,fsr2h
   673  00013C  50DF               	movf	indf2,w,c
   674  00013E  6E1B               	movwf	??_setMotorPWM^0,c
   675  000140  501B               	movf	??_setMotorPWM^0,w,c
   676  000142  6E0B               	movwf	___wmul@multiplier^0,c
   677  000144  6A0C               	clrf	(___wmul@multiplier+1)^0,c
   678  000146  EE20 F007          	lfsr	2,7
   679  00014A  5019               	movf	setMotorPWM@m^0,w,c
   680  00014C  26D9               	addwf	fsr2l,f,c
   681  00014E  501A               	movf	(setMotorPWM@m+1)^0,w,c
   682  000150  22DA               	addwfc	fsr2h,f,c
   683  000152  CFDE F00D          	movff	postinc2,___wmul@multiplicand
   684  000156  CFDD F00E          	movff	postdec2,___wmul@multiplicand+1
   685  00015A  EC73  F002         	call	___wmul	;wreg free
   686  00015E  C00B  F011         	movff	?___wmul,___awdiv@dividend
   687  000162  C00C  F012         	movff	?___wmul+1,___awdiv@dividend+1
   688  000166  0E00               	movlw	0
   689  000168  6E14               	movwf	(___awdiv@divisor+1)^0,c
   690  00016A  0E64               	movlw	100
   691  00016C  6E13               	movwf	___awdiv@divisor^0,c
   692  00016E  EC28  F001         	call	___awdiv	;wreg free
   693  000172  C011  F01E         	movff	?___awdiv,setMotorPWM@PWMduty
   694  000176  C012  F01F         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
   695  00017A                     l1304:
   696                           
   697                           ;motor.c: 50:     PWMduty = (PWMduty << 2);
   698  00017A  C01E  F01B         	movff	setMotorPWM@PWMduty,??_setMotorPWM
   699  00017E  C01F  F01C         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
   700  000182  90D8               	bcf	status,0,c
   701  000184  361B               	rlcf	??_setMotorPWM^0,f,c
   702  000186  361C               	rlcf	(??_setMotorPWM+1)^0,f,c
   703  000188  90D8               	bcf	status,0,c
   704  00018A  361B               	rlcf	??_setMotorPWM^0,f,c
   705  00018C  361C               	rlcf	(??_setMotorPWM+1)^0,f,c
   706  00018E  C01B  F01E         	movff	??_setMotorPWM,setMotorPWM@PWMduty
   707  000192  C01C  F01F         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
   708  000196                     
   709                           ;motor.c: 51:     *(m->dutyLowByte) = PWMduty & 0xFF;
   710  000196  EE20 F002          	lfsr	2,2
   711  00019A  5019               	movf	setMotorPWM@m^0,w,c
   712  00019C  26D9               	addwf	fsr2l,f,c
   713  00019E  501A               	movf	(setMotorPWM@m+1)^0,w,c
   714  0001A0  22DA               	addwfc	fsr2h,f,c
   715  0001A2  CFDE F01B          	movff	postinc2,??_setMotorPWM
   716  0001A6  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
   717  0001AA  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
   718  0001AE  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
   719  0001B2  C01E  FFDF         	movff	setMotorPWM@PWMduty,indf2
   720  0001B6                     
   721                           ;motor.c: 52:     *(m->dutyHighByte) = (PWMduty >> 8) & 0x3F;
   722  0001B6  EE20 F004          	lfsr	2,4
   723  0001BA  5019               	movf	setMotorPWM@m^0,w,c
   724  0001BC  26D9               	addwf	fsr2l,f,c
   725  0001BE  501A               	movf	(setMotorPWM@m+1)^0,w,c
   726  0001C0  22DA               	addwfc	fsr2h,f,c
   727  0001C2  CFDE F01B          	movff	postinc2,??_setMotorPWM
   728  0001C6  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
   729  0001CA  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
   730  0001CE  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
   731  0001D2  501F               	movf	(setMotorPWM@PWMduty+1)^0,w,c
   732  0001D4  0B3F               	andlw	63
   733  0001D6  6EDF               	movwf	indf2,c
   734  0001D8                     
   735                           ;motor.c: 54:     if (m->direction) {
   736  0001D8  EE20 F001          	lfsr	2,1
   737  0001DC  5019               	movf	setMotorPWM@m^0,w,c
   738  0001DE  26D9               	addwf	fsr2l,f,c
   739  0001E0  501A               	movf	(setMotorPWM@m+1)^0,w,c
   740  0001E2  22DA               	addwfc	fsr2h,f,c
   741  0001E4  50DF               	movf	indf2,w,c
   742  0001E6  B4D8               	btfsc	status,2,c
   743  0001E8  EFF8  F000         	goto	u311
   744  0001EC  EFFA  F000         	goto	u310
   745  0001F0                     u311:
   746  0001F0  EF11  F001         	goto	l1314
   747  0001F4                     u310:
   748  0001F4                     
   749                           ;motor.c: 55:         LATB = LATB | (1 << (m->dir_pin));
   750  0001F4  EE20 F006          	lfsr	2,6
   751  0001F8  5019               	movf	setMotorPWM@m^0,w,c
   752  0001FA  26D9               	addwf	fsr2l,f,c
   753  0001FC  501A               	movf	(setMotorPWM@m+1)^0,w,c
   754  0001FE  22DA               	addwfc	fsr2h,f,c
   755  000200  50DF               	movf	indf2,w,c
   756  000202  6E1B               	movwf	??_setMotorPWM^0,c
   757  000204  0E01               	movlw	1
   758  000206  6E1C               	movwf	(??_setMotorPWM+1)^0,c
   759  000208  2A1B               	incf	??_setMotorPWM^0,f,c
   760  00020A  EF09  F001         	goto	u324
   761  00020E                     u325:
   762  00020E  90D8               	bcf	status,0,c
   763  000210  361C               	rlcf	(??_setMotorPWM+1)^0,f,c
   764  000212                     u324:
   765  000212  2E1B               	decfsz	??_setMotorPWM^0,f,c
   766  000214  EF07  F001         	goto	u325
   767  000218  501C               	movf	(??_setMotorPWM+1)^0,w,c
   768  00021A  108A               	iorwf	138,w,c	;volatile
   769  00021C  6E8A               	movwf	138,c	;volatile
   770                           
   771                           ;motor.c: 56:     } else {
   772  00021E  EF27  F001         	goto	l84
   773  000222                     l1314:
   774                           
   775                           ;motor.c: 57:         LATB = LATB & (~(1 << (m->dir_pin)));
   776  000222  EE20 F006          	lfsr	2,6
   777  000226  5019               	movf	setMotorPWM@m^0,w,c
   778  000228  26D9               	addwf	fsr2l,f,c
   779  00022A  501A               	movf	(setMotorPWM@m+1)^0,w,c
   780  00022C  22DA               	addwfc	fsr2h,f,c
   781  00022E  50DF               	movf	indf2,w,c
   782  000230  6E1B               	movwf	??_setMotorPWM^0,c
   783  000232  0E01               	movlw	1
   784  000234  6E1C               	movwf	(??_setMotorPWM+1)^0,c
   785  000236  2A1B               	incf	??_setMotorPWM^0,f,c
   786  000238  EF20  F001         	goto	u334
   787  00023C                     u335:
   788  00023C  90D8               	bcf	status,0,c
   789  00023E  361C               	rlcf	(??_setMotorPWM+1)^0,f,c
   790  000240                     u334:
   791  000240  2E1B               	decfsz	??_setMotorPWM^0,f,c
   792  000242  EF1E  F001         	goto	u335
   793  000246  501C               	movf	(??_setMotorPWM+1)^0,w,c
   794  000248  0AFF               	xorlw	255
   795  00024A  148A               	andwf	138,w,c	;volatile
   796  00024C  6E8A               	movwf	138,c	;volatile
   797  00024E                     l84:
   798  00024E  0012               	return		;funcret
   799  000250                     __end_of_setMotorPWM:
   800                           	opt callstack 0
   801                           
   802 ;; *************** function ___wmul *****************
   803 ;; Defined at:
   804 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;  multiplier      2   10[COMRAM] unsigned int 
   807 ;;  multiplicand    2   12[COMRAM] unsigned int 
   808 ;; Auto vars:     Size  Location     Type
   809 ;;  product         2   14[COMRAM] unsigned int 
   810 ;; Return value:  Size  Location     Type
   811 ;;                  2   10[COMRAM] unsigned int 
   812 ;; Registers used:
   813 ;;		wreg, status,2, status,0, prodl, prodh
   814 ;; Tracked objects:
   815 ;;		On entry : 0/0
   816 ;;		On exit  : 0/0
   817 ;;		Unchanged: 0/0
   818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   819 ;;      Params:         4       0       0       0
   820 ;;      Locals:         2       0       0       0
   821 ;;      Temps:          0       0       0       0
   822 ;;      Totals:         6       0       0       0
   823 ;;Total ram usage:        6 bytes
   824 ;; Hardware stack levels used:    1
   825 ;; Hardware stack levels required when called:    2
   826 ;; This function calls:
   827 ;;		Nothing
   828 ;; This function is called by:
   829 ;;		_setMotorPWM
   830 ;;		_delay_s
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834                           	psect	text4
   835  0004E6                     __ptext4:
   836                           	opt callstack 0
   837  0004E6                     ___wmul:
   838                           	opt callstack 26
   839  0004E6  500B               	movf	___wmul@multiplier^0,w,c
   840  0004E8  020D               	mulwf	___wmul@multiplicand^0,c
   841  0004EA  CFF3 F00F          	movff	prodl,___wmul@product
   842  0004EE  CFF4 F010          	movff	prodh,___wmul@product+1
   843  0004F2  500B               	movf	___wmul@multiplier^0,w,c
   844  0004F4  020E               	mulwf	(___wmul@multiplicand+1)^0,c
   845  0004F6  50F3               	movf	243,w,c
   846  0004F8  2610               	addwf	(___wmul@product+1)^0,f,c
   847  0004FA  500C               	movf	(___wmul@multiplier+1)^0,w,c
   848  0004FC  020D               	mulwf	___wmul@multiplicand^0,c
   849  0004FE  50F3               	movf	243,w,c
   850  000500  2610               	addwf	(___wmul@product+1)^0,f,c
   851  000502  C00F  F00B         	movff	___wmul@product,?___wmul
   852  000506  C010  F00C         	movff	___wmul@product+1,?___wmul+1
   853  00050A  0012               	return		;funcret
   854  00050C                     __end_of___wmul:
   855                           	opt callstack 0
   856                           
   857 ;; *************** function ___awdiv *****************
   858 ;; Defined at:
   859 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;  dividend        2   16[COMRAM] int 
   862 ;;  divisor         2   18[COMRAM] int 
   863 ;; Auto vars:     Size  Location     Type
   864 ;;  quotient        2   22[COMRAM] int 
   865 ;;  sign            1   21[COMRAM] unsigned char 
   866 ;;  counter         1   20[COMRAM] unsigned char 
   867 ;; Return value:  Size  Location     Type
   868 ;;                  2   16[COMRAM] int 
   869 ;; Registers used:
   870 ;;		wreg, status,2, status,0
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   876 ;;      Params:         4       0       0       0
   877 ;;      Locals:         4       0       0       0
   878 ;;      Temps:          0       0       0       0
   879 ;;      Totals:         8       0       0       0
   880 ;;Total ram usage:        8 bytes
   881 ;; Hardware stack levels used:    1
   882 ;; Hardware stack levels required when called:    2
   883 ;; This function calls:
   884 ;;		Nothing
   885 ;; This function is called by:
   886 ;;		_setMotorPWM
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890                           	psect	text5
   891  000250                     __ptext5:
   892                           	opt callstack 0
   893  000250                     ___awdiv:
   894                           	opt callstack 26
   895  000250  0E00               	movlw	0
   896  000252  6E16               	movwf	___awdiv@sign^0,c
   897  000254  BE14               	btfsc	(___awdiv@divisor+1)^0,7,c
   898  000256  EF31  F001         	goto	u240
   899  00025A  EF2F  F001         	goto	u241
   900  00025E                     u241:
   901  00025E  EF37  F001         	goto	l1262
   902  000262                     u240:
   903  000262  6C13               	negf	___awdiv@divisor^0,c
   904  000264  1E14               	comf	(___awdiv@divisor+1)^0,f,c
   905  000266  B0D8               	btfsc	status,0,c
   906  000268  2A14               	incf	(___awdiv@divisor+1)^0,f,c
   907  00026A  0E01               	movlw	1
   908  00026C  6E16               	movwf	___awdiv@sign^0,c
   909  00026E                     l1262:
   910  00026E  BE12               	btfsc	(___awdiv@dividend+1)^0,7,c
   911  000270  EF3E  F001         	goto	u250
   912  000274  EF3C  F001         	goto	u251
   913  000278                     u251:
   914  000278  EF44  F001         	goto	l1268
   915  00027C                     u250:
   916  00027C  6C11               	negf	___awdiv@dividend^0,c
   917  00027E  1E12               	comf	(___awdiv@dividend+1)^0,f,c
   918  000280  B0D8               	btfsc	status,0,c
   919  000282  2A12               	incf	(___awdiv@dividend+1)^0,f,c
   920  000284  0E01               	movlw	1
   921  000286  1A16               	xorwf	___awdiv@sign^0,f,c
   922  000288                     l1268:
   923  000288  0E00               	movlw	0
   924  00028A  6E18               	movwf	(___awdiv@quotient+1)^0,c
   925  00028C  0E00               	movlw	0
   926  00028E  6E17               	movwf	___awdiv@quotient^0,c
   927  000290  5013               	movf	___awdiv@divisor^0,w,c
   928  000292  1014               	iorwf	(___awdiv@divisor+1)^0,w,c
   929  000294  B4D8               	btfsc	status,2,c
   930  000296  EF4F  F001         	goto	u261
   931  00029A  EF51  F001         	goto	u260
   932  00029E                     u261:
   933  00029E  EF79  F001         	goto	l1290
   934  0002A2                     u260:
   935  0002A2  0E01               	movlw	1
   936  0002A4  6E15               	movwf	___awdiv@counter^0,c
   937  0002A6  EF59  F001         	goto	l1276
   938  0002AA                     l1274:
   939  0002AA  90D8               	bcf	status,0,c
   940  0002AC  3613               	rlcf	___awdiv@divisor^0,f,c
   941  0002AE  3614               	rlcf	(___awdiv@divisor+1)^0,f,c
   942  0002B0  2A15               	incf	___awdiv@counter^0,f,c
   943  0002B2                     l1276:
   944  0002B2  AE14               	btfss	(___awdiv@divisor+1)^0,7,c
   945  0002B4  EF5E  F001         	goto	u271
   946  0002B8  EF60  F001         	goto	u270
   947  0002BC                     u271:
   948  0002BC  EF55  F001         	goto	l1274
   949  0002C0                     u270:
   950  0002C0                     l1278:
   951  0002C0  90D8               	bcf	status,0,c
   952  0002C2  3617               	rlcf	___awdiv@quotient^0,f,c
   953  0002C4  3618               	rlcf	(___awdiv@quotient+1)^0,f,c
   954  0002C6  5013               	movf	___awdiv@divisor^0,w,c
   955  0002C8  5C11               	subwf	___awdiv@dividend^0,w,c
   956  0002CA  5014               	movf	(___awdiv@divisor+1)^0,w,c
   957  0002CC  5812               	subwfb	(___awdiv@dividend+1)^0,w,c
   958  0002CE  A0D8               	btfss	status,0,c
   959  0002D0  EF6C  F001         	goto	u281
   960  0002D4  EF6E  F001         	goto	u280
   961  0002D8                     u281:
   962  0002D8  EF73  F001         	goto	l1286
   963  0002DC                     u280:
   964  0002DC  5013               	movf	___awdiv@divisor^0,w,c
   965  0002DE  5E11               	subwf	___awdiv@dividend^0,f,c
   966  0002E0  5014               	movf	(___awdiv@divisor+1)^0,w,c
   967  0002E2  5A12               	subwfb	(___awdiv@dividend+1)^0,f,c
   968  0002E4  8017               	bsf	___awdiv@quotient^0,0,c
   969  0002E6                     l1286:
   970  0002E6  90D8               	bcf	status,0,c
   971  0002E8  3214               	rrcf	(___awdiv@divisor+1)^0,f,c
   972  0002EA  3213               	rrcf	___awdiv@divisor^0,f,c
   973  0002EC  2E15               	decfsz	___awdiv@counter^0,f,c
   974  0002EE  EF60  F001         	goto	l1278
   975  0002F2                     l1290:
   976  0002F2  5016               	movf	___awdiv@sign^0,w,c
   977  0002F4  B4D8               	btfsc	status,2,c
   978  0002F6  EF7F  F001         	goto	u291
   979  0002FA  EF81  F001         	goto	u290
   980  0002FE                     u291:
   981  0002FE  EF85  F001         	goto	l1294
   982  000302                     u290:
   983  000302  6C17               	negf	___awdiv@quotient^0,c
   984  000304  1E18               	comf	(___awdiv@quotient+1)^0,f,c
   985  000306  B0D8               	btfsc	status,0,c
   986  000308  2A18               	incf	(___awdiv@quotient+1)^0,f,c
   987  00030A                     l1294:
   988  00030A  C017  F011         	movff	___awdiv@quotient,?___awdiv
   989  00030E  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
   990  000312  0012               	return		;funcret
   991  000314                     __end_of___awdiv:
   992                           	opt callstack 0
   993                           
   994 ;; *************** function _initMotor *****************
   995 ;; Defined at:
   996 ;;		line 4 in file "motor.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;		None
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;  PWMcycle        2    0        int 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      void 
  1003 ;; Registers used:
  1004 ;;		wreg, status,2, status,0
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1010 ;;      Params:         0       0       0       0
  1011 ;;      Locals:         2       0       0       0
  1012 ;;      Temps:          0       0       0       0
  1013 ;;      Totals:         2       0       0       0
  1014 ;;Total ram usage:        2 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; Hardware stack levels required when called:    2
  1017 ;; This function calls:
  1018 ;;		Nothing
  1019 ;; This function is called by:
  1020 ;;		_main
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           	psect	text6
  1025  0003A8                     __ptext6:
  1026                           	opt callstack 0
  1027  0003A8                     _initMotor:
  1028                           	opt callstack 28
  1029  0003A8                     
  1030                           ;motor.c: 6:     TRISBbits.RB0 = 0;
  1031  0003A8  9093               	bcf	147,0,c	;volatile
  1032  0003AA                     
  1033                           ;motor.c: 7:     TRISBbits.RB1 = 0;
  1034  0003AA  9293               	bcf	147,1,c	;volatile
  1035  0003AC                     
  1036                           ;motor.c: 8:     TRISBbits.RB2 = 0;
  1037  0003AC  9493               	bcf	147,2,c	;volatile
  1038  0003AE                     
  1039                           ;motor.c: 9:     TRISBbits.RB3 = 0;
  1040  0003AE  9693               	bcf	147,3,c	;volatile
  1041  0003B0                     
  1042                           ;motor.c: 10:     LATBbits.LATB0 = 0;
  1043  0003B0  908A               	bcf	138,0,c	;volatile
  1044  0003B2                     
  1045                           ;motor.c: 11:     LATBbits.LATB1 = 0;
  1046  0003B2  928A               	bcf	138,1,c	;volatile
  1047  0003B4                     
  1048                           ;motor.c: 12:     LATBbits.LATB2 = 0;
  1049  0003B4  948A               	bcf	138,2,c	;volatile
  1050  0003B6                     
  1051                           ;motor.c: 13:     LATBbits.LATB3 = 0;
  1052  0003B6  968A               	bcf	138,3,c	;volatile
  1053                           
  1054                           ;motor.c: 14:     PTCON0 = 0b00000000;
  1055  0003B8  0E00               	movlw	0
  1056  0003BA  6E7F               	movwf	127,c	;volatile
  1057                           
  1058                           ;motor.c: 15:     PTCON1 = 0b10000000;
  1059  0003BC  0E80               	movlw	128
  1060  0003BE  6E7E               	movwf	126,c	;volatile
  1061                           
  1062                           ;motor.c: 16:     PWMCON0 = 0b01101111;
  1063  0003C0  0E6F               	movlw	111
  1064  0003C2  6E6F               	movwf	111,c	;volatile
  1065                           
  1066                           ;motor.c: 17:     PWMCON1 = 0x00;
  1067  0003C4  0E00               	movlw	0
  1068  0003C6  6E6E               	movwf	110,c	;volatile
  1069                           
  1070                           ;motor.c: 18:     PTPERL = 0b11000111;
  1071  0003C8  0EC7               	movlw	199
  1072  0003CA  6E7B               	movwf	123,c	;volatile
  1073                           
  1074                           ;motor.c: 19:     PTPERH = 0b00000000;
  1075  0003CC  0E00               	movlw	0
  1076  0003CE  6E7A               	movwf	122,c	;volatile
  1077                           
  1078                           ;motor.c: 20:     PDC0L = 0b00000000;
  1079  0003D0  0E00               	movlw	0
  1080  0003D2  6E79               	movwf	121,c	;volatile
  1081                           
  1082                           ;motor.c: 21:     PDC0H = 0b00000000;
  1083  0003D4  0E00               	movlw	0
  1084  0003D6  6E78               	movwf	120,c	;volatile
  1085                           
  1086                           ;motor.c: 22:     PDC1L = 0b00000000;
  1087  0003D8  0E00               	movlw	0
  1088  0003DA  6E77               	movwf	119,c	;volatile
  1089                           
  1090                           ;motor.c: 23:     PDC1H = 0b00000000;
  1091  0003DC  0E00               	movlw	0
  1092  0003DE  6E76               	movwf	118,c	;volatile
  1093                           
  1094                           ;motor.c: 25:     motorL.power = 0;
  1095  0003E0  0E00               	movlw	0
  1096  0003E2  6E31               	movwf	_motorL^0,c	;volatile
  1097                           
  1098                           ;motor.c: 26:     motorL.direction = 1;
  1099  0003E4  0E01               	movlw	1
  1100  0003E6  6E32               	movwf	(_motorL+1)^0,c	;volatile
  1101  0003E8                     
  1102                           ;motor.c: 27:     motorL.dutyLowByte = (unsigned char *) (&PDC0L);
  1103  0003E8  0E79               	movlw	121
  1104  0003EA  6E33               	movwf	(_motorL+2)^0,c	;volatile
  1105  0003EC  0E0F               	movlw	15
  1106  0003EE  6E34               	movwf	(_motorL+3)^0,c	;volatile
  1107  0003F0                     
  1108                           ;motor.c: 28:     motorL.dutyHighByte = (unsigned char *) (&PDC0H);
  1109  0003F0  0E78               	movlw	120
  1110  0003F2  6E35               	movwf	(_motorL+4)^0,c	;volatile
  1111  0003F4  0E0F               	movlw	15
  1112  0003F6  6E36               	movwf	(_motorL+5)^0,c	;volatile
  1113                           
  1114                           ;motor.c: 29:     motorL.dir_pin = 0;
  1115  0003F8  0E00               	movlw	0
  1116  0003FA  6E37               	movwf	(_motorL+6)^0,c	;volatile
  1117  0003FC                     
  1118                           ;motor.c: 30:     motorL.PWMperiod = PWMcycle;
  1119  0003FC  0E00               	movlw	0
  1120  0003FE  6E39               	movwf	(_motorL+8)^0,c	;volatile
  1121  000400  0EC7               	movlw	199
  1122  000402  6E38               	movwf	(_motorL+7)^0,c	;volatile
  1123                           
  1124                           ;motor.c: 33:     motorR.power = 0;
  1125  000404  0E00               	movlw	0
  1126  000406  6E28               	movwf	_motorR^0,c	;volatile
  1127                           
  1128                           ;motor.c: 34:     motorR.direction = 1;
  1129  000408  0E01               	movlw	1
  1130  00040A  6E29               	movwf	(_motorR+1)^0,c	;volatile
  1131  00040C                     
  1132                           ;motor.c: 35:     motorR.dutyLowByte = (unsigned char *) (&PDC1L);
  1133  00040C  0E77               	movlw	119
  1134  00040E  6E2A               	movwf	(_motorR+2)^0,c	;volatile
  1135  000410  0E0F               	movlw	15
  1136  000412  6E2B               	movwf	(_motorR+3)^0,c	;volatile
  1137  000414                     
  1138                           ;motor.c: 36:     motorR.dutyHighByte = (unsigned char *) (&PDC1H);
  1139  000414  0E76               	movlw	118
  1140  000416  6E2C               	movwf	(_motorR+4)^0,c	;volatile
  1141  000418  0E0F               	movlw	15
  1142  00041A  6E2D               	movwf	(_motorR+5)^0,c	;volatile
  1143                           
  1144                           ;motor.c: 37:     motorR.dir_pin = 2;
  1145  00041C  0E02               	movlw	2
  1146  00041E  6E2E               	movwf	(_motorR+6)^0,c	;volatile
  1147  000420                     
  1148                           ;motor.c: 38:     motorR.PWMperiod = PWMcycle;
  1149  000420  0E00               	movlw	0
  1150  000422  6E30               	movwf	(_motorR+8)^0,c	;volatile
  1151  000424  0EC7               	movlw	199
  1152  000426  6E2F               	movwf	(_motorR+7)^0,c	;volatile
  1153  000428  0012               	return		;funcret
  1154  00042A                     __end_of_initMotor:
  1155                           	opt callstack 0
  1156                           
  1157 ;; *************** function _LEDInit *****************
  1158 ;; Defined at:
  1159 ;;		line 17 in file "led.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;		None
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;		None
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      void 
  1166 ;; Registers used:
  1167 ;;		None
  1168 ;; Tracked objects:
  1169 ;;		On entry : 0/0
  1170 ;;		On exit  : 0/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1173 ;;      Params:         0       0       0       0
  1174 ;;      Locals:         0       0       0       0
  1175 ;;      Temps:          0       0       0       0
  1176 ;;      Totals:         0       0       0       0
  1177 ;;Total ram usage:        0 bytes
  1178 ;; Hardware stack levels used:    1
  1179 ;; Hardware stack levels required when called:    2
  1180 ;; This function calls:
  1181 ;;		Nothing
  1182 ;; This function is called by:
  1183 ;;		_main
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           	psect	text7
  1188  00050C                     __ptext7:
  1189                           	opt callstack 0
  1190  00050C                     _LEDInit:
  1191                           	opt callstack 28
  1192  00050C                     
  1193                           ;led.c: 18:     LATDbits.LATD2 = 0;
  1194  00050C  948C               	bcf	140,2,c	;volatile
  1195                           
  1196                           ;led.c: 19:     LATDbits.LATD3 = 0;
  1197  00050E  968C               	bcf	140,3,c	;volatile
  1198                           
  1199                           ;led.c: 20:     LATCbits.LATC4 = 0;
  1200  000510  988B               	bcf	139,4,c	;volatile
  1201                           
  1202                           ;led.c: 21:     LATCbits.LATC5 = 0;
  1203  000512  9A8B               	bcf	139,5,c	;volatile
  1204                           
  1205                           ;led.c: 22:     LATCbits.LATC6 = 0;
  1206  000514  9C8B               	bcf	139,6,c	;volatile
  1207                           
  1208                           ;led.c: 23:     LATCbits.LATC7 = 0;
  1209  000516  9E8B               	bcf	139,7,c	;volatile
  1210                           
  1211                           ;led.c: 24:     LATDbits.LATD4 = 0;
  1212  000518  988C               	bcf	140,4,c	;volatile
  1213                           
  1214                           ;led.c: 25:     LATDbits.LATD5 = 0;
  1215  00051A  9A8C               	bcf	140,5,c	;volatile
  1216                           
  1217                           ;led.c: 26:     TRISDbits.RD2 = 0;
  1218  00051C  9495               	bcf	149,2,c	;volatile
  1219                           
  1220                           ;led.c: 27:     TRISDbits.RD3 = 0;
  1221  00051E  9695               	bcf	149,3,c	;volatile
  1222                           
  1223                           ;led.c: 28:     TRISDbits.RD4 = 0;
  1224  000520  9895               	bcf	149,4,c	;volatile
  1225                           
  1226                           ;led.c: 29:     TRISDbits.RD5 = 0;
  1227  000522  9A95               	bcf	149,5,c	;volatile
  1228                           
  1229                           ;led.c: 30:     TRISCbits.RC4 = 0;
  1230  000524  9894               	bcf	148,4,c	;volatile
  1231                           
  1232                           ;led.c: 31:     TRISCbits.RC5 = 0;
  1233  000526  9A94               	bcf	148,5,c	;volatile
  1234                           
  1235                           ;led.c: 32:     TRISCbits.RC6 = 0;
  1236  000528  9C94               	bcf	148,6,c	;volatile
  1237                           
  1238                           ;led.c: 33:     TRISCbits.RC7 = 0;
  1239  00052A  9E94               	bcf	148,7,c	;volatile
  1240  00052C  0012               	return		;funcret
  1241  00052E                     __end_of_LEDInit:
  1242                           	opt callstack 0
  1243                           
  1244 ;; *************** function _InterruptHandlerLow *****************
  1245 ;; Defined at:
  1246 ;;		line 21 in file "main.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;		None
  1249 ;; Auto vars:     Size  Location     Type
  1250 ;;		None
  1251 ;; Return value:  Size  Location     Type
  1252 ;;                  1    wreg      void 
  1253 ;; Registers used:
  1254 ;;		wreg, status,2, status,0, cstack
  1255 ;; Tracked objects:
  1256 ;;		On entry : 0/0
  1257 ;;		On exit  : 0/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1260 ;;      Params:         0       0       0       0
  1261 ;;      Locals:         0       0       0       0
  1262 ;;      Temps:          5       0       0       0
  1263 ;;      Totals:         5       0       0       0
  1264 ;;Total ram usage:        5 bytes
  1265 ;; Hardware stack levels used:    1
  1266 ;; Hardware stack levels required when called:    1
  1267 ;; This function calls:
  1268 ;;		_LEDout
  1269 ;; This function is called by:
  1270 ;;		Interrupt level 1
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           	psect	intcodelo
  1275  000018                     __pintcodelo:
  1276                           	opt callstack 0
  1277  000018                     _InterruptHandlerLow:
  1278                           	opt callstack 26
  1279                           
  1280                           ;incstack = 0
  1281  000018  803B               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  1282  00001A  CFD8 F008          	movff	status,??_InterruptHandlerLow+2
  1283  00001E  CFE8 F009          	movff	wreg,??_InterruptHandlerLow+3
  1284  000022  CFE0 F00A          	movff	bsr,??_InterruptHandlerLow+4
  1285  000026                     
  1286                           ;main.c: 22:     if (INTCONbits.INT0IF == 1) {
  1287  000026  A2F2               	btfss	242,1,c	;volatile
  1288  000028  EF18  F000         	goto	i1u36_21
  1289  00002C  EF1A  F000         	goto	i1u36_20
  1290  000030                     i1u36_21:
  1291  000030  EF51  F000         	goto	i1l211
  1292  000034                     i1u36_20:
  1293  000034                     
  1294                           ;main.c: 23:         TMR1 = 0;
  1295  000034  0E00               	movlw	0
  1296  000036  6ECF               	movwf	207,c	;volatile
  1297  000038  0E00               	movlw	0
  1298  00003A  6ECE               	movwf	206,c	;volatile
  1299  00003C                     
  1300                           ;main.c: 24:         LEDout(2);
  1301  00003C  0E00               	movlw	0
  1302  00003E  6E02               	movwf	(LEDout@number+1)^0,c
  1303  000040  0E02               	movlw	2
  1304  000042  6E01               	movwf	LEDout@number^0,c
  1305  000044  EC15  F002         	call	_LEDout	;wreg free
  1306  000048                     
  1307                           ;main.c: 25:         INTCONbits.INT0IF = 0;
  1308  000048  92F2               	bcf	242,1,c	;volatile
  1309  00004A                     
  1310                           ;main.c: 29:         if (PIR1bits.CCP1IF == 1) {
  1311  00004A  A49E               	btfss	158,2,c	;volatile
  1312  00004C  EF2A  F000         	goto	i1u37_21
  1313  000050  EF2C  F000         	goto	i1u37_20
  1314  000054                     i1u37_21:
  1315  000054  EF3B  F000         	goto	i1l1382
  1316  000058                     i1u37_20:
  1317  000058                     
  1318                           ;main.c: 30:             left = CCPR1L + (CCPR1H << 8);
  1319  000058  50BF               	movf	191,w,c	;volatile
  1320  00005A  6E07               	movwf	(??_InterruptHandlerLow+1)^0,c
  1321  00005C  6A06               	clrf	??_InterruptHandlerLow^0,c
  1322  00005E  50BE               	movf	190,w,c	;volatile
  1323  000060  2406               	addwf	??_InterruptHandlerLow^0,w,c
  1324  000062  6E24               	movwf	_left^0,c	;volatile
  1325  000064  0E00               	movlw	0
  1326  000066  2007               	addwfc	(??_InterruptHandlerLow+1)^0,w,c
  1327  000068  6E25               	movwf	(_left+1)^0,c	;volatile
  1328  00006A                     
  1329                           ;main.c: 31:             PIR1bits.CCP1IF = 0;
  1330  00006A  949E               	bcf	158,2,c	;volatile
  1331  00006C                     
  1332                           ;main.c: 32:             LEDout(CCPR1H);
  1333  00006C  CFBF F001          	movff	4031,LEDout@number	;volatile
  1334  000070  6A02               	clrf	(LEDout@number+1)^0,c
  1335  000072  EC15  F002         	call	_LEDout	;wreg free
  1336  000076                     i1l1382:
  1337                           
  1338                           ;main.c: 34:         if (PIR2bits.CCP2IF == 1) {
  1339  000076  A0A1               	btfss	161,0,c	;volatile
  1340  000078  EF40  F000         	goto	i1u38_21
  1341  00007C  EF42  F000         	goto	i1u38_20
  1342  000080                     i1u38_21:
  1343  000080  EF51  F000         	goto	i1l211
  1344  000084                     i1u38_20:
  1345  000084                     
  1346                           ;main.c: 35:             right = CCPR2L + (CCPR2H << 8);
  1347  000084  50BC               	movf	188,w,c	;volatile
  1348  000086  6E07               	movwf	(??_InterruptHandlerLow+1)^0,c
  1349  000088  6A06               	clrf	??_InterruptHandlerLow^0,c
  1350  00008A  50BB               	movf	187,w,c	;volatile
  1351  00008C  2406               	addwf	??_InterruptHandlerLow^0,w,c
  1352  00008E  6E26               	movwf	_right^0,c	;volatile
  1353  000090  0E00               	movlw	0
  1354  000092  2007               	addwfc	(??_InterruptHandlerLow+1)^0,w,c
  1355  000094  6E27               	movwf	(_right+1)^0,c	;volatile
  1356  000096                     
  1357                           ;main.c: 36:             PIR2bits.CCP2IF = 0;
  1358  000096  90A1               	bcf	161,0,c	;volatile
  1359  000098                     
  1360                           ;main.c: 37:             LEDout(CCPR2H);
  1361  000098  CFBC F001          	movff	4028,LEDout@number	;volatile
  1362  00009C  6A02               	clrf	(LEDout@number+1)^0,c
  1363  00009E  EC15  F002         	call	_LEDout	;wreg free
  1364  0000A2                     i1l211:
  1365  0000A2  C00A  FFE0         	movff	??_InterruptHandlerLow+4,bsr
  1366  0000A6  C009  FFE8         	movff	??_InterruptHandlerLow+3,wreg
  1367  0000AA  C008  FFD8         	movff	??_InterruptHandlerLow+2,status
  1368  0000AE  903B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1369  0000B0  0010               	retfie	
  1370  0000B2                     __end_of_InterruptHandlerLow:
  1371                           	opt callstack 0
  1372                           
  1373 ;; *************** function _LEDout *****************
  1374 ;; Defined at:
  1375 ;;		line 4 in file "led.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;  number          2    0[COMRAM] int 
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;		None
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  1    wreg      void 
  1382 ;; Registers used:
  1383 ;;		wreg, status,2, status,0
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1389 ;;      Params:         2       0       0       0
  1390 ;;      Locals:         0       0       0       0
  1391 ;;      Temps:          3       0       0       0
  1392 ;;      Totals:         5       0       0       0
  1393 ;;Total ram usage:        5 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; This function calls:
  1396 ;;		Nothing
  1397 ;; This function is called by:
  1398 ;;		_InterruptHandlerLow
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402                           	psect	text9
  1403  00042A                     __ptext9:
  1404                           	opt callstack 0
  1405  00042A                     _LEDout:
  1406                           	opt callstack 26
  1407  00042A                     
  1408                           ;led.c: 13:     LATC = (number & 0b00111100) << 2;
  1409  00042A  C001  F003         	movff	LEDout@number,??_LEDout
  1410  00042E  0E3C               	movlw	60
  1411  000430  1603               	andwf	??_LEDout^0,f,c
  1412  000432  90D8               	bcf	status,0,c
  1413  000434  3603               	rlcf	??_LEDout^0,f,c
  1414  000436  90D8               	bcf	status,0,c
  1415  000438  3403               	rlcf	??_LEDout^0,w,c
  1416  00043A  6E8B               	movwf	139,c	;volatile
  1417                           
  1418                           ;led.c: 14:     LATD = ((number & 0b00000011) << 2) | ((number & 0b11000000) >> 2);
  1419  00043C  C001  F003         	movff	LEDout@number,??_LEDout
  1420  000440  C002  F004         	movff	LEDout@number+1,??_LEDout+1
  1421  000444  3404               	rlcf	(??_LEDout+1)^0,w,c
  1422  000446  3204               	rrcf	(??_LEDout+1)^0,f,c
  1423  000448  3203               	rrcf	??_LEDout^0,f,c
  1424  00044A  3404               	rlcf	(??_LEDout+1)^0,w,c
  1425  00044C  3204               	rrcf	(??_LEDout+1)^0,f,c
  1426  00044E  3203               	rrcf	??_LEDout^0,f,c
  1427  000450  0E30               	movlw	48
  1428  000452  1603               	andwf	??_LEDout^0,f,c
  1429  000454  C001  F005         	movff	LEDout@number,??_LEDout+2
  1430  000458  0E03               	movlw	3
  1431  00045A  1605               	andwf	(??_LEDout+2)^0,f,c
  1432  00045C  90D8               	bcf	status,0,c
  1433  00045E  3605               	rlcf	(??_LEDout+2)^0,f,c
  1434  000460  90D8               	bcf	status,0,c
  1435  000462  3405               	rlcf	(??_LEDout+2)^0,w,c
  1436  000464  1003               	iorwf	??_LEDout^0,w,c
  1437  000466  6E8C               	movwf	140,c	;volatile
  1438  000468  0012               	return		;funcret
  1439  00046A                     __end_of_LEDout:
  1440                           	opt callstack 0
  1441  0000                     
  1442                           	psect	rparam
  1443  0000                     
  1444                           	psect	temp
  1445  00003B                     btemp:
  1446                           	opt callstack 0
  1447  00003B                     	ds	1
  1448  0000                     int$flags	set	btemp
  1449  0000                     wtemp8	set	btemp+1
  1450  0000                     ttemp5	set	btemp+1
  1451  0000                     ttemp6	set	btemp+4
  1452  0000                     ttemp7	set	btemp+8
  1453                           tosu	equ	0xFFF
  1454                           tosh	equ	0xFFE
  1455                           tosl	equ	0xFFD
  1456                           stkptr	equ	0xFFC
  1457                           pclatu	equ	0xFFB
  1458                           pclath	equ	0xFFA
  1459                           pcl	equ	0xFF9
  1460                           tblptru	equ	0xFF8
  1461                           tblptrh	equ	0xFF7
  1462                           tblptrl	equ	0xFF6
  1463                           tablat	equ	0xFF5
  1464                           prodh	equ	0xFF4
  1465                           prodl	equ	0xFF3
  1466                           indf0	equ	0xFEF
  1467                           postinc0	equ	0xFEE
  1468                           postdec0	equ	0xFED
  1469                           preinc0	equ	0xFEC
  1470                           plusw0	equ	0xFEB
  1471                           fsr0h	equ	0xFEA
  1472                           fsr0l	equ	0xFE9
  1473                           wreg	equ	0xFE8
  1474                           indf1	equ	0xFE7
  1475                           postinc1	equ	0xFE6
  1476                           postdec1	equ	0xFE5
  1477                           preinc1	equ	0xFE4
  1478                           plusw1	equ	0xFE3
  1479                           fsr1h	equ	0xFE2
  1480                           fsr1l	equ	0xFE1
  1481                           bsr	equ	0xFE0
  1482                           indf2	equ	0xFDF
  1483                           postinc2	equ	0xFDE
  1484                           postdec2	equ	0xFDD
  1485                           preinc2	equ	0xFDC
  1486                           plusw2	equ	0xFDB
  1487                           fsr2h	equ	0xFDA
  1488                           fsr2l	equ	0xFD9
  1489                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      58
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    turnRight@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRight@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnLeft@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLeft@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), motorL(COMRAM[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S357DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S357DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_turnLeft
    _main->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerLow in COMRAM

    _InterruptHandlerLow->_LEDout

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4330
                            _LEDInit
                          _initMotor
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     0      4    2150
                                             31 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             4     0      4    2150
                                             31 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          7     5      2    1998
                                             24 COMRAM     7     5      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     507
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                             16 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initMotor                                            2     2      0      30
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _InterruptHandlerLow                                  5     5      0     294
                                              5 COMRAM     5     5      0
                             _LEDout
 ---------------------------------------------------------------------------------
 (5) _LEDout                                               5     3      2     294
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LEDInit
   _initMotor
   _turnLeft
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnRight
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)
   _LEDout

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      3A       1       61.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3A       3        0.0%
DATA                 0      0      3A      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Nov 28 12:40:52 2019

                          l90 04BC                            l84 024E                            l77 0428  
                          l93 0492                  ___awdiv@sign 0016                            bsr 000FE0  
         ___wmul@multiplicand 000D                           l216 0318                           l242 052C  
                         l219 035E                           l245 050A                           l476 0312  
                         u300 00D2                           u301 00CE                           u310 01F4  
                         u311 01F0                           u240 0262                           u400 0374  
                         u241 025E                           u401 0370                           u250 027C  
                         u251 0278                           u260 02A2                           u324 0212  
                         u261 029E                           u325 020E                           u270 02C0  
                         u334 0240                           u271 02BC                           u335 023C  
                         u280 02DC                           u281 02D8                           u290 0302  
                         u291 02FE                           u390 0326                           u391 0322  
                         wreg 000FE8               __end_of_LEDInit 052E                          l1010 03AA  
                        l1020 03B4                          l1012 03AC                          l1030 040C  
                        l1022 03B6                          l1014 03AE                          l1006 03A8  
                        l1032 0414                          l1024 03E8                          l1016 03B0  
                        l1008 03A8                          l1034 0420                          l1026 03F0  
                        l1018 03B2                          l1028 03FC                          l1300 00D2  
                        l1062 050C                          l1310 01D8                          l1302 0134  
                        l1312 01F4                          l1304 017A                          l1320 04A0  
                        l1400 0330                          l1250 0502                          l1314 0222  
                        l1306 0196                          l1322 04A4                          l1330 0476  
                        l1410 033A                          l1402 0332                          l1260 026A  
                        l1308 01B6                          l1324 04B0                          l1316 0494  
                        l1332 047A                          l1420 0344                          l1412 033C  
                        l1404 0334                          l1270 0290                          l1262 026E  
                        l1254 0250                          l1318 049C                          l1334 0486  
                        l1326 046A                          l1430 0350                          l1422 0346  
                        l1414 033E                          l1406 0336                          l1280 02C6  
                        l1272 02A2                          l1264 027C                          l1256 0254  
                        l1248 04E6                          l1328 0472                          l1440 035A  
                        l1432 0352                          l1424 0348                          l1416 0340  
                        l1408 0338                          l1282 02DC                          l1274 02AA  
                        l1290 02F2                          l1266 0284                          l1258 0262  
                        l1442 035C                          l1434 0354                          l1426 034C  
                        l1418 0342                          l1292 0302                          l1284 02E4  
                        l1276 02B2                          l1268 0288                          l1444 0374  
                        l1436 0356                          l1428 034E                          l1294 030A  
                        l1286 02E6                          l1278 02C0                          l1446 038C  
                        l1438 0358                          l1390 0314                          l1288 02EC  
                        l1392 0326                          l1298 00B6                          l1394 032A  
                        l1396 032C                          l1398 032E                          _LATB 000F8A  
                        _LATC 000F8B                          _LATD 000F8C                          _TMR1 000FCE  
                        _main 0314                          _left 0024                          fsr2h 000FDA  
                        indf2 000FDF                          fsr2l 000FD9                          btemp 003B  
                        prodh 000FF4                          prodl 000FF3                          start 00B2  
                ___param_bank 000000                         ?_main 0001               __end_of___awdiv 0314  
             ___awdiv@divisor 0013                         _PDC0H 000F78                         _PDC1H 000F76  
                       _PDC0L 000F79                         _PDC1L 000F77                         i1l211 00A2  
                       i1l239 0468               ___awdiv@counter 0015                         _RCREG 000FAE  
                       _SPBRG 000FAF                         _TXREG 000FAD                         _right 0026  
                       tablat 000FF5                         ttemp5 003C                         ttemp6 003F  
                       ttemp7 0043                         status 000FD8                         wtemp8 003C  
                _TurningSpeed 003A               __initialization 04BE                  __end_of_main 03A8  
              __CFG_OSC$IRCIO 000000                        ??_main 0024                 __activetblptr 000000  
                   ??_LEDInit 000B                  ?_setMotorPWM 0019                        _CCPR1H 000FBF  
                      _CCPR2H 000FBC                        _CCPR1L 000FBE                        _CCPR2L 000FBB  
            ___awdiv@dividend 0011                        i1l1336 042A                        i1l1370 003C  
                      i1l1380 006C                        i1l1372 0048                        i1l1382 0076  
                      i1l1374 004A                        i1l1366 0026                        i1l1384 0084  
                      i1l1376 0058                        i1l1368 0034                        i1l1386 0096  
                      i1l1378 006A                        i1l1388 0098                        _LEDout 042A  
                      _OSCCON 000FD3                        _PTCON0 000F7F                        _PTCON1 000F7E  
                      _SPBRGH 000FB0                        _PTPERH 000F7A                        _PTPERL 000F7B  
                      ___wmul 04E6                     ??___awdiv 0015                        clear_0 04D6  
            ___awdiv@quotient 0017                        _motorL 0031                        _motorR 0028  
                __pdataCOMRAM 003A                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8              __end_of_turnLeft 04BE                    __accesstop 0060  
     __end_of__initialization 04DC                 ___rparam_used 000001                __pcstackCOMRAM 0001  
 __end_of_InterruptHandlerLow 00B2                       ?_LEDout 0001            __size_of_initMotor 0082  
                     ?___wmul 000B                       _LEDInit 050C                       i1u36_20 0034  
                     i1u36_21 0030                       i1u37_20 0058                       i1u37_21 0054  
                     i1u38_20 0084                       i1u38_21 0080                       _PWMCON0 000F6F  
                     _PWMCON1 000F6E          __size_of_setMotorPWM 019A               __size_of_LEDout 0040  
          __size_of_turnRight 002A                       __Hparam 0000                       __Lparam 0000  
                     ___awdiv 0250               __size_of___wmul 0026                       __pcinit 04BE  
                     __ramtop 0300                     ?_turnLeft 0020                       __ptext0 0314  
                     __ptext1 046A                       __ptext2 0494                       __ptext3 00B6  
                     __ptext4 04E6                       __ptext5 0250                       __ptext6 03A8  
                     __ptext7 050C                       __ptext9 042A                     _T1CONbits 000FCD  
           __end_of_initMotor 042A          end_of_initialization 04DC            setMotorPWM@PWMduty 001E  
                turnRight@m_L 0020                  turnRight@m_R 0022                     _RCSTAbits 000FAB  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
                  ??_turnLeft 0024             __end_of_turnRight 0494                  LEDout@number 0001  
                   _TRISAbits 000F92                     _TRISBbits 000F93                     _TRISCbits 000F94  
                   _TRISDbits 000F95                   _CCP1CONbits 000FBD                   _CCP2CONbits 000FBA  
                   _TXSTAbits 000FAC                __end_of_LEDout 046A                __end_of___wmul 050C  
                 _BAUDCONbits 000FAA                 __pidataCOMRAM 052E           start_initialization 04BE  
                    ??_LEDout 0003                      ??___wmul 000F                      ?_LEDInit 0001  
                 __pbssCOMRAM 0024  __size_of_InterruptHandlerLow 009A                      ?___awdiv 0011  
                 __pintcodelo 0018             __size_of_turnLeft 002A                 ??_setMotorPWM 001B  
                   _initMotor 03A8                   turnLeft@m_L 0020                   turnLeft@m_R 0022  
              ___wmul@product 000F                      _LATAbits 000F89                      _LATBbits 000F8A  
                    _LATCbits 000F8B                      _LATDbits 000F8C                      _PIE1bits 000F9D  
                    _PIR1bits 000F9E                      _PIR2bits 000FA1                      _RCONbits 000FD0  
           ___wmul@multiplier 000B                  setMotorPWM@m 0019              __size_of_LEDInit 0022  
                  ?_initMotor 0001                     _turnRight 046A                   _INTCON2bits 000FF1  
         __end_of_setMotorPWM 0250                      __Hrparam 0000                      __Lrparam 0000  
            __size_of___awdiv 00C4                    ?_turnRight 0020                 __size_of_main 0094  
                    int$flags 003B           _InterruptHandlerLow 0018                      _turnLeft 0494  
                  _INTCONbits 000FF2                   ??_initMotor 000B                   _setMotorPWM 00B6  
                    intlevel1 0000          ?_InterruptHandlerLow 0001                    _OSCCONbits 000FD3  
                 ??_turnRight 0024         ??_InterruptHandlerLow 0006  
