

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Dec 02 10:31:13 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33  0000                     
    34                           ; Version 2.10
    35                           ; Generated 31/07/2019 GMT
    36                           ; 
    37                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F4331 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	idataCOMRAM
    70  00084A                     __pidataCOMRAM:
    71                           	opt callstack 0
    72                           
    73                           ;initializer for _TurningSpeed
    74  00084A  08                 	db	8
    75  0000                     _TMR1	set	4046
    76  0000                     _LATD	set	3980
    77  0000                     _LATC	set	3979
    78  0000                     _T1CONbits	set	4045
    79  0000                     _INTCON2bits	set	4081
    80  0000                     _CCP2CONbits	set	4026
    81  0000                     _CCP1CONbits	set	4029
    82  0000                     _PIE1bits	set	3997
    83  0000                     _RCONbits	set	4048
    84  0000                     _OSCCONbits	set	4051
    85  0000                     _OSCCON	set	4051
    86  0000                     _CCPR2H	set	4028
    87  0000                     _CCPR2L	set	4027
    88  0000                     _PIR2bits	set	4001
    89  0000                     _CCPR1H	set	4031
    90  0000                     _CCPR1L	set	4030
    91  0000                     _INTCONbits	set	4082
    92  0000                     _RCSTAbits	set	4011
    93  0000                     _TXSTAbits	set	4012
    94  0000                     _BAUDCONbits	set	4010
    95  0000                     _SPBRGH	set	4016
    96  0000                     _SPBRG	set	4015
    97  0000                     _TXREG	set	4013
    98  0000                     _RCREG	set	4014
    99  0000                     _PIR1bits	set	3998
   100  0000                     _LATB	set	3978
   101  0000                     _PTPERH	set	3962
   102  0000                     _PTPERL	set	3963
   103  0000                     _PWMCON1	set	3950
   104  0000                     _PWMCON0	set	3951
   105  0000                     _PTCON1	set	3966
   106  0000                     _PTCON0	set	3967
   107  0000                     _LATBbits	set	3978
   108  0000                     _TRISBbits	set	3987
   109  0000                     _TRISDbits	set	3989
   110  0000                     _TRISCbits	set	3988
   111  0000                     _TRISAbits	set	3986
   112  0000                     _LATAbits	set	3977
   113  0000                     _LATDbits	set	3980
   114  0000                     _LATCbits	set	3979
   115  0000                     _PDC1H	set	3958
   116  0000                     _PDC1L	set	3959
   117  0000                     _PDC0H	set	3960
   118  0000                     _PDC0L	set	3961
   119                           
   120                           ; #config settings
   121  0000                     
   122                           	psect	cinit
   123  0007BE                     __pcinit:
   124                           	opt callstack 0
   125  0007BE                     start_initialization:
   126                           	opt callstack 0
   127  0007BE                     __initialization:
   128                           	opt callstack 0
   129                           
   130                           ; Initialize objects allocated to COMRAM (1 bytes)
   131                           ; load TBLPTR registers with __pidataCOMRAM
   132  0007BE  0E4A               	movlw	low __pidataCOMRAM
   133  0007C0  6EF6               	movwf	tblptrl,c
   134  0007C2  0E08               	movlw	high __pidataCOMRAM
   135  0007C4  6EF7               	movwf	tblptrh,c
   136  0007C6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   137  0007C8  6EF8               	movwf	tblptru,c
   138  0007CA  0009               	tblrd		*+	;fetch initializer
   139  0007CC  CFF5 F03C          	movff	tablat,__pdataCOMRAM
   140                           
   141                           ; Clear objects allocated to COMRAM (22 bytes)
   142  0007D0  EE00  F026         	lfsr	0,__pbssCOMRAM
   143  0007D4  0E16               	movlw	22
   144  0007D6                     clear_0:
   145  0007D6  6AEE               	clrf	postinc0,c
   146  0007D8  06E8               	decf	wreg,f,c
   147  0007DA  E1FD               	bnz	clear_0
   148  0007DC                     end_of_initialization:
   149                           	opt callstack 0
   150  0007DC                     __end_of__initialization:
   151                           	opt callstack 0
   152  0007DC  903D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   153  0007DE  923D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   154  0007E0  0100               	movlb	0
   155  0007E2  EF38  F001         	goto	_main	;jump to C main() function
   156                           
   157                           	psect	bssCOMRAM
   158  000026                     __pbssCOMRAM:
   159                           	opt callstack 0
   160  000026                     _left:
   161                           	opt callstack 0
   162  000026                     	ds	2
   163  000028                     _right:
   164                           	opt callstack 0
   165  000028                     	ds	2
   166  00002A                     _motorR:
   167                           	opt callstack 0
   168  00002A                     	ds	9
   169  000033                     _motorL:
   170                           	opt callstack 0
   171  000033                     	ds	9
   172                           
   173                           	psect	dataCOMRAM
   174  00003C                     __pdataCOMRAM:
   175                           	opt callstack 0
   176  00003C                     _TurningSpeed:
   177                           	opt callstack 0
   178  00003C                     	ds	1
   179                           
   180                           	psect	cstackCOMRAM
   181  000001                     __pcstackCOMRAM:
   182                           	opt callstack 0
   183  000001                     ??i1_LCDout:
   184  000001                     LEDout@number:
   185                           	opt callstack 0
   186                           
   187                           ; 2 bytes @ 0x0
   188  000001                     	ds	1
   189  000002                     i1LCDout@number:
   190                           	opt callstack 0
   191                           
   192                           ; 1 bytes @ 0x1
   193  000002                     	ds	1
   194  000003                     ??_LEDout:
   195  000003                     i1SendLCD@type:
   196                           	opt callstack 0
   197                           
   198                           ; 1 bytes @ 0x2
   199  000003                     	ds	1
   200  000004                     i1SendLCD@Byte:
   201                           	opt callstack 0
   202                           
   203                           ; 1 bytes @ 0x3
   204  000004                     	ds	1
   205  000005                     i1SetLine@line:
   206                           	opt callstack 0
   207                           
   208                           ; 1 bytes @ 0x4
   209  000005                     	ds	1
   210  000006                     ??_InterruptHandlerLow:
   211                           
   212                           ; 1 bytes @ 0x5
   213  000006                     	ds	5
   214  00000B                     ??_LCDout:
   215  00000B                     ?___wmul:
   216                           	opt callstack 0
   217  00000B                     ___wmul@multiplier:
   218                           	opt callstack 0
   219                           
   220                           ; 2 bytes @ 0xA
   221  00000B                     	ds	1
   222  00000C                     LCDout@number:
   223                           	opt callstack 0
   224                           
   225                           ; 1 bytes @ 0xB
   226  00000C                     	ds	1
   227  00000D                     SendLCD@type:
   228                           	opt callstack 0
   229  00000D                     ___wmul@multiplicand:
   230                           	opt callstack 0
   231                           
   232                           ; 2 bytes @ 0xC
   233  00000D                     	ds	1
   234  00000E                     SendLCD@Byte:
   235                           	opt callstack 0
   236                           
   237                           ; 1 bytes @ 0xD
   238  00000E                     	ds	1
   239  00000F                     ??_LCD_Init:
   240  00000F                     SetLine@line:
   241                           	opt callstack 0
   242  00000F                     ___wmul@product:
   243                           	opt callstack 0
   244                           
   245                           ; 2 bytes @ 0xE
   246  00000F                     	ds	2
   247  000011                     ?___awdiv:
   248                           	opt callstack 0
   249  000011                     ___awdiv@dividend:
   250                           	opt callstack 0
   251                           
   252                           ; 2 bytes @ 0x10
   253  000011                     	ds	2
   254  000013                     ___awdiv@divisor:
   255                           	opt callstack 0
   256                           
   257                           ; 2 bytes @ 0x12
   258  000013                     	ds	2
   259  000015                     ___awdiv@counter:
   260                           	opt callstack 0
   261                           
   262                           ; 1 bytes @ 0x14
   263  000015                     	ds	1
   264  000016                     ___awdiv@sign:
   265                           	opt callstack 0
   266                           
   267                           ; 1 bytes @ 0x15
   268  000016                     	ds	1
   269  000017                     ___awdiv@quotient:
   270                           	opt callstack 0
   271                           
   272                           ; 2 bytes @ 0x16
   273  000017                     	ds	2
   274  000019                     setMotorPWM@m:
   275                           	opt callstack 0
   276                           
   277                           ; 2 bytes @ 0x18
   278  000019                     	ds	2
   279  00001B                     ??_setMotorPWM:
   280                           
   281                           ; 1 bytes @ 0x1A
   282  00001B                     	ds	3
   283  00001E                     setMotorPWM@PWMduty:
   284                           	opt callstack 0
   285                           
   286                           ; 2 bytes @ 0x1D
   287  00001E                     	ds	2
   288  000020                     turnLeft@m_L:
   289                           	opt callstack 0
   290  000020                     turnRight@m_L:
   291                           	opt callstack 0
   292  000020                     fullSpeedAhead@m_L:
   293                           	opt callstack 0
   294                           
   295                           ; 2 bytes @ 0x1F
   296  000020                     	ds	2
   297  000022                     turnLeft@m_R:
   298                           	opt callstack 0
   299  000022                     turnRight@m_R:
   300                           	opt callstack 0
   301  000022                     fullSpeedAhead@m_R:
   302                           	opt callstack 0
   303                           
   304                           ; 2 bytes @ 0x21
   305  000022                     	ds	2
   306  000024                     ??_main:
   307                           
   308                           ; 1 bytes @ 0x23
   309  000024                     	ds	2
   310                           
   311 ;;
   312 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   313 ;;
   314 ;; *************** function _main *****************
   315 ;; Defined at:
   316 ;;		line 44 in file "main.c"
   317 ;; Parameters:    Size  Location     Type
   318 ;;		None
   319 ;; Auto vars:     Size  Location     Type
   320 ;;		None
   321 ;; Return value:  Size  Location     Type
   322 ;;                  1    wreg      void 
   323 ;; Registers used:
   324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   325 ;; Tracked objects:
   326 ;;		On entry : 0/0
   327 ;;		On exit  : 0/0
   328 ;;		Unchanged: 0/0
   329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   330 ;;      Params:         0       0       0       0
   331 ;;      Locals:         0       0       0       0
   332 ;;      Temps:          2       0       0       0
   333 ;;      Totals:         2       0       0       0
   334 ;;Total ram usage:        2 bytes
   335 ;; Hardware stack levels required when called:    9
   336 ;; This function calls:
   337 ;;		_LCD_Init
   338 ;;		_LEDInit
   339 ;;		_SetLine
   340 ;;		_fullSpeedAhead
   341 ;;		_initMotor
   342 ;;		_turnLeft
   343 ;;		_turnRight
   344 ;; This function is called by:
   345 ;;		Startup code after reset
   346 ;; This function uses a non-reentrant model
   347 ;;
   348                           
   349                           	psect	text0
   350  000270                     __ptext0:
   351                           	opt callstack 0
   352  000270                     _main:
   353                           	opt callstack 22
   354  000270                     
   355                           ;main.c: 45:     OSCCON = 0x72;
   356  000270  0E72               	movlw	114
   357  000272  6ED3               	movwf	211,c	;volatile
   358  000274                     l224:
   359  000274  A4D3               	btfss	211,2,c	;volatile
   360  000276  EF3F  F001         	goto	u471
   361  00027A  EF41  F001         	goto	u470
   362  00027E                     u471:
   363  00027E  EF3A  F001         	goto	l224
   364  000282                     u470:
   365  000282                     
   366                           ;main.c: 48:     LCD_Init();
   367  000282  EC0A  F002         	call	_LCD_Init	;wreg free
   368                           
   369                           ;main.c: 49:     SetLine(1);
   370  000286  0E01               	movlw	1
   371  000288  EC3C  F003         	call	_SetLine
   372                           
   373                           ;main.c: 50:     initMotor();
   374  00028C  EC5F  F002         	call	_initMotor	;wreg free
   375  000290                     
   376                           ;main.c: 52:     INTCONbits.GIEH = 1;
   377  000290  8EF2               	bsf	242,7,c	;volatile
   378  000292                     
   379                           ;main.c: 53:     INTCONbits.GIEL = 1;
   380  000292  8CF2               	bsf	242,6,c	;volatile
   381  000294                     
   382                           ;main.c: 54:     RCONbits.IPEN = 1;
   383  000294  8ED0               	bsf	208,7,c	;volatile
   384  000296                     
   385                           ;main.c: 55:     PIE1bits.RCIE = 1;
   386  000296  8A9D               	bsf	157,5,c	;volatile
   387  000298                     
   388                           ;main.c: 57:     TRISCbits.RC1 = 1;
   389  000298  8294               	bsf	148,1,c	;volatile
   390  00029A                     
   391                           ;main.c: 58:     TRISCbits.RC2 = 1;
   392  00029A  8494               	bsf	148,2,c	;volatile
   393  00029C                     
   394                           ;main.c: 59:     TRISCbits.RC3 = 1;
   395  00029C  8694               	bsf	148,3,c	;volatile
   396  00029E                     
   397                           ;main.c: 60:     CCP1CONbits.CCP1M3 = 0;
   398  00029E  96BD               	bcf	189,3,c	;volatile
   399  0002A0                     
   400                           ;main.c: 61:     CCP1CONbits.CCP1M2 = 1;
   401  0002A0  84BD               	bsf	189,2,c	;volatile
   402  0002A2                     
   403                           ;main.c: 62:     CCP1CONbits.CCP1M1 = 0;
   404  0002A2  92BD               	bcf	189,1,c	;volatile
   405  0002A4                     
   406                           ;main.c: 63:     CCP1CONbits.CCP1M0 = 1;
   407  0002A4  80BD               	bsf	189,0,c	;volatile
   408  0002A6                     
   409                           ;main.c: 65:     CCP2CONbits.CCP2M3 = 0;
   410  0002A6  96BA               	bcf	186,3,c	;volatile
   411  0002A8                     
   412                           ;main.c: 66:     CCP2CONbits.CCP2M2 = 1;
   413  0002A8  84BA               	bsf	186,2,c	;volatile
   414  0002AA                     
   415                           ;main.c: 67:     CCP2CONbits.CCP2M1 = 0;
   416  0002AA  92BA               	bcf	186,1,c	;volatile
   417  0002AC                     
   418                           ;main.c: 68:     CCP2CONbits.CCP2M0 = 1;
   419  0002AC  80BA               	bsf	186,0,c	;volatile
   420  0002AE                     
   421                           ;main.c: 69:     LEDInit();
   422  0002AE  EC06  F004         	call	_LEDInit	;wreg free
   423  0002B2                     
   424                           ;main.c: 71:     INTCONbits.INT0IE = 1;
   425  0002B2  88F2               	bsf	242,4,c	;volatile
   426  0002B4                     
   427                           ;main.c: 72:     INTCON2bits.INTEDG0 = 0;
   428  0002B4  9CF1               	bcf	241,6,c	;volatile
   429  0002B6                     
   430                           ;main.c: 74:     T1CONbits.TMR1ON = 1;
   431  0002B6  80CD               	bsf	205,0,c	;volatile
   432  0002B8                     
   433                           ;main.c: 75:     T1CONbits.RD16 = 1;
   434  0002B8  8ECD               	bsf	205,7,c	;volatile
   435  0002BA                     
   436                           ;main.c: 76:     T1CONbits.TMR1CS = 0;
   437  0002BA  92CD               	bcf	205,1,c	;volatile
   438  0002BC                     
   439                           ;main.c: 77:     T1CONbits.T1OSCEN = 0;
   440  0002BC  96CD               	bcf	205,3,c	;volatile
   441  0002BE                     
   442                           ;main.c: 78:     T1CONbits.T1CKPS0 = 1;
   443  0002BE  88CD               	bsf	205,4,c	;volatile
   444  0002C0                     
   445                           ;main.c: 79:     T1CONbits.T1CKPS1 = 1;
   446  0002C0  8ACD               	bsf	205,5,c	;volatile
   447  0002C2                     
   448                           ;main.c: 80:     T1CONbits.T1RUN = 1;
   449  0002C2  8CCD               	bsf	205,6,c	;volatile
   450  0002C4                     l227:
   451                           
   452                           ;main.c: 90:                 if ((left - right) > 100){
   453  0002C4  5028               	movf	_right^0,w,c	;volatile
   454  0002C6  5C26               	subwf	_left^0,w,c	;volatile
   455  0002C8  6E24               	movwf	??_main^0,c
   456  0002CA  5029               	movf	(_right+1)^0,w,c	;volatile
   457  0002CC  5827               	subwfb	(_left+1)^0,w,c	;volatile
   458  0002CE  6E25               	movwf	(??_main+1)^0,c
   459  0002D0  5025               	movf	(??_main+1)^0,w,c
   460  0002D2  E109               	bnz	u480
   461  0002D4  0E65               	movlw	101
   462  0002D6  5C24               	subwf	??_main^0,w,c
   463  0002D8  A0D8               	btfss	status,0,c
   464  0002DA  EF71  F001         	goto	u481
   465  0002DE  EF73  F001         	goto	u480
   466  0002E2                     u481:
   467  0002E2  EF7D  F001         	goto	l1591
   468  0002E6                     u480:
   469  0002E6                     
   470                           ;main.c: 91:                     turnLeft(&motorL, &motorR);
   471  0002E6  0E33               	movlw	low _motorL
   472  0002E8  6E20               	movwf	turnLeft@m_L^0,c
   473  0002EA  0E00               	movlw	high _motorL
   474  0002EC  6E21               	movwf	(turnLeft@m_L+1)^0,c
   475  0002EE  0E2A               	movlw	low _motorR
   476  0002F0  6E22               	movwf	turnLeft@m_R^0,c
   477  0002F2  0E00               	movlw	high _motorR
   478  0002F4  6E23               	movwf	(turnLeft@m_R+1)^0,c
   479  0002F6  ECB5  F003         	call	_turnLeft	;wreg free
   480  0002FA                     l1591:
   481                           
   482                           ;main.c: 94:                 if ((left - right) < 100) {
   483  0002FA  5028               	movf	_right^0,w,c	;volatile
   484  0002FC  5C26               	subwf	_left^0,w,c	;volatile
   485  0002FE  6E24               	movwf	??_main^0,c
   486  000300  5029               	movf	(_right+1)^0,w,c	;volatile
   487  000302  5827               	subwfb	(_left+1)^0,w,c	;volatile
   488  000304  6E25               	movwf	(??_main+1)^0,c
   489  000306  5025               	movf	(??_main+1)^0,w,c
   490  000308  E107               	bnz	u491
   491  00030A  0E64               	movlw	100
   492  00030C  5C24               	subwf	??_main^0,w,c
   493  00030E  B0D8               	btfsc	status,0,c
   494  000310  EF8C  F001         	goto	u491
   495  000314  EF8E  F001         	goto	u490
   496  000318                     u491:
   497  000318  EF9A  F001         	goto	l1595
   498  00031C                     u490:
   499  00031C                     
   500                           ;main.c: 95:                     turnRight(&motorL, &motorR);
   501  00031C  0E33               	movlw	low _motorL
   502  00031E  6E20               	movwf	turnRight@m_L^0,c
   503  000320  0E00               	movlw	high _motorL
   504  000322  6E21               	movwf	(turnRight@m_L+1)^0,c
   505  000324  0E2A               	movlw	low _motorR
   506  000326  6E22               	movwf	turnRight@m_R^0,c
   507  000328  0E00               	movlw	high _motorR
   508  00032A  6E23               	movwf	(turnRight@m_R+1)^0,c
   509  00032C  ECA0  F003         	call	_turnRight	;wreg free
   510                           
   511                           ;main.c: 96:                 }
   512  000330  EF62  F001         	goto	l227
   513  000334                     l1595:
   514                           
   515                           ;main.c: 98:                     fullSpeedAhead(&motorL, &motorR);
   516  000334  0E33               	movlw	low _motorL
   517  000336  6E20               	movwf	fullSpeedAhead@m_L^0,c
   518  000338  0E00               	movlw	high _motorL
   519  00033A  6E21               	movwf	(fullSpeedAhead@m_L+1)^0,c
   520  00033C  0E2A               	movlw	low _motorR
   521  00033E  6E22               	movwf	fullSpeedAhead@m_R^0,c
   522  000340  0E00               	movlw	high _motorR
   523  000342  6E23               	movwf	(fullSpeedAhead@m_R+1)^0,c
   524  000344  ECCA  F003         	call	_fullSpeedAhead	;wreg free
   525  000348  EF62  F001         	goto	l227
   526  00034C  EF69  F000         	goto	start
   527  000350                     __end_of_main:
   528                           	opt callstack 0
   529                           
   530 ;; *************** function _turnRight *****************
   531 ;; Defined at:
   532 ;;		line 80 in file "motor.c"
   533 ;; Parameters:    Size  Location     Type
   534 ;;  m_L             2   31[COMRAM] PTR struct DC_motor
   535 ;;		 -> motorL(9), 
   536 ;;  m_R             2   33[COMRAM] PTR struct DC_motor
   537 ;;		 -> motorR(9), 
   538 ;; Auto vars:     Size  Location     Type
   539 ;;		None
   540 ;; Return value:  Size  Location     Type
   541 ;;                  1    wreg      void 
   542 ;; Registers used:
   543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   544 ;; Tracked objects:
   545 ;;		On entry : 0/0
   546 ;;		On exit  : 0/0
   547 ;;		Unchanged: 0/0
   548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   549 ;;      Params:         4       0       0       0
   550 ;;      Locals:         0       0       0       0
   551 ;;      Temps:          0       0       0       0
   552 ;;      Totals:         4       0       0       0
   553 ;;Total ram usage:        4 bytes
   554 ;; Hardware stack levels used:    1
   555 ;; Hardware stack levels required when called:    7
   556 ;; This function calls:
   557 ;;		_setMotorPWM
   558 ;; This function is called by:
   559 ;;		_main
   560 ;; This function uses a non-reentrant model
   561 ;;
   562                           
   563                           	psect	text1
   564  000740                     __ptext1:
   565                           	opt callstack 0
   566  000740                     _turnRight:
   567                           	opt callstack 23
   568  000740                     
   569                           ;motor.c: 81:     motorR.direction = 1;
   570  000740  0E01               	movlw	1
   571  000742  6E2B               	movwf	(_motorR+1)^0,c	;volatile
   572                           
   573                           ;motor.c: 82:     motorL.direction = 0;
   574  000744  0E00               	movlw	0
   575  000746  6E34               	movwf	(_motorL+1)^0,c	;volatile
   576  000748                     
   577                           ;motor.c: 83:     motorR.power = TurningSpeed;
   578  000748  C03C  F02A         	movff	_TurningSpeed,_motorR	;volatile
   579  00074C                     
   580                           ;motor.c: 84:     motorL.power = TurningSpeed;
   581  00074C  C03C  F033         	movff	_TurningSpeed,_motorL	;volatile
   582  000750                     
   583                           ;motor.c: 85:     setMotorPWM(&motorR);
   584  000750  0E2A               	movlw	low _motorR
   585  000752  6E19               	movwf	setMotorPWM@m^0,c
   586  000754  0E00               	movlw	high _motorR
   587  000756  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   588  000758  EC6B  F000         	call	_setMotorPWM	;wreg free
   589  00075C                     
   590                           ;motor.c: 86:     setMotorPWM(&motorL);
   591  00075C  0E33               	movlw	low _motorL
   592  00075E  6E19               	movwf	setMotorPWM@m^0,c
   593  000760  0E00               	movlw	high _motorL
   594  000762  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   595  000764  EC6B  F000         	call	_setMotorPWM	;wreg free
   596  000768  0012               	return		;funcret
   597  00076A                     __end_of_turnRight:
   598                           	opt callstack 0
   599                           
   600 ;; *************** function _turnLeft *****************
   601 ;; Defined at:
   602 ;;		line 70 in file "motor.c"
   603 ;; Parameters:    Size  Location     Type
   604 ;;  m_L             2   31[COMRAM] PTR struct DC_motor
   605 ;;		 -> motorL(9), 
   606 ;;  m_R             2   33[COMRAM] PTR struct DC_motor
   607 ;;		 -> motorR(9), 
   608 ;; Auto vars:     Size  Location     Type
   609 ;;		None
   610 ;; Return value:  Size  Location     Type
   611 ;;                  1    wreg      void 
   612 ;; Registers used:
   613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   614 ;; Tracked objects:
   615 ;;		On entry : 0/0
   616 ;;		On exit  : 0/0
   617 ;;		Unchanged: 0/0
   618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   619 ;;      Params:         4       0       0       0
   620 ;;      Locals:         0       0       0       0
   621 ;;      Temps:          0       0       0       0
   622 ;;      Totals:         4       0       0       0
   623 ;;Total ram usage:        4 bytes
   624 ;; Hardware stack levels used:    1
   625 ;; Hardware stack levels required when called:    7
   626 ;; This function calls:
   627 ;;		_setMotorPWM
   628 ;; This function is called by:
   629 ;;		_main
   630 ;; This function uses a non-reentrant model
   631 ;;
   632                           
   633                           	psect	text2
   634  00076A                     __ptext2:
   635                           	opt callstack 0
   636  00076A                     _turnLeft:
   637                           	opt callstack 23
   638  00076A                     
   639                           ;motor.c: 71:     motorL.direction = 1;
   640  00076A  0E01               	movlw	1
   641  00076C  6E34               	movwf	(_motorL+1)^0,c	;volatile
   642                           
   643                           ;motor.c: 72:     motorR.direction = 0;
   644  00076E  0E00               	movlw	0
   645  000770  6E2B               	movwf	(_motorR+1)^0,c	;volatile
   646  000772                     
   647                           ;motor.c: 73:     motorL.power = TurningSpeed;
   648  000772  C03C  F033         	movff	_TurningSpeed,_motorL	;volatile
   649  000776                     
   650                           ;motor.c: 74:     motorR.power = TurningSpeed;
   651  000776  C03C  F02A         	movff	_TurningSpeed,_motorR	;volatile
   652  00077A                     
   653                           ;motor.c: 75:     setMotorPWM(&motorR);
   654  00077A  0E2A               	movlw	low _motorR
   655  00077C  6E19               	movwf	setMotorPWM@m^0,c
   656  00077E  0E00               	movlw	high _motorR
   657  000780  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   658  000782  EC6B  F000         	call	_setMotorPWM	;wreg free
   659  000786                     
   660                           ;motor.c: 76:     setMotorPWM(&motorL);
   661  000786  0E33               	movlw	low _motorL
   662  000788  6E19               	movwf	setMotorPWM@m^0,c
   663  00078A  0E00               	movlw	high _motorL
   664  00078C  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   665  00078E  EC6B  F000         	call	_setMotorPWM	;wreg free
   666  000792  0012               	return		;funcret
   667  000794                     __end_of_turnLeft:
   668                           	opt callstack 0
   669                           
   670 ;; *************** function _initMotor *****************
   671 ;; Defined at:
   672 ;;		line 4 in file "motor.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;		None
   675 ;; Auto vars:     Size  Location     Type
   676 ;;  PWMcycle        2    0        int 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, status,2, status,0
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   686 ;;      Params:         0       0       0       0
   687 ;;      Locals:         2       0       0       0
   688 ;;      Temps:          0       0       0       0
   689 ;;      Totals:         2       0       0       0
   690 ;;Total ram usage:        2 bytes
   691 ;; Hardware stack levels used:    1
   692 ;; Hardware stack levels required when called:    5
   693 ;; This function calls:
   694 ;;		Nothing
   695 ;; This function is called by:
   696 ;;		_main
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text3
   701  0004BE                     __ptext3:
   702                           	opt callstack 0
   703  0004BE                     _initMotor:
   704                           	opt callstack 25
   705  0004BE                     
   706                           ;motor.c: 6:     TRISBbits.RB0 = 0;
   707  0004BE  9093               	bcf	147,0,c	;volatile
   708  0004C0                     
   709                           ;motor.c: 7:     TRISBbits.RB1 = 0;
   710  0004C0  9293               	bcf	147,1,c	;volatile
   711  0004C2                     
   712                           ;motor.c: 8:     TRISBbits.RB2 = 0;
   713  0004C2  9493               	bcf	147,2,c	;volatile
   714  0004C4                     
   715                           ;motor.c: 9:     TRISBbits.RB3 = 0;
   716  0004C4  9693               	bcf	147,3,c	;volatile
   717  0004C6                     
   718                           ;motor.c: 10:     LATBbits.LATB0 = 0;
   719  0004C6  908A               	bcf	138,0,c	;volatile
   720  0004C8                     
   721                           ;motor.c: 11:     LATBbits.LATB1 = 0;
   722  0004C8  928A               	bcf	138,1,c	;volatile
   723  0004CA                     
   724                           ;motor.c: 12:     LATBbits.LATB2 = 0;
   725  0004CA  948A               	bcf	138,2,c	;volatile
   726  0004CC                     
   727                           ;motor.c: 13:     LATBbits.LATB3 = 0;
   728  0004CC  968A               	bcf	138,3,c	;volatile
   729                           
   730                           ;motor.c: 14:     PTCON0 = 0b00000000;
   731  0004CE  0E00               	movlw	0
   732  0004D0  6E7F               	movwf	127,c	;volatile
   733                           
   734                           ;motor.c: 15:     PTCON1 = 0b10000000;
   735  0004D2  0E80               	movlw	128
   736  0004D4  6E7E               	movwf	126,c	;volatile
   737                           
   738                           ;motor.c: 16:     PWMCON0 = 0b01101111;
   739  0004D6  0E6F               	movlw	111
   740  0004D8  6E6F               	movwf	111,c	;volatile
   741                           
   742                           ;motor.c: 17:     PWMCON1 = 0x00;
   743  0004DA  0E00               	movlw	0
   744  0004DC  6E6E               	movwf	110,c	;volatile
   745                           
   746                           ;motor.c: 18:     PTPERL = 0b11000111;
   747  0004DE  0EC7               	movlw	199
   748  0004E0  6E7B               	movwf	123,c	;volatile
   749                           
   750                           ;motor.c: 19:     PTPERH = 0b00000000;
   751  0004E2  0E00               	movlw	0
   752  0004E4  6E7A               	movwf	122,c	;volatile
   753                           
   754                           ;motor.c: 20:     PDC0L = 0b00000000;
   755  0004E6  0E00               	movlw	0
   756  0004E8  6E79               	movwf	121,c	;volatile
   757                           
   758                           ;motor.c: 21:     PDC0H = 0b00000000;
   759  0004EA  0E00               	movlw	0
   760  0004EC  6E78               	movwf	120,c	;volatile
   761                           
   762                           ;motor.c: 22:     PDC1L = 0b00000000;
   763  0004EE  0E00               	movlw	0
   764  0004F0  6E77               	movwf	119,c	;volatile
   765                           
   766                           ;motor.c: 23:     PDC1H = 0b00000000;
   767  0004F2  0E00               	movlw	0
   768  0004F4  6E76               	movwf	118,c	;volatile
   769                           
   770                           ;motor.c: 25:     motorL.power = 0;
   771  0004F6  0E00               	movlw	0
   772  0004F8  6E33               	movwf	_motorL^0,c	;volatile
   773                           
   774                           ;motor.c: 26:     motorL.direction = 1;
   775  0004FA  0E01               	movlw	1
   776  0004FC  6E34               	movwf	(_motorL+1)^0,c	;volatile
   777  0004FE                     
   778                           ;motor.c: 27:     motorL.dutyLowByte = (unsigned char *) (&PDC0L);
   779  0004FE  0E79               	movlw	121
   780  000500  6E35               	movwf	(_motorL+2)^0,c	;volatile
   781  000502  0E0F               	movlw	15
   782  000504  6E36               	movwf	(_motorL+3)^0,c	;volatile
   783  000506                     
   784                           ;motor.c: 28:     motorL.dutyHighByte = (unsigned char *) (&PDC0H);
   785  000506  0E78               	movlw	120
   786  000508  6E37               	movwf	(_motorL+4)^0,c	;volatile
   787  00050A  0E0F               	movlw	15
   788  00050C  6E38               	movwf	(_motorL+5)^0,c	;volatile
   789                           
   790                           ;motor.c: 29:     motorL.dir_pin = 0;
   791  00050E  0E00               	movlw	0
   792  000510  6E39               	movwf	(_motorL+6)^0,c	;volatile
   793  000512                     
   794                           ;motor.c: 30:     motorL.PWMperiod = PWMcycle;
   795  000512  0E00               	movlw	0
   796  000514  6E3B               	movwf	(_motorL+8)^0,c	;volatile
   797  000516  0EC7               	movlw	199
   798  000518  6E3A               	movwf	(_motorL+7)^0,c	;volatile
   799                           
   800                           ;motor.c: 33:     motorR.power = 0;
   801  00051A  0E00               	movlw	0
   802  00051C  6E2A               	movwf	_motorR^0,c	;volatile
   803                           
   804                           ;motor.c: 34:     motorR.direction = 1;
   805  00051E  0E01               	movlw	1
   806  000520  6E2B               	movwf	(_motorR+1)^0,c	;volatile
   807  000522                     
   808                           ;motor.c: 35:     motorR.dutyLowByte = (unsigned char *) (&PDC1L);
   809  000522  0E77               	movlw	119
   810  000524  6E2C               	movwf	(_motorR+2)^0,c	;volatile
   811  000526  0E0F               	movlw	15
   812  000528  6E2D               	movwf	(_motorR+3)^0,c	;volatile
   813  00052A                     
   814                           ;motor.c: 36:     motorR.dutyHighByte = (unsigned char *) (&PDC1H);
   815  00052A  0E76               	movlw	118
   816  00052C  6E2E               	movwf	(_motorR+4)^0,c	;volatile
   817  00052E  0E0F               	movlw	15
   818  000530  6E2F               	movwf	(_motorR+5)^0,c	;volatile
   819                           
   820                           ;motor.c: 37:     motorR.dir_pin = 2;
   821  000532  0E02               	movlw	2
   822  000534  6E30               	movwf	(_motorR+6)^0,c	;volatile
   823  000536                     
   824                           ;motor.c: 38:     motorR.PWMperiod = PWMcycle;
   825  000536  0E00               	movlw	0
   826  000538  6E32               	movwf	(_motorR+8)^0,c	;volatile
   827  00053A  0EC7               	movlw	199
   828  00053C  6E31               	movwf	(_motorR+7)^0,c	;volatile
   829  00053E  0012               	return		;funcret
   830  000540                     __end_of_initMotor:
   831                           	opt callstack 0
   832                           
   833 ;; *************** function _fullSpeedAhead *****************
   834 ;; Defined at:
   835 ;;		line 90 in file "motor.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;  m_L             2   31[COMRAM] PTR struct DC_motor
   838 ;;		 -> motorL(9), 
   839 ;;  m_R             2   33[COMRAM] PTR struct DC_motor
   840 ;;		 -> motorR(9), 
   841 ;; Auto vars:     Size  Location     Type
   842 ;;		None
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   852 ;;      Params:         4       0       0       0
   853 ;;      Locals:         0       0       0       0
   854 ;;      Temps:          0       0       0       0
   855 ;;      Totals:         4       0       0       0
   856 ;;Total ram usage:        4 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; Hardware stack levels required when called:    7
   859 ;; This function calls:
   860 ;;		_setMotorPWM
   861 ;; This function is called by:
   862 ;;		_main
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           	psect	text4
   867  000794                     __ptext4:
   868                           	opt callstack 0
   869  000794                     _fullSpeedAhead:
   870                           	opt callstack 23
   871  000794                     
   872                           ;motor.c: 91:     motorR.direction = 1;
   873  000794  0E01               	movlw	1
   874  000796  6E2B               	movwf	(_motorR+1)^0,c	;volatile
   875                           
   876                           ;motor.c: 92:     motorL.direction = 1;
   877  000798  0E01               	movlw	1
   878  00079A  6E34               	movwf	(_motorL+1)^0,c	;volatile
   879  00079C                     
   880                           ;motor.c: 93:     motorL.power = TurningSpeed;
   881  00079C  C03C  F033         	movff	_TurningSpeed,_motorL	;volatile
   882  0007A0                     
   883                           ;motor.c: 94:     motorR.power = TurningSpeed;
   884  0007A0  C03C  F02A         	movff	_TurningSpeed,_motorR	;volatile
   885  0007A4                     
   886                           ;motor.c: 95:     setMotorPWM(&motorR);
   887  0007A4  0E2A               	movlw	low _motorR
   888  0007A6  6E19               	movwf	setMotorPWM@m^0,c
   889  0007A8  0E00               	movlw	high _motorR
   890  0007AA  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   891  0007AC  EC6B  F000         	call	_setMotorPWM	;wreg free
   892  0007B0                     
   893                           ;motor.c: 96:     setMotorPWM(&motorL);
   894  0007B0  0E33               	movlw	low _motorL
   895  0007B2  6E19               	movwf	setMotorPWM@m^0,c
   896  0007B4  0E00               	movlw	high _motorL
   897  0007B6  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   898  0007B8  EC6B  F000         	call	_setMotorPWM	;wreg free
   899  0007BC  0012               	return		;funcret
   900  0007BE                     __end_of_fullSpeedAhead:
   901                           	opt callstack 0
   902                           
   903 ;; *************** function _setMotorPWM *****************
   904 ;; Defined at:
   905 ;;		line 41 in file "motor.c"
   906 ;; Parameters:    Size  Location     Type
   907 ;;  m               2   24[COMRAM] PTR struct DC_motor
   908 ;;		 -> motorR(9), motorL(9), 
   909 ;; Auto vars:     Size  Location     Type
   910 ;;  PWMduty         2   29[COMRAM] int 
   911 ;; Return value:  Size  Location     Type
   912 ;;                  1    wreg      void 
   913 ;; Registers used:
   914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   915 ;; Tracked objects:
   916 ;;		On entry : 0/0
   917 ;;		On exit  : 0/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   920 ;;      Params:         2       0       0       0
   921 ;;      Locals:         2       0       0       0
   922 ;;      Temps:          3       0       0       0
   923 ;;      Totals:         7       0       0       0
   924 ;;Total ram usage:        7 bytes
   925 ;; Hardware stack levels used:    1
   926 ;; Hardware stack levels required when called:    6
   927 ;; This function calls:
   928 ;;		___awdiv
   929 ;;		___wmul
   930 ;; This function is called by:
   931 ;;		_turnLeft
   932 ;;		_turnRight
   933 ;;		_fullSpeedAhead
   934 ;;		_stop
   935 ;;		_setMotorFullSpeed
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939                           	psect	text5
   940  0000D6                     __ptext5:
   941                           	opt callstack 0
   942  0000D6                     _setMotorPWM:
   943                           	opt callstack 23
   944  0000D6                     
   945                           ;motor.c: 42:     int PWMduty;;motor.c: 43:     if (m->direction) {
   946  0000D6  EE20 F001          	lfsr	2,1
   947  0000DA  5019               	movf	setMotorPWM@m^0,w,c
   948  0000DC  26D9               	addwf	fsr2l,f,c
   949  0000DE  501A               	movf	(setMotorPWM@m+1)^0,w,c
   950  0000E0  22DA               	addwfc	fsr2h,f,c
   951  0000E2  50DF               	movf	indf2,w,c
   952  0000E4  B4D8               	btfsc	status,2,c
   953  0000E6  EF77  F000         	goto	u341
   954  0000EA  EF79  F000         	goto	u340
   955  0000EE                     u341:
   956  0000EE  EFAA  F000         	goto	l1375
   957  0000F2                     u340:
   958  0000F2                     
   959                           ;motor.c: 45:         PWMduty = m->PWMperiod - ((int) (m->power)*(m->PWMperiod)) / 100;
   960  0000F2  C019  FFD9         	movff	setMotorPWM@m,fsr2l
   961  0000F6  C01A  FFDA         	movff	setMotorPWM@m+1,fsr2h
   962  0000FA  50DF               	movf	indf2,w,c
   963  0000FC  6E1B               	movwf	??_setMotorPWM^0,c
   964  0000FE  501B               	movf	??_setMotorPWM^0,w,c
   965  000100  6E0B               	movwf	___wmul@multiplier^0,c
   966  000102  6A0C               	clrf	(___wmul@multiplier+1)^0,c
   967  000104  EE20 F007          	lfsr	2,7
   968  000108  5019               	movf	setMotorPWM@m^0,w,c
   969  00010A  26D9               	addwf	fsr2l,f,c
   970  00010C  501A               	movf	(setMotorPWM@m+1)^0,w,c
   971  00010E  22DA               	addwfc	fsr2h,f,c
   972  000110  CFDE F00D          	movff	postinc2,___wmul@multiplicand
   973  000114  CFDD F00E          	movff	postdec2,___wmul@multiplicand+1
   974  000118  ECF3  F003         	call	___wmul	;wreg free
   975  00011C  C00B  F011         	movff	?___wmul,___awdiv@dividend
   976  000120  C00C  F012         	movff	?___wmul+1,___awdiv@dividend+1
   977  000124  0E00               	movlw	0
   978  000126  6E14               	movwf	(___awdiv@divisor+1)^0,c
   979  000128  0E64               	movlw	100
   980  00012A  6E13               	movwf	___awdiv@divisor^0,c
   981  00012C  ECA8  F001         	call	___awdiv	;wreg free
   982  000130  EE20 F007          	lfsr	2,7
   983  000134  5019               	movf	setMotorPWM@m^0,w,c
   984  000136  26D9               	addwf	fsr2l,f,c
   985  000138  501A               	movf	(setMotorPWM@m+1)^0,w,c
   986  00013A  22DA               	addwfc	fsr2h,f,c
   987  00013C  CFDE F01C          	movff	postinc2,??_setMotorPWM+1
   988  000140  CFDD F01D          	movff	postdec2,??_setMotorPWM+2
   989  000144  5011               	movf	?___awdiv^0,w,c
   990  000146  5C1C               	subwf	(??_setMotorPWM+1)^0,w,c
   991  000148  6E1E               	movwf	setMotorPWM@PWMduty^0,c
   992  00014A  5012               	movf	(?___awdiv+1)^0,w,c
   993  00014C  581D               	subwfb	(??_setMotorPWM+2)^0,w,c
   994  00014E  6E1F               	movwf	(setMotorPWM@PWMduty+1)^0,c
   995                           
   996                           ;motor.c: 46:     } else {
   997  000150  EFCD  F000         	goto	l1377
   998  000154                     l1375:
   999                           
  1000                           ;motor.c: 48:         PWMduty = ((int) (m->power)*(m->PWMperiod)) / 100;
  1001  000154  C019  FFD9         	movff	setMotorPWM@m,fsr2l
  1002  000158  C01A  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1003  00015C  50DF               	movf	indf2,w,c
  1004  00015E  6E1B               	movwf	??_setMotorPWM^0,c
  1005  000160  501B               	movf	??_setMotorPWM^0,w,c
  1006  000162  6E0B               	movwf	___wmul@multiplier^0,c
  1007  000164  6A0C               	clrf	(___wmul@multiplier+1)^0,c
  1008  000166  EE20 F007          	lfsr	2,7
  1009  00016A  5019               	movf	setMotorPWM@m^0,w,c
  1010  00016C  26D9               	addwf	fsr2l,f,c
  1011  00016E  501A               	movf	(setMotorPWM@m+1)^0,w,c
  1012  000170  22DA               	addwfc	fsr2h,f,c
  1013  000172  CFDE F00D          	movff	postinc2,___wmul@multiplicand
  1014  000176  CFDD F00E          	movff	postdec2,___wmul@multiplicand+1
  1015  00017A  ECF3  F003         	call	___wmul	;wreg free
  1016  00017E  C00B  F011         	movff	?___wmul,___awdiv@dividend
  1017  000182  C00C  F012         	movff	?___wmul+1,___awdiv@dividend+1
  1018  000186  0E00               	movlw	0
  1019  000188  6E14               	movwf	(___awdiv@divisor+1)^0,c
  1020  00018A  0E64               	movlw	100
  1021  00018C  6E13               	movwf	___awdiv@divisor^0,c
  1022  00018E  ECA8  F001         	call	___awdiv	;wreg free
  1023  000192  C011  F01E         	movff	?___awdiv,setMotorPWM@PWMduty
  1024  000196  C012  F01F         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  1025  00019A                     l1377:
  1026                           
  1027                           ;motor.c: 50:     PWMduty = (PWMduty << 2);
  1028  00019A  C01E  F01B         	movff	setMotorPWM@PWMduty,??_setMotorPWM
  1029  00019E  C01F  F01C         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
  1030  0001A2  90D8               	bcf	status,0,c
  1031  0001A4  361B               	rlcf	??_setMotorPWM^0,f,c
  1032  0001A6  361C               	rlcf	(??_setMotorPWM+1)^0,f,c
  1033  0001A8  90D8               	bcf	status,0,c
  1034  0001AA  361B               	rlcf	??_setMotorPWM^0,f,c
  1035  0001AC  361C               	rlcf	(??_setMotorPWM+1)^0,f,c
  1036  0001AE  C01B  F01E         	movff	??_setMotorPWM,setMotorPWM@PWMduty
  1037  0001B2  C01C  F01F         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
  1038  0001B6                     
  1039                           ;motor.c: 51:     *(m->dutyLowByte) = PWMduty & 0xFF;
  1040  0001B6  EE20 F002          	lfsr	2,2
  1041  0001BA  5019               	movf	setMotorPWM@m^0,w,c
  1042  0001BC  26D9               	addwf	fsr2l,f,c
  1043  0001BE  501A               	movf	(setMotorPWM@m+1)^0,w,c
  1044  0001C0  22DA               	addwfc	fsr2h,f,c
  1045  0001C2  CFDE F01B          	movff	postinc2,??_setMotorPWM
  1046  0001C6  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  1047  0001CA  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  1048  0001CE  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1049  0001D2  C01E  FFDF         	movff	setMotorPWM@PWMduty,indf2
  1050  0001D6                     
  1051                           ;motor.c: 52:     *(m->dutyHighByte) = (PWMduty >> 8) & 0x3F;
  1052  0001D6  EE20 F004          	lfsr	2,4
  1053  0001DA  5019               	movf	setMotorPWM@m^0,w,c
  1054  0001DC  26D9               	addwf	fsr2l,f,c
  1055  0001DE  501A               	movf	(setMotorPWM@m+1)^0,w,c
  1056  0001E0  22DA               	addwfc	fsr2h,f,c
  1057  0001E2  CFDE F01B          	movff	postinc2,??_setMotorPWM
  1058  0001E6  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  1059  0001EA  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  1060  0001EE  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1061  0001F2  501F               	movf	(setMotorPWM@PWMduty+1)^0,w,c
  1062  0001F4  0B3F               	andlw	63
  1063  0001F6  6EDF               	movwf	indf2,c
  1064  0001F8                     
  1065                           ;motor.c: 54:     if (m->direction) {
  1066  0001F8  EE20 F001          	lfsr	2,1
  1067  0001FC  5019               	movf	setMotorPWM@m^0,w,c
  1068  0001FE  26D9               	addwf	fsr2l,f,c
  1069  000200  501A               	movf	(setMotorPWM@m+1)^0,w,c
  1070  000202  22DA               	addwfc	fsr2h,f,c
  1071  000204  50DF               	movf	indf2,w,c
  1072  000206  B4D8               	btfsc	status,2,c
  1073  000208  EF08  F001         	goto	u351
  1074  00020C  EF0A  F001         	goto	u350
  1075  000210                     u351:
  1076  000210  EF21  F001         	goto	l1387
  1077  000214                     u350:
  1078  000214                     
  1079                           ;motor.c: 55:         LATB = LATB | (1 << (m->dir_pin));
  1080  000214  EE20 F006          	lfsr	2,6
  1081  000218  5019               	movf	setMotorPWM@m^0,w,c
  1082  00021A  26D9               	addwf	fsr2l,f,c
  1083  00021C  501A               	movf	(setMotorPWM@m+1)^0,w,c
  1084  00021E  22DA               	addwfc	fsr2h,f,c
  1085  000220  50DF               	movf	indf2,w,c
  1086  000222  6E1B               	movwf	??_setMotorPWM^0,c
  1087  000224  0E01               	movlw	1
  1088  000226  6E1C               	movwf	(??_setMotorPWM+1)^0,c
  1089  000228  2A1B               	incf	??_setMotorPWM^0,f,c
  1090  00022A  EF19  F001         	goto	u364
  1091  00022E                     u365:
  1092  00022E  90D8               	bcf	status,0,c
  1093  000230  361C               	rlcf	(??_setMotorPWM+1)^0,f,c
  1094  000232                     u364:
  1095  000232  2E1B               	decfsz	??_setMotorPWM^0,f,c
  1096  000234  EF17  F001         	goto	u365
  1097  000238  501C               	movf	(??_setMotorPWM+1)^0,w,c
  1098  00023A  108A               	iorwf	138,w,c	;volatile
  1099  00023C  6E8A               	movwf	138,c	;volatile
  1100                           
  1101                           ;motor.c: 56:     } else {
  1102  00023E  EF37  F001         	goto	l84
  1103  000242                     l1387:
  1104                           
  1105                           ;motor.c: 57:         LATB = LATB & (~(1 << (m->dir_pin)));
  1106  000242  EE20 F006          	lfsr	2,6
  1107  000246  5019               	movf	setMotorPWM@m^0,w,c
  1108  000248  26D9               	addwf	fsr2l,f,c
  1109  00024A  501A               	movf	(setMotorPWM@m+1)^0,w,c
  1110  00024C  22DA               	addwfc	fsr2h,f,c
  1111  00024E  50DF               	movf	indf2,w,c
  1112  000250  6E1B               	movwf	??_setMotorPWM^0,c
  1113  000252  0E01               	movlw	1
  1114  000254  6E1C               	movwf	(??_setMotorPWM+1)^0,c
  1115  000256  2A1B               	incf	??_setMotorPWM^0,f,c
  1116  000258  EF30  F001         	goto	u374
  1117  00025C                     u375:
  1118  00025C  90D8               	bcf	status,0,c
  1119  00025E  361C               	rlcf	(??_setMotorPWM+1)^0,f,c
  1120  000260                     u374:
  1121  000260  2E1B               	decfsz	??_setMotorPWM^0,f,c
  1122  000262  EF2E  F001         	goto	u375
  1123  000266  501C               	movf	(??_setMotorPWM+1)^0,w,c
  1124  000268  0AFF               	xorlw	255
  1125  00026A  148A               	andwf	138,w,c	;volatile
  1126  00026C  6E8A               	movwf	138,c	;volatile
  1127  00026E                     l84:
  1128  00026E  0012               	return		;funcret
  1129  000270                     __end_of_setMotorPWM:
  1130                           	opt callstack 0
  1131                           
  1132 ;; *************** function ___wmul *****************
  1133 ;; Defined at:
  1134 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  1135 ;; Parameters:    Size  Location     Type
  1136 ;;  multiplier      2   10[COMRAM] unsigned int 
  1137 ;;  multiplicand    2   12[COMRAM] unsigned int 
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;  product         2   14[COMRAM] unsigned int 
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  2   10[COMRAM] unsigned int 
  1142 ;; Registers used:
  1143 ;;		wreg, status,2, status,0, prodl, prodh
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1149 ;;      Params:         4       0       0       0
  1150 ;;      Locals:         2       0       0       0
  1151 ;;      Temps:          0       0       0       0
  1152 ;;      Totals:         6       0       0       0
  1153 ;;Total ram usage:        6 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:    5
  1156 ;; This function calls:
  1157 ;;		Nothing
  1158 ;; This function is called by:
  1159 ;;		_setMotorPWM
  1160 ;;		_delay_s
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164                           	psect	text6
  1165  0007E6                     __ptext6:
  1166                           	opt callstack 0
  1167  0007E6                     ___wmul:
  1168                           	opt callstack 23
  1169  0007E6  500B               	movf	___wmul@multiplier^0,w,c
  1170  0007E8  020D               	mulwf	___wmul@multiplicand^0,c
  1171  0007EA  CFF3 F00F          	movff	prodl,___wmul@product
  1172  0007EE  CFF4 F010          	movff	prodh,___wmul@product+1
  1173  0007F2  500B               	movf	___wmul@multiplier^0,w,c
  1174  0007F4  020E               	mulwf	(___wmul@multiplicand+1)^0,c
  1175  0007F6  50F3               	movf	243,w,c
  1176  0007F8  2610               	addwf	(___wmul@product+1)^0,f,c
  1177  0007FA  500C               	movf	(___wmul@multiplier+1)^0,w,c
  1178  0007FC  020D               	mulwf	___wmul@multiplicand^0,c
  1179  0007FE  50F3               	movf	243,w,c
  1180  000800  2610               	addwf	(___wmul@product+1)^0,f,c
  1181  000802  C00F  F00B         	movff	___wmul@product,?___wmul
  1182  000806  C010  F00C         	movff	___wmul@product+1,?___wmul+1
  1183  00080A  0012               	return		;funcret
  1184  00080C                     __end_of___wmul:
  1185                           	opt callstack 0
  1186                           
  1187 ;; *************** function ___awdiv *****************
  1188 ;; Defined at:
  1189 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;  dividend        2   16[COMRAM] int 
  1192 ;;  divisor         2   18[COMRAM] int 
  1193 ;; Auto vars:     Size  Location     Type
  1194 ;;  quotient        2   22[COMRAM] int 
  1195 ;;  sign            1   21[COMRAM] unsigned char 
  1196 ;;  counter         1   20[COMRAM] unsigned char 
  1197 ;; Return value:  Size  Location     Type
  1198 ;;                  2   16[COMRAM] int 
  1199 ;; Registers used:
  1200 ;;		wreg, status,2, status,0
  1201 ;; Tracked objects:
  1202 ;;		On entry : 0/0
  1203 ;;		On exit  : 0/0
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1206 ;;      Params:         4       0       0       0
  1207 ;;      Locals:         4       0       0       0
  1208 ;;      Temps:          0       0       0       0
  1209 ;;      Totals:         8       0       0       0
  1210 ;;Total ram usage:        8 bytes
  1211 ;; Hardware stack levels used:    1
  1212 ;; Hardware stack levels required when called:    5
  1213 ;; This function calls:
  1214 ;;		Nothing
  1215 ;; This function is called by:
  1216 ;;		_setMotorPWM
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           	psect	text7
  1221  000350                     __ptext7:
  1222                           	opt callstack 0
  1223  000350                     ___awdiv:
  1224                           	opt callstack 23
  1225  000350  0E00               	movlw	0
  1226  000352  6E16               	movwf	___awdiv@sign^0,c
  1227  000354  BE14               	btfsc	(___awdiv@divisor+1)^0,7,c
  1228  000356  EFB1  F001         	goto	u270
  1229  00035A  EFAF  F001         	goto	u271
  1230  00035E                     u271:
  1231  00035E  EFB7  F001         	goto	l1321
  1232  000362                     u270:
  1233  000362  6C13               	negf	___awdiv@divisor^0,c
  1234  000364  1E14               	comf	(___awdiv@divisor+1)^0,f,c
  1235  000366  B0D8               	btfsc	status,0,c
  1236  000368  2A14               	incf	(___awdiv@divisor+1)^0,f,c
  1237  00036A  0E01               	movlw	1
  1238  00036C  6E16               	movwf	___awdiv@sign^0,c
  1239  00036E                     l1321:
  1240  00036E  BE12               	btfsc	(___awdiv@dividend+1)^0,7,c
  1241  000370  EFBE  F001         	goto	u280
  1242  000374  EFBC  F001         	goto	u281
  1243  000378                     u281:
  1244  000378  EFC4  F001         	goto	l1327
  1245  00037C                     u280:
  1246  00037C  6C11               	negf	___awdiv@dividend^0,c
  1247  00037E  1E12               	comf	(___awdiv@dividend+1)^0,f,c
  1248  000380  B0D8               	btfsc	status,0,c
  1249  000382  2A12               	incf	(___awdiv@dividend+1)^0,f,c
  1250  000384  0E01               	movlw	1
  1251  000386  1A16               	xorwf	___awdiv@sign^0,f,c
  1252  000388                     l1327:
  1253  000388  0E00               	movlw	0
  1254  00038A  6E18               	movwf	(___awdiv@quotient+1)^0,c
  1255  00038C  0E00               	movlw	0
  1256  00038E  6E17               	movwf	___awdiv@quotient^0,c
  1257  000390  5013               	movf	___awdiv@divisor^0,w,c
  1258  000392  1014               	iorwf	(___awdiv@divisor+1)^0,w,c
  1259  000394  B4D8               	btfsc	status,2,c
  1260  000396  EFCF  F001         	goto	u291
  1261  00039A  EFD1  F001         	goto	u290
  1262  00039E                     u291:
  1263  00039E  EFF9  F001         	goto	l1349
  1264  0003A2                     u290:
  1265  0003A2  0E01               	movlw	1
  1266  0003A4  6E15               	movwf	___awdiv@counter^0,c
  1267  0003A6  EFD9  F001         	goto	l1335
  1268  0003AA                     l1333:
  1269  0003AA  90D8               	bcf	status,0,c
  1270  0003AC  3613               	rlcf	___awdiv@divisor^0,f,c
  1271  0003AE  3614               	rlcf	(___awdiv@divisor+1)^0,f,c
  1272  0003B0  2A15               	incf	___awdiv@counter^0,f,c
  1273  0003B2                     l1335:
  1274  0003B2  AE14               	btfss	(___awdiv@divisor+1)^0,7,c
  1275  0003B4  EFDE  F001         	goto	u301
  1276  0003B8  EFE0  F001         	goto	u300
  1277  0003BC                     u301:
  1278  0003BC  EFD5  F001         	goto	l1333
  1279  0003C0                     u300:
  1280  0003C0                     l1337:
  1281  0003C0  90D8               	bcf	status,0,c
  1282  0003C2  3617               	rlcf	___awdiv@quotient^0,f,c
  1283  0003C4  3618               	rlcf	(___awdiv@quotient+1)^0,f,c
  1284  0003C6  5013               	movf	___awdiv@divisor^0,w,c
  1285  0003C8  5C11               	subwf	___awdiv@dividend^0,w,c
  1286  0003CA  5014               	movf	(___awdiv@divisor+1)^0,w,c
  1287  0003CC  5812               	subwfb	(___awdiv@dividend+1)^0,w,c
  1288  0003CE  A0D8               	btfss	status,0,c
  1289  0003D0  EFEC  F001         	goto	u311
  1290  0003D4  EFEE  F001         	goto	u310
  1291  0003D8                     u311:
  1292  0003D8  EFF3  F001         	goto	l1345
  1293  0003DC                     u310:
  1294  0003DC  5013               	movf	___awdiv@divisor^0,w,c
  1295  0003DE  5E11               	subwf	___awdiv@dividend^0,f,c
  1296  0003E0  5014               	movf	(___awdiv@divisor+1)^0,w,c
  1297  0003E2  5A12               	subwfb	(___awdiv@dividend+1)^0,f,c
  1298  0003E4  8017               	bsf	___awdiv@quotient^0,0,c
  1299  0003E6                     l1345:
  1300  0003E6  90D8               	bcf	status,0,c
  1301  0003E8  3214               	rrcf	(___awdiv@divisor+1)^0,f,c
  1302  0003EA  3213               	rrcf	___awdiv@divisor^0,f,c
  1303  0003EC  2E15               	decfsz	___awdiv@counter^0,f,c
  1304  0003EE  EFE0  F001         	goto	l1337
  1305  0003F2                     l1349:
  1306  0003F2  5016               	movf	___awdiv@sign^0,w,c
  1307  0003F4  B4D8               	btfsc	status,2,c
  1308  0003F6  EFFF  F001         	goto	u321
  1309  0003FA  EF01  F002         	goto	u320
  1310  0003FE                     u321:
  1311  0003FE  EF05  F002         	goto	l1353
  1312  000402                     u320:
  1313  000402  6C17               	negf	___awdiv@quotient^0,c
  1314  000404  1E18               	comf	(___awdiv@quotient+1)^0,f,c
  1315  000406  B0D8               	btfsc	status,0,c
  1316  000408  2A18               	incf	(___awdiv@quotient+1)^0,f,c
  1317  00040A                     l1353:
  1318  00040A  C017  F011         	movff	___awdiv@quotient,?___awdiv
  1319  00040E  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  1320  000412  0012               	return		;funcret
  1321  000414                     __end_of___awdiv:
  1322                           	opt callstack 0
  1323                           
  1324 ;; *************** function _SetLine *****************
  1325 ;; Defined at:
  1326 ;;		line 85 in file "lcd.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;  line            1    wreg     unsigned char 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  line            1   14[COMRAM] unsigned char 
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  1    wreg      void 
  1333 ;; Registers used:
  1334 ;;		wreg, status,2, status,0, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1340 ;;      Params:         0       0       0       0
  1341 ;;      Locals:         1       0       0       0
  1342 ;;      Temps:          0       0       0       0
  1343 ;;      Totals:         1       0       0       0
  1344 ;;Total ram usage:        1 bytes
  1345 ;; Hardware stack levels used:    1
  1346 ;; Hardware stack levels required when called:    8
  1347 ;; This function calls:
  1348 ;;		_SendLCD
  1349 ;; This function is called by:
  1350 ;;		_main
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354                           	psect	text8
  1355  000678                     __ptext8:
  1356                           	opt callstack 0
  1357  000678                     _SetLine:
  1358                           	opt callstack 22
  1359                           
  1360                           ;incstack = 0
  1361                           ;SetLine@line stored from wreg
  1362  000678  6E0F               	movwf	SetLine@line^0,c
  1363  00067A                     
  1364                           ;lcd.c: 86:     if (line == 1) {
  1365  00067A  040F               	decf	SetLine@line^0,w,c
  1366  00067C  A4D8               	btfss	status,2,c
  1367  00067E  EF43  F003         	goto	u391
  1368  000682  EF45  F003         	goto	u390
  1369  000686                     u391:
  1370  000686  EF4C  F003         	goto	l1423
  1371  00068A                     u390:
  1372  00068A                     
  1373                           ;lcd.c: 87:         SendLCD(0x80, 0);
  1374  00068A  0E00               	movlw	0
  1375  00068C  6E0D               	movwf	SendLCD@type^0,c
  1376  00068E  0E80               	movlw	128
  1377  000690  EC70  F003         	call	_SendLCD
  1378                           
  1379                           ;lcd.c: 88:     } else {
  1380  000694  EF51  F003         	goto	l1425
  1381  000698                     l1423:
  1382                           
  1383                           ;lcd.c: 89:         SendLCD(0xC0, 0);
  1384  000698  0E00               	movlw	0
  1385  00069A  6E0D               	movwf	SendLCD@type^0,c
  1386  00069C  0EC0               	movlw	192
  1387  00069E  EC70  F003         	call	_SendLCD
  1388  0006A2                     l1425:
  1389                           
  1390                           ;lcd.c: 91:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  1391  0006A2  0E21               	movlw	33
  1392  0006A4                     u507:
  1393  0006A4  2EE8               	decfsz	wreg,f,c
  1394  0006A6  D7FE               	bra	u507
  1395  0006A8  F000               	nop	
  1396  0006AA  0012               	return		;funcret
  1397  0006AC                     __end_of_SetLine:
  1398                           	opt callstack 0
  1399                           
  1400 ;; *************** function _LEDInit *****************
  1401 ;; Defined at:
  1402 ;;		line 17 in file "led.c"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;		None
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;		None
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  1    wreg      void 
  1409 ;; Registers used:
  1410 ;;		None
  1411 ;; Tracked objects:
  1412 ;;		On entry : 0/0
  1413 ;;		On exit  : 0/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1416 ;;      Params:         0       0       0       0
  1417 ;;      Locals:         0       0       0       0
  1418 ;;      Temps:          0       0       0       0
  1419 ;;      Totals:         0       0       0       0
  1420 ;;Total ram usage:        0 bytes
  1421 ;; Hardware stack levels used:    1
  1422 ;; Hardware stack levels required when called:    5
  1423 ;; This function calls:
  1424 ;;		Nothing
  1425 ;; This function is called by:
  1426 ;;		_main
  1427 ;; This function uses a non-reentrant model
  1428 ;;
  1429                           
  1430                           	psect	text9
  1431  00080C                     __ptext9:
  1432                           	opt callstack 0
  1433  00080C                     _LEDInit:
  1434                           	opt callstack 25
  1435  00080C                     
  1436                           ;led.c: 18:     LATDbits.LATD2 = 0;
  1437  00080C  948C               	bcf	140,2,c	;volatile
  1438                           
  1439                           ;led.c: 19:     LATDbits.LATD3 = 0;
  1440  00080E  968C               	bcf	140,3,c	;volatile
  1441                           
  1442                           ;led.c: 20:     LATCbits.LATC4 = 0;
  1443  000810  988B               	bcf	139,4,c	;volatile
  1444                           
  1445                           ;led.c: 21:     LATCbits.LATC5 = 0;
  1446  000812  9A8B               	bcf	139,5,c	;volatile
  1447                           
  1448                           ;led.c: 22:     LATCbits.LATC6 = 0;
  1449  000814  9C8B               	bcf	139,6,c	;volatile
  1450                           
  1451                           ;led.c: 23:     LATCbits.LATC7 = 0;
  1452  000816  9E8B               	bcf	139,7,c	;volatile
  1453                           
  1454                           ;led.c: 24:     LATDbits.LATD4 = 0;
  1455  000818  988C               	bcf	140,4,c	;volatile
  1456                           
  1457                           ;led.c: 25:     LATDbits.LATD5 = 0;
  1458  00081A  9A8C               	bcf	140,5,c	;volatile
  1459                           
  1460                           ;led.c: 26:     TRISDbits.RD2 = 0;
  1461  00081C  9495               	bcf	149,2,c	;volatile
  1462                           
  1463                           ;led.c: 27:     TRISDbits.RD3 = 0;
  1464  00081E  9695               	bcf	149,3,c	;volatile
  1465                           
  1466                           ;led.c: 28:     TRISDbits.RD4 = 0;
  1467  000820  9895               	bcf	149,4,c	;volatile
  1468                           
  1469                           ;led.c: 29:     TRISDbits.RD5 = 0;
  1470  000822  9A95               	bcf	149,5,c	;volatile
  1471                           
  1472                           ;led.c: 30:     TRISCbits.RC4 = 0;
  1473  000824  9894               	bcf	148,4,c	;volatile
  1474                           
  1475                           ;led.c: 31:     TRISCbits.RC5 = 0;
  1476  000826  9A94               	bcf	148,5,c	;volatile
  1477                           
  1478                           ;led.c: 32:     TRISCbits.RC6 = 0;
  1479  000828  9C94               	bcf	148,6,c	;volatile
  1480                           
  1481                           ;led.c: 33:     TRISCbits.RC7 = 0;
  1482  00082A  9E94               	bcf	148,7,c	;volatile
  1483  00082C  0012               	return		;funcret
  1484  00082E                     __end_of_LEDInit:
  1485                           	opt callstack 0
  1486                           
  1487 ;; *************** function _LCD_Init *****************
  1488 ;; Defined at:
  1489 ;;		line 38 in file "lcd.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;		None
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;		None
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      void 
  1496 ;; Registers used:
  1497 ;;		wreg, status,2, status,0, cstack
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1503 ;;      Params:         0       0       0       0
  1504 ;;      Locals:         0       0       0       0
  1505 ;;      Temps:          1       0       0       0
  1506 ;;      Totals:         1       0       0       0
  1507 ;;Total ram usage:        1 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:    8
  1510 ;; This function calls:
  1511 ;;		_LCDout
  1512 ;;		_SendLCD
  1513 ;; This function is called by:
  1514 ;;		_main
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text10
  1519  000414                     __ptext10:
  1520                           	opt callstack 0
  1521  000414                     _LCD_Init:
  1522                           	opt callstack 22
  1523  000414                     
  1524                           ;lcd.c: 40:     TRISAbits.RA6 = 0;
  1525  000414  9C92               	bcf	146,6,c	;volatile
  1526                           
  1527                           ;lcd.c: 41:     TRISCbits.RC0 = 0;
  1528  000416  9094               	bcf	148,0,c	;volatile
  1529                           
  1530                           ;lcd.c: 42:     TRISDbits.RD3 = 0;
  1531  000418  9695               	bcf	149,3,c	;volatile
  1532                           
  1533                           ;lcd.c: 43:     TRISDbits.RD2 = 0;
  1534  00041A  9495               	bcf	149,2,c	;volatile
  1535                           
  1536                           ;lcd.c: 44:     TRISDbits.RD0 = 0;
  1537  00041C  9095               	bcf	149,0,c	;volatile
  1538                           
  1539                           ;lcd.c: 45:     TRISDbits.RD1 = 0;
  1540  00041E  9295               	bcf	149,1,c	;volatile
  1541                           
  1542                           ;lcd.c: 47:     LATAbits.LA6 = 0;
  1543  000420  9C89               	bcf	137,6,c	;volatile
  1544                           
  1545                           ;lcd.c: 48:     LATCbits.LC0 = 0;
  1546  000422  908B               	bcf	139,0,c	;volatile
  1547                           
  1548                           ;lcd.c: 49:     LATDbits.LD1 = 0;
  1549  000424  928C               	bcf	140,1,c	;volatile
  1550                           
  1551                           ;lcd.c: 50:     LATDbits.LD2 = 0;
  1552  000426  948C               	bcf	140,2,c	;volatile
  1553                           
  1554                           ;lcd.c: 51:     LATDbits.LD0 = 0;
  1555  000428  908C               	bcf	140,0,c	;volatile
  1556                           
  1557                           ;lcd.c: 52:     LATDbits.LD1 = 0;
  1558  00042A  928C               	bcf	140,1,c	;volatile
  1559  00042C                     
  1560                           ;lcd.c: 64:     _delay((unsigned long)((15)*(8000000/4000.0)));
  1561  00042C  0E27               	movlw	39
  1562  00042E  6E0F               	movwf	??_LCD_Init^0,c
  1563  000430  0EF5               	movlw	245
  1564  000432                     u517:
  1565  000432  2EE8               	decfsz	wreg,f,c
  1566  000434  D7FE               	bra	u517
  1567  000436  2E0F               	decfsz	??_LCD_Init^0,f,c
  1568  000438  D7FC               	bra	u517
  1569  00043A  F000               	nop	
  1570  00043C                     
  1571                           ;lcd.c: 65:     LCDout(0b0011);
  1572  00043C  0E03               	movlw	3
  1573  00043E  ECA0  F002         	call	_LCDout
  1574  000442                     
  1575                           ;lcd.c: 66:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1576  000442  0E0D               	movlw	13
  1577  000444  6E0F               	movwf	??_LCD_Init^0,c
  1578  000446  0EFC               	movlw	252
  1579  000448                     u527:
  1580  000448  2EE8               	decfsz	wreg,f,c
  1581  00044A  D7FE               	bra	u527
  1582  00044C  2E0F               	decfsz	??_LCD_Init^0,f,c
  1583  00044E  D7FC               	bra	u527
  1584                           
  1585                           ;lcd.c: 67:     LCDout(0b0011);
  1586  000450  0E03               	movlw	3
  1587  000452  ECA0  F002         	call	_LCDout
  1588  000456                     
  1589                           ;lcd.c: 68:     _delay((unsigned long)((200)*(8000000/4000000.0)));
  1590  000456  0E85               	movlw	133
  1591  000458                     u537:
  1592  000458  2EE8               	decfsz	wreg,f,c
  1593  00045A  D7FE               	bra	u537
  1594  00045C  F000               	nop	
  1595  00045E                     
  1596                           ;lcd.c: 69:     LCDout(0b0011);
  1597  00045E  0E03               	movlw	3
  1598  000460  ECA0  F002         	call	_LCDout
  1599                           
  1600                           ;lcd.c: 70:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  1601  000464  0E21               	movlw	33
  1602  000466                     u547:
  1603  000466  2EE8               	decfsz	wreg,f,c
  1604  000468  D7FE               	bra	u547
  1605  00046A  F000               	nop	
  1606  00046C                     
  1607                           ;lcd.c: 71:     LCDout(0b0010);
  1608  00046C  0E02               	movlw	2
  1609  00046E  ECA0  F002         	call	_LCDout
  1610  000472                     
  1611                           ;lcd.c: 72:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  1612  000472  0E21               	movlw	33
  1613  000474                     u557:
  1614  000474  2EE8               	decfsz	wreg,f,c
  1615  000476  D7FE               	bra	u557
  1616  000478  F000               	nop	
  1617                           
  1618                           ;lcd.c: 74:     SendLCD(0b00101000, 0);
  1619  00047A  0E00               	movlw	0
  1620  00047C  6E0D               	movwf	SendLCD@type^0,c
  1621  00047E  0E28               	movlw	40
  1622  000480  EC70  F003         	call	_SendLCD
  1623                           
  1624                           ;lcd.c: 75:     SendLCD(0b00001000, 0);
  1625  000484  0E00               	movlw	0
  1626  000486  6E0D               	movwf	SendLCD@type^0,c
  1627  000488  0E08               	movlw	8
  1628  00048A  EC70  F003         	call	_SendLCD
  1629                           
  1630                           ;lcd.c: 76:     SendLCD(0b00000001, 0);
  1631  00048E  0E00               	movlw	0
  1632  000490  6E0D               	movwf	SendLCD@type^0,c
  1633  000492  0E01               	movlw	1
  1634  000494  EC70  F003         	call	_SendLCD
  1635  000498                     
  1636                           ;lcd.c: 77:     _delay((unsigned long)((2)*(8000000/4000.0)));
  1637  000498  0E06               	movlw	6
  1638  00049A  6E0F               	movwf	??_LCD_Init^0,c
  1639  00049C  0E30               	movlw	48
  1640  00049E                     u567:
  1641  00049E  2EE8               	decfsz	wreg,f,c
  1642  0004A0  D7FE               	bra	u567
  1643  0004A2  2E0F               	decfsz	??_LCD_Init^0,f,c
  1644  0004A4  D7FC               	bra	u567
  1645  0004A6  D000               	nop2	
  1646  0004A8                     
  1647                           ;lcd.c: 78:     SendLCD(0b00000110, 0);
  1648  0004A8  0E00               	movlw	0
  1649  0004AA  6E0D               	movwf	SendLCD@type^0,c
  1650  0004AC  0E06               	movlw	6
  1651  0004AE  EC70  F003         	call	_SendLCD
  1652  0004B2                     
  1653                           ;lcd.c: 79:     SendLCD(0b00001111, 0);
  1654  0004B2  0E00               	movlw	0
  1655  0004B4  6E0D               	movwf	SendLCD@type^0,c
  1656  0004B6  0E0F               	movlw	15
  1657  0004B8  EC70  F003         	call	_SendLCD
  1658  0004BC  0012               	return		;funcret
  1659  0004BE                     __end_of_LCD_Init:
  1660                           	opt callstack 0
  1661                           
  1662 ;; *************** function _SendLCD *****************
  1663 ;; Defined at:
  1664 ;;		line 26 in file "lcd.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;  Byte            1    wreg     unsigned char 
  1667 ;;  type            1   12[COMRAM] unsigned char 
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;  Byte            1   13[COMRAM] unsigned char 
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg, status,2, status,0, cstack
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1679 ;;      Params:         1       0       0       0
  1680 ;;      Locals:         1       0       0       0
  1681 ;;      Temps:          0       0       0       0
  1682 ;;      Totals:         2       0       0       0
  1683 ;;Total ram usage:        2 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    7
  1686 ;; This function calls:
  1687 ;;		_LCDout
  1688 ;; This function is called by:
  1689 ;;		_LCD_Init
  1690 ;;		_SetLine
  1691 ;;		_LCD_String
  1692 ;;		_ClearLCD
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text11
  1697  0006E0                     __ptext11:
  1698                           	opt callstack 0
  1699  0006E0                     _SendLCD:
  1700                           	opt callstack 22
  1701                           
  1702                           ;incstack = 0
  1703                           ;SendLCD@Byte stored from wreg
  1704  0006E0  6E0E               	movwf	SendLCD@Byte^0,c
  1705  0006E2                     
  1706                           ;lcd.c: 29:     LATAbits.LATA6 = type;
  1707  0006E2  B00D               	btfsc	SendLCD@type^0,0,c
  1708  0006E4  D002               	bra	u335
  1709  0006E6  9C89               	bcf	137,6,c	;volatile
  1710  0006E8  D001               	bra	u336
  1711  0006EA                     u335:
  1712  0006EA  8C89               	bsf	137,6,c	;volatile
  1713  0006EC                     u336:
  1714  0006EC                     
  1715                           ;lcd.c: 31:     LCDout((Byte & 0b11110000) >> 4);
  1716  0006EC  380E               	swapf	SendLCD@Byte^0,w,c
  1717  0006EE  0B0F               	andlw	15
  1718  0006F0  0B0F               	andlw	15
  1719  0006F2  ECA0  F002         	call	_LCDout
  1720  0006F6                     
  1721                           ;lcd.c: 32:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  1722  0006F6  0E06               	movlw	6
  1723  0006F8                     u577:
  1724  0006F8  2EE8               	decfsz	wreg,f,c
  1725  0006FA  D7FE               	bra	u577
  1726  0006FC  D000               	nop2	
  1727  0006FE                     
  1728                           ;lcd.c: 33:     LCDout(Byte & 0b00001111);
  1729  0006FE  500E               	movf	SendLCD@Byte^0,w,c
  1730  000700  0B0F               	andlw	15
  1731  000702  ECA0  F002         	call	_LCDout
  1732                           
  1733                           ;lcd.c: 35:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  1734  000706  0E21               	movlw	33
  1735  000708                     u587:
  1736  000708  2EE8               	decfsz	wreg,f,c
  1737  00070A  D7FE               	bra	u587
  1738  00070C  F000               	nop	
  1739  00070E  0012               	return		;funcret
  1740  000710                     __end_of_SendLCD:
  1741                           	opt callstack 0
  1742                           
  1743 ;; *************** function _LCDout *****************
  1744 ;; Defined at:
  1745 ;;		line 14 in file "lcd.c"
  1746 ;; Parameters:    Size  Location     Type
  1747 ;;  number          1    wreg     unsigned char 
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;  number          1   11[COMRAM] unsigned char 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      void 
  1752 ;; Registers used:
  1753 ;;		wreg, status,2, status,0, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1759 ;;      Params:         0       0       0       0
  1760 ;;      Locals:         1       0       0       0
  1761 ;;      Temps:          1       0       0       0
  1762 ;;      Totals:         2       0       0       0
  1763 ;;Total ram usage:        2 bytes
  1764 ;; Hardware stack levels used:    1
  1765 ;; Hardware stack levels required when called:    6
  1766 ;; This function calls:
  1767 ;;		_E_TOG
  1768 ;; This function is called by:
  1769 ;;		_SendLCD
  1770 ;;		_LCD_Init
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           	psect	text12
  1775  000540                     __ptext12:
  1776                           	opt callstack 0
  1777  000540                     _LCDout:
  1778                           	opt callstack 22
  1779                           
  1780                           ;incstack = 0
  1781                           ;LCDout@number stored from wreg
  1782  000540  6E0C               	movwf	LCDout@number^0,c
  1783  000542                     
  1784                           ;lcd.c: 16:     LATDbits.LATD3 = number & 0b0001;
  1785  000542  C00C  F00B         	movff	LCDout@number,??_LCDout
  1786  000546  0E01               	movlw	1
  1787  000548  160B               	andwf	??_LCDout^0,f,c
  1788  00054A  460B               	rlncf	??_LCDout^0,f,c
  1789  00054C  460B               	rlncf	??_LCDout^0,f,c
  1790  00054E  460B               	rlncf	??_LCDout^0,f,c
  1791  000550  508C               	movf	140,w,c	;volatile
  1792  000552  180B               	xorwf	??_LCDout^0,w,c
  1793  000554  0BF7               	andlw	-9
  1794  000556  180B               	xorwf	??_LCDout^0,w,c
  1795  000558  6E8C               	movwf	140,c	;volatile
  1796                           
  1797                           ;lcd.c: 17:     LATDbits.LATD2 = (number & 0b0010) >> 1;
  1798  00055A  C00C  F00B         	movff	LCDout@number,??_LCDout
  1799  00055E  90D8               	bcf	status,0,c
  1800  000560  320B               	rrcf	??_LCDout^0,f,c
  1801  000562  0E01               	movlw	1
  1802  000564  160B               	andwf	??_LCDout^0,f,c
  1803  000566  460B               	rlncf	??_LCDout^0,f,c
  1804  000568  460B               	rlncf	??_LCDout^0,f,c
  1805  00056A  508C               	movf	140,w,c	;volatile
  1806  00056C  180B               	xorwf	??_LCDout^0,w,c
  1807  00056E  0BFB               	andlw	-5
  1808  000570  180B               	xorwf	??_LCDout^0,w,c
  1809  000572  6E8C               	movwf	140,c	;volatile
  1810                           
  1811                           ;lcd.c: 18:     LATDbits.LATD0 = (number & 0b0100) >> 2;
  1812  000574  C00C  F00B         	movff	LCDout@number,??_LCDout
  1813  000578  90D8               	bcf	status,0,c
  1814  00057A  320B               	rrcf	??_LCDout^0,f,c
  1815  00057C  90D8               	bcf	status,0,c
  1816  00057E  320B               	rrcf	??_LCDout^0,f,c
  1817  000580  0E01               	movlw	1
  1818  000582  160B               	andwf	??_LCDout^0,f,c
  1819  000584  508C               	movf	140,w,c	;volatile
  1820  000586  180B               	xorwf	??_LCDout^0,w,c
  1821  000588  0BFE               	andlw	-2
  1822  00058A  180B               	xorwf	??_LCDout^0,w,c
  1823  00058C  6E8C               	movwf	140,c	;volatile
  1824                           
  1825                           ;lcd.c: 19:     LATDbits.LATD1 = (number & 0b1000) >> 3;
  1826  00058E  C00C  F00B         	movff	LCDout@number,??_LCDout
  1827  000592  90D8               	bcf	status,0,c
  1828  000594  320B               	rrcf	??_LCDout^0,f,c
  1829  000596  90D8               	bcf	status,0,c
  1830  000598  320B               	rrcf	??_LCDout^0,f,c
  1831  00059A  90D8               	bcf	status,0,c
  1832  00059C  320B               	rrcf	??_LCDout^0,f,c
  1833  00059E  0E01               	movlw	1
  1834  0005A0  160B               	andwf	??_LCDout^0,f,c
  1835  0005A2  460B               	rlncf	??_LCDout^0,f,c
  1836  0005A4  508C               	movf	140,w,c	;volatile
  1837  0005A6  180B               	xorwf	??_LCDout^0,w,c
  1838  0005A8  0BFD               	andlw	-3
  1839  0005AA  180B               	xorwf	??_LCDout^0,w,c
  1840  0005AC  6E8C               	movwf	140,c	;volatile
  1841  0005AE                     
  1842                           ;lcd.c: 20:     E_TOG();
  1843  0005AE  EC17  F004         	call	_E_TOG	;wreg free
  1844  0005B2                     
  1845                           ;lcd.c: 22:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1846  0005B2  0E03               	movlw	3
  1847  0005B4                     u597:
  1848  0005B4  2EE8               	decfsz	wreg,f,c
  1849  0005B6  D7FE               	bra	u597
  1850  0005B8  F000               	nop	
  1851  0005BA  0012               	return		;funcret
  1852  0005BC                     __end_of_LCDout:
  1853                           	opt callstack 0
  1854                           
  1855 ;; *************** function _E_TOG *****************
  1856 ;; Defined at:
  1857 ;;		line 4 in file "lcd.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;		None
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;		None
  1862 ;; Return value:  Size  Location     Type
  1863 ;;                  1    wreg      void 
  1864 ;; Registers used:
  1865 ;;		wreg
  1866 ;; Tracked objects:
  1867 ;;		On entry : 0/0
  1868 ;;		On exit  : 0/0
  1869 ;;		Unchanged: 0/0
  1870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1871 ;;      Params:         0       0       0       0
  1872 ;;      Locals:         0       0       0       0
  1873 ;;      Temps:          0       0       0       0
  1874 ;;      Totals:         0       0       0       0
  1875 ;;Total ram usage:        0 bytes
  1876 ;; Hardware stack levels used:    1
  1877 ;; Hardware stack levels required when called:    5
  1878 ;; This function calls:
  1879 ;;		Nothing
  1880 ;; This function is called by:
  1881 ;;		_LCDout
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884                           
  1885                           	psect	text13
  1886  00082E                     __ptext13:
  1887                           	opt callstack 0
  1888  00082E                     _E_TOG:
  1889                           	opt callstack 22
  1890  00082E                     
  1891                           ;lcd.c: 8:     LATCbits.LATC0 = 1;
  1892  00082E  808B               	bsf	139,0,c	;volatile
  1893  000830                     
  1894                           ;lcd.c: 9:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1895  000830  0E03               	movlw	3
  1896  000832                     u607:
  1897  000832  2EE8               	decfsz	wreg,f,c
  1898  000834  D7FE               	bra	u607
  1899  000836  F000               	nop	
  1900  000838                     
  1901                           ;lcd.c: 10:     LATCbits.LATC0 = 0;
  1902  000838  908B               	bcf	139,0,c	;volatile
  1903  00083A  0012               	return		;funcret
  1904  00083C                     __end_of_E_TOG:
  1905                           	opt callstack 0
  1906                           
  1907 ;; *************** function _InterruptHandlerLow *****************
  1908 ;; Defined at:
  1909 ;;		line 21 in file "main.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;		None
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;		None
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		wreg, status,2, status,0, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1923 ;;      Params:         0       0       0       0
  1924 ;;      Locals:         0       0       0       0
  1925 ;;      Temps:          5       0       0       0
  1926 ;;      Totals:         5       0       0       0
  1927 ;;Total ram usage:        5 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    4
  1930 ;; This function calls:
  1931 ;;		_LEDout
  1932 ;;		i1_SendLCD
  1933 ;;		i1_SetLine
  1934 ;; This function is called by:
  1935 ;;		Interrupt level 1
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	intcodelo
  1940  000018                     __pintcodelo:
  1941                           	opt callstack 0
  1942  000018                     _InterruptHandlerLow:
  1943                           	opt callstack 22
  1944                           
  1945                           ;incstack = 0
  1946  000018  803D               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  1947  00001A  CFD8 F008          	movff	status,??_InterruptHandlerLow+2
  1948  00001E  CFE8 F009          	movff	wreg,??_InterruptHandlerLow+3
  1949  000022  CFE0 F00A          	movff	bsr,??_InterruptHandlerLow+4
  1950  000026                     
  1951                           ;main.c: 22:     if (INTCONbits.INT0IF == 1) {
  1952  000026  A2F2               	btfss	242,1,c	;volatile
  1953  000028  EF18  F000         	goto	i1u44_21
  1954  00002C  EF1A  F000         	goto	i1u44_20
  1955  000030                     i1u44_21:
  1956  000030  EF61  F000         	goto	i1l219
  1957  000034                     i1u44_20:
  1958  000034                     
  1959                           ;main.c: 23:         TMR1 = 0;
  1960  000034  0E00               	movlw	0
  1961  000036  6ECF               	movwf	207,c	;volatile
  1962  000038  0E00               	movlw	0
  1963  00003A  6ECE               	movwf	206,c	;volatile
  1964  00003C                     
  1965                           ;main.c: 24:         LEDout(2);
  1966  00003C  0E00               	movlw	0
  1967  00003E  6E02               	movwf	(LEDout@number+1)^0,c
  1968  000040  0E02               	movlw	2
  1969  000042  6E01               	movwf	LEDout@number^0,c
  1970  000044  EC1C  F003         	call	_LEDout	;wreg free
  1971  000048                     
  1972                           ;main.c: 25:         INTCONbits.INT0IF = 0;
  1973  000048  92F2               	bcf	242,1,c	;volatile
  1974  00004A                     
  1975                           ;main.c: 27:         if (PIR1bits.CCP1IF == 1) {
  1976  00004A  A49E               	btfss	158,2,c	;volatile
  1977  00004C  EF2A  F000         	goto	i1u45_21
  1978  000050  EF2C  F000         	goto	i1u45_20
  1979  000054                     i1u45_21:
  1980  000054  EF43  F000         	goto	i1l1523
  1981  000058                     i1u45_20:
  1982  000058                     
  1983                           ;main.c: 28:             left = CCPR1L + (CCPR1H << 8);
  1984  000058  50BF               	movf	191,w,c	;volatile
  1985  00005A  6E07               	movwf	(??_InterruptHandlerLow+1)^0,c
  1986  00005C  6A06               	clrf	??_InterruptHandlerLow^0,c
  1987  00005E  50BE               	movf	190,w,c	;volatile
  1988  000060  2406               	addwf	??_InterruptHandlerLow^0,w,c
  1989  000062  6E26               	movwf	_left^0,c	;volatile
  1990  000064  0E00               	movlw	0
  1991  000066  2007               	addwfc	(??_InterruptHandlerLow+1)^0,w,c
  1992  000068  6E27               	movwf	(_left+1)^0,c	;volatile
  1993  00006A                     
  1994                           ;main.c: 29:             PIR1bits.CCP1IF = 0;
  1995  00006A  949E               	bcf	158,2,c	;volatile
  1996  00006C                     
  1997                           ;main.c: 30:             LEDout(CCPR1H);
  1998  00006C  CFBF F001          	movff	4031,LEDout@number	;volatile
  1999  000070  6A02               	clrf	(LEDout@number+1)^0,c
  2000  000072  EC1C  F003         	call	_LEDout	;wreg free
  2001  000076                     
  2002                           ;main.c: 31:             SetLine(1);
  2003  000076  0E01               	movlw	1
  2004  000078  EC56  F003         	call	i1_SetLine
  2005  00007C                     
  2006                           ;main.c: 32:             SendLCD(CCPR1L,1);
  2007  00007C  0E01               	movlw	1
  2008  00007E  6E03               	movwf	i1SendLCD@type^0,c
  2009  000080  50BE               	movf	190,w,c	;volatile
  2010  000082  EC88  F003         	call	i1_SendLCD
  2011  000086                     i1l1523:
  2012                           
  2013                           ;main.c: 34:         if (PIR2bits.CCP2IF == 1) {
  2014  000086  A0A1               	btfss	161,0,c	;volatile
  2015  000088  EF48  F000         	goto	i1u46_21
  2016  00008C  EF4A  F000         	goto	i1u46_20
  2017  000090                     i1u46_21:
  2018  000090  EF61  F000         	goto	i1l219
  2019  000094                     i1u46_20:
  2020  000094                     
  2021                           ;main.c: 35:             right = CCPR2L + (CCPR2H << 8);
  2022  000094  50BC               	movf	188,w,c	;volatile
  2023  000096  6E07               	movwf	(??_InterruptHandlerLow+1)^0,c
  2024  000098  6A06               	clrf	??_InterruptHandlerLow^0,c
  2025  00009A  50BB               	movf	187,w,c	;volatile
  2026  00009C  2406               	addwf	??_InterruptHandlerLow^0,w,c
  2027  00009E  6E28               	movwf	_right^0,c	;volatile
  2028  0000A0  0E00               	movlw	0
  2029  0000A2  2007               	addwfc	(??_InterruptHandlerLow+1)^0,w,c
  2030  0000A4  6E29               	movwf	(_right+1)^0,c	;volatile
  2031  0000A6                     
  2032                           ;main.c: 36:             PIR2bits.CCP2IF = 0;
  2033  0000A6  90A1               	bcf	161,0,c	;volatile
  2034  0000A8                     
  2035                           ;main.c: 37:             LEDout(CCPR2H);
  2036  0000A8  CFBC F001          	movff	4028,LEDout@number	;volatile
  2037  0000AC  6A02               	clrf	(LEDout@number+1)^0,c
  2038  0000AE  EC1C  F003         	call	_LEDout	;wreg free
  2039  0000B2                     
  2040                           ;main.c: 38:             SetLine(2);
  2041  0000B2  0E02               	movlw	2
  2042  0000B4  EC56  F003         	call	i1_SetLine
  2043  0000B8                     
  2044                           ;main.c: 39:             SendLCD(CCPR2L,1);
  2045  0000B8  0E01               	movlw	1
  2046  0000BA  6E03               	movwf	i1SendLCD@type^0,c
  2047  0000BC  50BB               	movf	187,w,c	;volatile
  2048  0000BE  EC88  F003         	call	i1_SendLCD
  2049  0000C2                     i1l219:
  2050  0000C2  C00A  FFE0         	movff	??_InterruptHandlerLow+4,bsr
  2051  0000C6  C009  FFE8         	movff	??_InterruptHandlerLow+3,wreg
  2052  0000CA  C008  FFD8         	movff	??_InterruptHandlerLow+2,status
  2053  0000CE  903D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2054  0000D0  0010               	retfie	
  2055  0000D2                     __end_of_InterruptHandlerLow:
  2056                           	opt callstack 0
  2057                           
  2058 ;; *************** function i1_SetLine *****************
  2059 ;; Defined at:
  2060 ;;		line 85 in file "lcd.c"
  2061 ;; Parameters:    Size  Location     Type
  2062 ;;  line            1    wreg     unsigned char 
  2063 ;; Auto vars:     Size  Location     Type
  2064 ;;  line            1    4[COMRAM] unsigned char 
  2065 ;; Return value:  Size  Location     Type
  2066 ;;                  1    wreg      void 
  2067 ;; Registers used:
  2068 ;;		wreg, status,2, status,0, cstack
  2069 ;; Tracked objects:
  2070 ;;		On entry : 0/0
  2071 ;;		On exit  : 0/0
  2072 ;;		Unchanged: 0/0
  2073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2074 ;;      Params:         0       0       0       0
  2075 ;;      Locals:         1       0       0       0
  2076 ;;      Temps:          0       0       0       0
  2077 ;;      Totals:         1       0       0       0
  2078 ;;Total ram usage:        1 bytes
  2079 ;; Hardware stack levels used:    1
  2080 ;; Hardware stack levels required when called:    3
  2081 ;; This function calls:
  2082 ;;		i1_SendLCD
  2083 ;; This function is called by:
  2084 ;;		_InterruptHandlerLow
  2085 ;; This function uses a non-reentrant model
  2086 ;;
  2087                           
  2088                           	psect	text15
  2089  0006AC                     __ptext15:
  2090                           	opt callstack 0
  2091  0006AC                     i1_SetLine:
  2092                           	opt callstack 22
  2093                           
  2094                           ;incstack = 0
  2095                           ;i1SetLine@line stored from wreg
  2096  0006AC  6E05               	movwf	i1SetLine@line^0,c
  2097  0006AE                     
  2098                           ;lcd.c: 86:     if (line == 1) {
  2099  0006AE  0405               	decf	i1SetLine@line^0,w,c
  2100  0006B0  A4D8               	btfss	status,2,c
  2101  0006B2  EF5D  F003         	goto	i1u40_21
  2102  0006B6  EF5F  F003         	goto	i1u40_20
  2103  0006BA                     i1u40_21:
  2104  0006BA  EF66  F003         	goto	i1l1463
  2105  0006BE                     i1u40_20:
  2106  0006BE                     
  2107                           ;lcd.c: 87:         SendLCD(0x80, 0);
  2108  0006BE  0E00               	movlw	0
  2109  0006C0  6E03               	movwf	i1SendLCD@type^0,c
  2110  0006C2  0E80               	movlw	128
  2111  0006C4  EC88  F003         	call	i1_SendLCD
  2112                           
  2113                           ;lcd.c: 88:     } else {
  2114  0006C8  EF6B  F003         	goto	i1l1465
  2115  0006CC                     i1l1463:
  2116                           
  2117                           ;lcd.c: 89:         SendLCD(0xC0, 0);
  2118  0006CC  0E00               	movlw	0
  2119  0006CE  6E03               	movwf	i1SendLCD@type^0,c
  2120  0006D0  0EC0               	movlw	192
  2121  0006D2  EC88  F003         	call	i1_SendLCD
  2122  0006D6                     i1l1465:
  2123                           
  2124                           ;lcd.c: 91:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  2125  0006D6  0E21               	movlw	33
  2126  0006D8                     i1u61_27:
  2127  0006D8  2EE8               	decfsz	wreg,f,c
  2128  0006DA  D7FE               	bra	i1u61_27
  2129  0006DC  F000               	nop	
  2130  0006DE  0012               	return		;funcret
  2131  0006E0                     __end_ofi1_SetLine:
  2132                           	opt callstack 0
  2133                           
  2134 ;; *************** function i1_SendLCD *****************
  2135 ;; Defined at:
  2136 ;;		line 26 in file "lcd.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;  Byte            1    wreg     unsigned char 
  2139 ;;  type            1    2[COMRAM] unsigned char 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  Byte            1    3[COMRAM] unsigned char 
  2142 ;; Return value:  Size  Location     Type
  2143 ;;                  1    wreg      void 
  2144 ;; Registers used:
  2145 ;;		wreg, status,2, status,0, cstack
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2151 ;;      Params:         1       0       0       0
  2152 ;;      Locals:         1       0       0       0
  2153 ;;      Temps:          0       0       0       0
  2154 ;;      Totals:         2       0       0       0
  2155 ;;Total ram usage:        2 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    2
  2158 ;; This function calls:
  2159 ;;		i1_LCDout
  2160 ;; This function is called by:
  2161 ;;		_InterruptHandlerLow
  2162 ;;		i1_SetLine
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           	psect	text16
  2167  000710                     __ptext16:
  2168                           	opt callstack 0
  2169  000710                     i1_SendLCD:
  2170                           	opt callstack 22
  2171                           
  2172                           ;incstack = 0
  2173                           ;i1SendLCD@Byte stored from wreg
  2174  000710  6E04               	movwf	i1SendLCD@Byte^0,c
  2175  000712                     
  2176                           ;lcd.c: 29:     LATAbits.LATA6 = type;
  2177  000712  B003               	btfsc	i1SendLCD@type^0,0,c
  2178  000714  D002               	bra	i1u38_25
  2179  000716  9C89               	bcf	137,6,c	;volatile
  2180  000718  D001               	bra	i1u38_26
  2181  00071A                     i1u38_25:
  2182  00071A  8C89               	bsf	137,6,c	;volatile
  2183  00071C                     i1u38_26:
  2184  00071C                     
  2185                           ;lcd.c: 31:     LCDout((Byte & 0b11110000) >> 4);
  2186  00071C  3804               	swapf	i1SendLCD@Byte^0,w,c
  2187  00071E  0B0F               	andlw	15
  2188  000720  0B0F               	andlw	15
  2189  000722  ECDE  F002         	call	i1_LCDout
  2190  000726                     
  2191                           ;lcd.c: 32:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  2192  000726  0E06               	movlw	6
  2193  000728                     i1u62_27:
  2194  000728  2EE8               	decfsz	wreg,f,c
  2195  00072A  D7FE               	bra	i1u62_27
  2196  00072C  D000               	nop2	
  2197  00072E                     
  2198                           ;lcd.c: 33:     LCDout(Byte & 0b00001111);
  2199  00072E  5004               	movf	i1SendLCD@Byte^0,w,c
  2200  000730  0B0F               	andlw	15
  2201  000732  ECDE  F002         	call	i1_LCDout
  2202                           
  2203                           ;lcd.c: 35:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  2204  000736  0E21               	movlw	33
  2205  000738                     i1u63_27:
  2206  000738  2EE8               	decfsz	wreg,f,c
  2207  00073A  D7FE               	bra	i1u63_27
  2208  00073C  F000               	nop	
  2209  00073E  0012               	return		;funcret
  2210  000740                     __end_ofi1_SendLCD:
  2211                           	opt callstack 0
  2212                           
  2213 ;; *************** function i1_LCDout *****************
  2214 ;; Defined at:
  2215 ;;		line 14 in file "lcd.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;  number          1    wreg     unsigned char 
  2218 ;; Auto vars:     Size  Location     Type
  2219 ;;  number          1    1[COMRAM] unsigned char 
  2220 ;; Return value:  Size  Location     Type
  2221 ;;                  1    wreg      void 
  2222 ;; Registers used:
  2223 ;;		wreg, status,2, status,0, cstack
  2224 ;; Tracked objects:
  2225 ;;		On entry : 0/0
  2226 ;;		On exit  : 0/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2229 ;;      Params:         0       0       0       0
  2230 ;;      Locals:         1       0       0       0
  2231 ;;      Temps:          1       0       0       0
  2232 ;;      Totals:         2       0       0       0
  2233 ;;Total ram usage:        2 bytes
  2234 ;; Hardware stack levels used:    1
  2235 ;; Hardware stack levels required when called:    1
  2236 ;; This function calls:
  2237 ;;		i1_E_TOG
  2238 ;; This function is called by:
  2239 ;;		i1_SendLCD
  2240 ;; This function uses a non-reentrant model
  2241 ;;
  2242                           
  2243                           	psect	text17
  2244  0005BC                     __ptext17:
  2245                           	opt callstack 0
  2246  0005BC                     i1_LCDout:
  2247                           	opt callstack 22
  2248                           
  2249                           ;incstack = 0
  2250                           ;i1LCDout@number stored from wreg
  2251  0005BC  6E02               	movwf	i1LCDout@number^0,c
  2252  0005BE                     
  2253                           ;lcd.c: 16:     LATDbits.LATD3 = number & 0b0001;
  2254  0005BE  C002  F001         	movff	i1LCDout@number,??i1_LCDout
  2255  0005C2  0E01               	movlw	1
  2256  0005C4  1601               	andwf	??i1_LCDout^0,f,c
  2257  0005C6  4601               	rlncf	??i1_LCDout^0,f,c
  2258  0005C8  4601               	rlncf	??i1_LCDout^0,f,c
  2259  0005CA  4601               	rlncf	??i1_LCDout^0,f,c
  2260  0005CC  508C               	movf	140,w,c	;volatile
  2261  0005CE  1801               	xorwf	??i1_LCDout^0,w,c
  2262  0005D0  0BF7               	andlw	-9
  2263  0005D2  1801               	xorwf	??i1_LCDout^0,w,c
  2264  0005D4  6E8C               	movwf	140,c	;volatile
  2265                           
  2266                           ;lcd.c: 17:     LATDbits.LATD2 = (number & 0b0010) >> 1;
  2267  0005D6  C002  F001         	movff	i1LCDout@number,??i1_LCDout
  2268  0005DA  90D8               	bcf	status,0,c
  2269  0005DC  3201               	rrcf	??i1_LCDout^0,f,c
  2270  0005DE  0E01               	movlw	1
  2271  0005E0  1601               	andwf	??i1_LCDout^0,f,c
  2272  0005E2  4601               	rlncf	??i1_LCDout^0,f,c
  2273  0005E4  4601               	rlncf	??i1_LCDout^0,f,c
  2274  0005E6  508C               	movf	140,w,c	;volatile
  2275  0005E8  1801               	xorwf	??i1_LCDout^0,w,c
  2276  0005EA  0BFB               	andlw	-5
  2277  0005EC  1801               	xorwf	??i1_LCDout^0,w,c
  2278  0005EE  6E8C               	movwf	140,c	;volatile
  2279                           
  2280                           ;lcd.c: 18:     LATDbits.LATD0 = (number & 0b0100) >> 2;
  2281  0005F0  C002  F001         	movff	i1LCDout@number,??i1_LCDout
  2282  0005F4  90D8               	bcf	status,0,c
  2283  0005F6  3201               	rrcf	??i1_LCDout^0,f,c
  2284  0005F8  90D8               	bcf	status,0,c
  2285  0005FA  3201               	rrcf	??i1_LCDout^0,f,c
  2286  0005FC  0E01               	movlw	1
  2287  0005FE  1601               	andwf	??i1_LCDout^0,f,c
  2288  000600  508C               	movf	140,w,c	;volatile
  2289  000602  1801               	xorwf	??i1_LCDout^0,w,c
  2290  000604  0BFE               	andlw	-2
  2291  000606  1801               	xorwf	??i1_LCDout^0,w,c
  2292  000608  6E8C               	movwf	140,c	;volatile
  2293                           
  2294                           ;lcd.c: 19:     LATDbits.LATD1 = (number & 0b1000) >> 3;
  2295  00060A  C002  F001         	movff	i1LCDout@number,??i1_LCDout
  2296  00060E  90D8               	bcf	status,0,c
  2297  000610  3201               	rrcf	??i1_LCDout^0,f,c
  2298  000612  90D8               	bcf	status,0,c
  2299  000614  3201               	rrcf	??i1_LCDout^0,f,c
  2300  000616  90D8               	bcf	status,0,c
  2301  000618  3201               	rrcf	??i1_LCDout^0,f,c
  2302  00061A  0E01               	movlw	1
  2303  00061C  1601               	andwf	??i1_LCDout^0,f,c
  2304  00061E  4601               	rlncf	??i1_LCDout^0,f,c
  2305  000620  508C               	movf	140,w,c	;volatile
  2306  000622  1801               	xorwf	??i1_LCDout^0,w,c
  2307  000624  0BFD               	andlw	-3
  2308  000626  1801               	xorwf	??i1_LCDout^0,w,c
  2309  000628  6E8C               	movwf	140,c	;volatile
  2310  00062A                     
  2311                           ;lcd.c: 20:     E_TOG();
  2312  00062A  EC1E  F004         	call	i1_E_TOG	;wreg free
  2313  00062E                     
  2314                           ;lcd.c: 22:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  2315  00062E  0E03               	movlw	3
  2316  000630                     i1u64_27:
  2317  000630  2EE8               	decfsz	wreg,f,c
  2318  000632  D7FE               	bra	i1u64_27
  2319  000634  F000               	nop	
  2320  000636  0012               	return		;funcret
  2321  000638                     __end_ofi1_LCDout:
  2322                           	opt callstack 0
  2323                           
  2324 ;; *************** function i1_E_TOG *****************
  2325 ;; Defined at:
  2326 ;;		line 4 in file "lcd.c"
  2327 ;; Parameters:    Size  Location     Type
  2328 ;;		None
  2329 ;; Auto vars:     Size  Location     Type
  2330 ;;		None
  2331 ;; Return value:  Size  Location     Type
  2332 ;;                  1    wreg      void 
  2333 ;; Registers used:
  2334 ;;		wreg
  2335 ;; Tracked objects:
  2336 ;;		On entry : 0/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2340 ;;      Params:         0       0       0       0
  2341 ;;      Locals:         0       0       0       0
  2342 ;;      Temps:          0       0       0       0
  2343 ;;      Totals:         0       0       0       0
  2344 ;;Total ram usage:        0 bytes
  2345 ;; Hardware stack levels used:    1
  2346 ;; This function calls:
  2347 ;;		Nothing
  2348 ;; This function is called by:
  2349 ;;		i1_LCDout
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           	psect	text18
  2354  00083C                     __ptext18:
  2355                           	opt callstack 0
  2356  00083C                     i1_E_TOG:
  2357                           	opt callstack 22
  2358  00083C                     
  2359                           ;lcd.c: 8:     LATCbits.LATC0 = 1;
  2360  00083C  808B               	bsf	139,0,c	;volatile
  2361  00083E                     
  2362                           ;lcd.c: 9:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  2363  00083E  0E03               	movlw	3
  2364  000840                     i1u65_27:
  2365  000840  2EE8               	decfsz	wreg,f,c
  2366  000842  D7FE               	bra	i1u65_27
  2367  000844  F000               	nop	
  2368  000846                     
  2369                           ;lcd.c: 10:     LATCbits.LATC0 = 0;
  2370  000846  908B               	bcf	139,0,c	;volatile
  2371  000848  0012               	return		;funcret
  2372  00084A                     __end_ofi1_E_TOG:
  2373                           	opt callstack 0
  2374                           
  2375 ;; *************** function _LEDout *****************
  2376 ;; Defined at:
  2377 ;;		line 4 in file "led.c"
  2378 ;; Parameters:    Size  Location     Type
  2379 ;;  number          2    0[COMRAM] int 
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;		None
  2382 ;; Return value:  Size  Location     Type
  2383 ;;                  1    wreg      void 
  2384 ;; Registers used:
  2385 ;;		wreg, status,2, status,0
  2386 ;; Tracked objects:
  2387 ;;		On entry : 0/0
  2388 ;;		On exit  : 0/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2391 ;;      Params:         2       0       0       0
  2392 ;;      Locals:         0       0       0       0
  2393 ;;      Temps:          3       0       0       0
  2394 ;;      Totals:         5       0       0       0
  2395 ;;Total ram usage:        5 bytes
  2396 ;; Hardware stack levels used:    1
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		_InterruptHandlerLow
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           	psect	text19
  2405  000638                     __ptext19:
  2406                           	opt callstack 0
  2407  000638                     _LEDout:
  2408                           	opt callstack 25
  2409  000638                     
  2410                           ;led.c: 13:     LATC = (number & 0b00111100) << 2;
  2411  000638  C001  F003         	movff	LEDout@number,??_LEDout
  2412  00063C  0E3C               	movlw	60
  2413  00063E  1603               	andwf	??_LEDout^0,f,c
  2414  000640  90D8               	bcf	status,0,c
  2415  000642  3603               	rlcf	??_LEDout^0,f,c
  2416  000644  90D8               	bcf	status,0,c
  2417  000646  3403               	rlcf	??_LEDout^0,w,c
  2418  000648  6E8B               	movwf	139,c	;volatile
  2419                           
  2420                           ;led.c: 14:     LATD = ((number & 0b00000011) << 2) | ((number & 0b11000000) >> 2);
  2421  00064A  C001  F003         	movff	LEDout@number,??_LEDout
  2422  00064E  C002  F004         	movff	LEDout@number+1,??_LEDout+1
  2423  000652  3404               	rlcf	(??_LEDout+1)^0,w,c
  2424  000654  3204               	rrcf	(??_LEDout+1)^0,f,c
  2425  000656  3203               	rrcf	??_LEDout^0,f,c
  2426  000658  3404               	rlcf	(??_LEDout+1)^0,w,c
  2427  00065A  3204               	rrcf	(??_LEDout+1)^0,f,c
  2428  00065C  3203               	rrcf	??_LEDout^0,f,c
  2429  00065E  0E30               	movlw	48
  2430  000660  1603               	andwf	??_LEDout^0,f,c
  2431  000662  C001  F005         	movff	LEDout@number,??_LEDout+2
  2432  000666  0E03               	movlw	3
  2433  000668  1605               	andwf	(??_LEDout+2)^0,f,c
  2434  00066A  90D8               	bcf	status,0,c
  2435  00066C  3605               	rlcf	(??_LEDout+2)^0,f,c
  2436  00066E  90D8               	bcf	status,0,c
  2437  000670  3405               	rlcf	(??_LEDout+2)^0,w,c
  2438  000672  1003               	iorwf	??_LEDout^0,w,c
  2439  000674  6E8C               	movwf	140,c	;volatile
  2440  000676  0012               	return		;funcret
  2441  000678                     __end_of_LEDout:
  2442                           	opt callstack 0
  2443  0000                     
  2444                           	psect	rparam
  2445  0000                     
  2446                           	psect	temp
  2447  00003D                     btemp:
  2448                           	opt callstack 0
  2449  00003D                     	ds	1
  2450  0000                     int$flags	set	btemp
  2451  0000                     wtemp8	set	btemp+1
  2452  0000                     ttemp5	set	btemp+1
  2453  0000                     ttemp6	set	btemp+4
  2454  0000                     ttemp7	set	btemp+8
  2455                           tosu	equ	0xFFF
  2456                           tosh	equ	0xFFE
  2457                           tosl	equ	0xFFD
  2458                           stkptr	equ	0xFFC
  2459                           pclatu	equ	0xFFB
  2460                           pclath	equ	0xFFA
  2461                           pcl	equ	0xFF9
  2462                           tblptru	equ	0xFF8
  2463                           tblptrh	equ	0xFF7
  2464                           tblptrl	equ	0xFF6
  2465                           tablat	equ	0xFF5
  2466                           prodh	equ	0xFF4
  2467                           prodl	equ	0xFF3
  2468                           indf0	equ	0xFEF
  2469                           postinc0	equ	0xFEE
  2470                           postdec0	equ	0xFED
  2471                           preinc0	equ	0xFEC
  2472                           plusw0	equ	0xFEB
  2473                           fsr0h	equ	0xFEA
  2474                           fsr0l	equ	0xFE9
  2475                           wreg	equ	0xFE8
  2476                           indf1	equ	0xFE7
  2477                           postinc1	equ	0xFE6
  2478                           postdec1	equ	0xFE5
  2479                           preinc1	equ	0xFE4
  2480                           plusw1	equ	0xFE3
  2481                           fsr1h	equ	0xFE2
  2482                           fsr1l	equ	0xFE1
  2483                           bsr	equ	0xFE0
  2484                           indf2	equ	0xFDF
  2485                           postinc2	equ	0xFDE
  2486                           postdec2	equ	0xFDD
  2487                           preinc2	equ	0xFDC
  2488                           plusw2	equ	0xFDB
  2489                           fsr2h	equ	0xFDA
  2490                           fsr2l	equ	0xFD9
  2491                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      60
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    fullSpeedAhead@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    fullSpeedAhead@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRight@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRight@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnLeft@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLeft@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), motorL(COMRAM[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S357DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S357DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_fullSpeedAhead
    _main->_turnLeft
    _main->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _SetLine->_SendLCD
    _LCD_Init->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    _InterruptHandlerLow->_LEDout
    _InterruptHandlerLow->i1_SetLine
    i1_SetLine->i1_SendLCD
    i1_SendLCD->i1_LCDout

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8382
                                             35 COMRAM     2     2      0
                           _LCD_Init
                            _LEDInit
                            _SetLine
                     _fullSpeedAhead
                          _initMotor
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     0      4    2150
                                             31 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             4     0      4    2150
                                             31 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initMotor                                            2     2      0      30
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       4     0      4    2150
                                             31 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          7     5      2    1998
                                             24 COMRAM     7     5      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     507
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                             16 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0     932
                                             14 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0     970
                                             14 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     910
                                             12 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               2     2      0      60
                                             10 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _InterruptHandlerLow                                  5     5      0     832
                                              5 COMRAM     5     5      0
                             _LEDout
                          i1_SendLCD
                          i1_SetLine
 ---------------------------------------------------------------------------------
 (6) i1_SetLine                                            1     1      0     280
                                              4 COMRAM     1     1      0
                          i1_SendLCD
 ---------------------------------------------------------------------------------
 (7) i1_SendLCD                                            2     1      1     258
                                              2 COMRAM     2     1      1
                           i1_LCDout
 ---------------------------------------------------------------------------------
 (8) i1_LCDout                                             2     2      0      88
                                              0 COMRAM     2     2      0
                            i1_E_TOG
 ---------------------------------------------------------------------------------
 (9) i1_E_TOG                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _LEDout                                               5     3      2     294
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _LEDInit
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initMotor
   _turnLeft
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnRight
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)
   _LEDout
   i1_SendLCD
     i1_LCDout
       i1_E_TOG
   i1_SetLine
     i1_SendLCD
       i1_LCDout
         i1_E_TOG

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      3C       1       63.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3C       3        0.0%
DATA                 0      0      3C      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Dec 02 10:31:13 2019

                          l20 05BA                            l23 070E                            l31 06AA  
                          l17 083A                            l26 04BC                            l90 0792  
                          l84 026E                            l77 053E                            l93 0768  
                          l96 07BC                  ___awdiv@sign 0016             fullSpeedAhead@m_L 0020  
           fullSpeedAhead@m_R 0022                            bsr 000FE0           ___wmul@multiplicand 000D  
                         l224 0274                           l251 082C                           l227 02C4  
                         l254 080A                           l485 0412                           l931 0838  
                         l941 05AE                           l927 082E                           l943 05B2  
                         l929 0830                           l939 0542                           u300 03C0  
                         u301 03BC                           u310 03DC                           u311 03D8  
                         u320 0402                           u321 03FE                           u340 00F2  
                         u341 00EE                           u270 0362                           u350 0214  
                         u335 06EA                           u271 035E                           u351 0210  
                         u336 06EC                           u280 037C                           u281 0378  
                         u290 03A2                           u507 06A4                           u291 039E  
                         u364 0232                           u517 0432                           u365 022E  
                         u390 068A                           u374 0260                           u470 0282  
                         u607 0832                           u527 0448                           u391 0686  
                         u375 025C                           u471 027E                           u480 02E6  
                         u537 0458                           u481 02E2                           u490 031C  
                         u547 0466                           u491 0318                           u557 0474  
                         u567 049E                           u577 06F8                           u587 0708  
                         u597 05B4                           wreg 000FE8               __end_of_LEDInit 082E  
                        l1131 080C                          l1071 04C2                          l1401 043C  
                        l1321 036E                          l1313 0350                          l1081 04CC  
                        l1073 04C4                          l1065 04BE                          l1411 0472  
                        l1403 0442                          l1331 03A2                          l1323 037C  
                        l1315 0354                          l1307 07E6                          l1091 052A  
                        l1083 04FE                          l1075 04C6                          l1067 04BE  
                        l1413 0498                          l1405 0456                          l1421 068A  
                        l1341 03DC                          l1333 03AA                          l1325 0384  
                        l1317 0362                          l1309 0802                          l1093 0536  
                        l1085 0506                          l1077 04C8                          l1069 04C0  
                        l1415 04A8                          l1407 045E                          l1423 0698  
                        l1351 0402                          l1343 03E4                          l1335 03B2  
                        l1327 0388                          l1319 036A                          l1087 0512  
                        l1079 04CA                          l1431 0776                          l1417 04B2  
                        l1409 046C                          l1425 06A2                          l1353 040A  
                        l1345 03E6                          l1337 03C0                          l1329 0390  
                        l1089 0522                          l1433 077A                          l1441 074C  
                        l1363 06E2                          l1419 067A                          l1347 03EC  
                        l1339 03C6                          l1371 00D6                          l1451 07A0  
                        l1435 0786                          l1427 076A                          l1443 0750  
                        l1365 06EC                          l1349 03F2                          l1381 01D6  
                        l1373 00F2                          l1453 07A4                          l1429 0772  
                        l1445 075C                          l1437 0740                          l1541 0292  
                        l1367 06F6                          l1383 01F8                          l1375 0154  
                        l1455 07B0                          l1447 0794                          l1439 0748  
                        l1551 029C                          l1543 0294                          l1535 0270  
                        l1369 06FE                          l1385 0214                          l1377 019A  
                        l1449 079C                          l1561 02A6                          l1553 029E  
                        l1545 0296                          l1537 0282                          l1387 0242  
                        l1379 01B6                          l1571 02B2                          l1563 02A8  
                        l1555 02A0                          l1547 0298                          l1539 0290  
                        l1397 0414                          l1581 02BC                          l1573 02B4  
                        l1565 02AA                          l1557 02A2                          l1549 029A  
                        l1399 042C                          l1591 02FA                          l1583 02BE  
                        l1575 02B6                          l1567 02AC                          l1559 02A4  
                        l1593 031C                          l1585 02C0                          l1577 02B8  
                        l1569 02AE                          l1595 0334                          l1587 02C2  
                        l1579 02BA                          l1589 02E6                          _LATB 000F8A  
                        _LATC 000F8B                          _LATD 000F8C                          i1l20 0636  
                        i1l23 073E                          i1l31 06DE                          i1l17 0848  
             __end_ofi1_E_TOG 084A                          _TMR1 000FCE                          _main 0270  
                        _left 0026                          fsr2h 000FDA                          indf2 000FDF  
                        fsr2l 000FD9                          btemp 003D                          prodh 000FF4  
                        prodl 000FF3                          start 00D2                  ___param_bank 000000  
             __end_of_SendLCD 0710               __end_of_SetLine 06AC              __end_of_LCD_Init 04BE  
                       ?_main 0001               __end_of___awdiv 0414               ___awdiv@divisor 0013  
                       _PDC0H 000F78                         _PDC1H 000F76                         _PDC0L 000F79  
                       _PDC1L 000F77                         i1l219 00C2                         i1l248 0676  
            __end_ofi1_LCDout 0638               ___awdiv@counter 0015                         _RCREG 000FAE  
                       _E_TOG 082E                         _SPBRG 000FAF                         _TXREG 000FAD  
                       _right 0028            __size_ofi1_SendLCD 0030            __size_ofi1_SetLine 0034  
                       tablat 000FF5                         ttemp5 003E                         ttemp6 0041  
                       ttemp7 0045                         status 000FD8                         wtemp8 003E  
                _TurningSpeed 003C               __initialization 07BE                  __end_of_main 0350  
              __CFG_OSC$IRCIO 000000                        ??_main 0024                 __activetblptr 000000  
                      ?_E_TOG 0001                     ??_LEDInit 000B                     ??i1_E_TOG 0001  
                ?_setMotorPWM 0019                        _CCPR1H 000FBF                        _CCPR2H 000FBC  
                      _CCPR1L 000FBE                        _CCPR2L 000FBB              ___awdiv@dividend 0011  
                      i1l1301 083C                        i1l1303 083E                        i1l1305 0846  
                      i1l1511 004A                        i1l1503 0026                        i1l1361 062E  
                      i1l1521 007C                        i1l1513 0058                        i1l1505 0034  
                      i1l1531 00B2                        i1l1515 006A                        i1l1523 0086  
                      i1l1507 003C                        i1l1357 05BE                        i1l1461 06BE  
                      i1l1533 00B8                        i1l1525 0094                        i1l1517 006C  
                      i1l1509 0048                        i1l1359 062A                        i1l1391 071C  
                      i1l1463 06CC                        i1l1527 00A6                        i1l1519 0076  
                      i1l1457 0638                        i1l1393 0726                        i1l1465 06D6  
                      i1l1529 00A8                        i1l1395 072E                        i1l1459 06AE  
                      i1l1389 0712                        _LCDout 0540                   SendLCD@Byte 000E  
                      _LEDout 0638                        _OSCCON 000FD3                        _PTCON0 000F7F  
                      _PTCON1 000F7E                        _SPBRGH 000FB0                        _PTPERH 000F7A  
                      _PTPERL 000F7B                   SendLCD@type 000D                     ??_SendLCD 000E  
                   ??_SetLine 000F                        ___wmul 07E6                     ??___awdiv 0015  
           __end_ofi1_SendLCD 0740             __end_ofi1_SetLine 06E0                        clear_0 07D6  
            ___awdiv@quotient 0017                        _motorL 0033                        _motorR 002A  
                __pdataCOMRAM 003C                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8              __end_of_turnLeft 0794                    __accesstop 0060  
     __end_of__initialization 07DC                     ?_LCD_Init 0001                 ___rparam_used 000001  
                 SetLine@line 000F                 __end_of_E_TOG 083C                     ?i1_LCDout 0001  
              __pcstackCOMRAM 0001                       ??_E_TOG 000B   __end_of_InterruptHandlerLow 00D2  
                     ?_LCDout 0001                       ?_LEDout 0001                    ??_LCD_Init 000F  
          __size_of_initMotor 0082                    ??i1_LCDout 0001                       ?___wmul 000B  
     __size_of_fullSpeedAhead 002A                       _LEDInit 080C                       i1_E_TOG 083C  
                     i1u40_20 06BE                       i1u40_21 06BA                       i1u44_20 0034  
                     i1u44_21 0030                       i1u45_20 0058                       i1u45_21 0054  
                     i1u61_27 06D8                       i1u46_20 0094                       i1u46_21 0090  
                     i1u38_25 071A                       i1u38_26 071C                       i1u62_27 0728  
                     i1u63_27 0738                       i1u64_27 0630                       i1u65_27 0840  
                     _PWMCON0 000F6F                       _PWMCON1 000F6E          __size_of_setMotorPWM 019A  
             __size_of_LCDout 007C               __size_of_LEDout 0040            __size_of_turnRight 002A  
                     _SendLCD 06E0                       __Hparam 0000                       _SetLine 0678  
                     __Lparam 0000                       ___awdiv 0350               __size_of___wmul 0026  
                     __pcinit 07BE                       __ramtop 0300                     ?_turnLeft 0020  
                     __ptext0 0270                       __ptext1 0740                       __ptext2 076A  
                     __ptext3 04BE                       __ptext4 0794                       __ptext5 00D6  
                     __ptext6 07E6                       __ptext7 0350                       __ptext8 0678  
                     __ptext9 080C                     _T1CONbits 000FCD             __end_of_initMotor 0540  
                LCDout@number 000C          end_of_initialization 07DC            setMotorPWM@PWMduty 001E  
                turnRight@m_L 0020                  turnRight@m_R 0022                     _RCSTAbits 000FAB  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
                  ??_turnLeft 0024                     i1_SendLCD 0710             __end_of_turnRight 076A  
                   i1_SetLine 06AC                  LEDout@number 0001                     _TRISAbits 000F92  
                   _TRISBbits 000F93                     _TRISCbits 000F94                     _TRISDbits 000F95  
              i1LCDout@number 0002                   _CCP1CONbits 000FBD                __end_of_LCDout 05BC  
                 _CCP2CONbits 000FBA                     _TXSTAbits 000FAC                __end_of_LEDout 0678  
           __size_of_LCD_Init 00AA             __size_ofi1_LCDout 007C                _fullSpeedAhead 0794  
              __end_of___wmul 080C                   _BAUDCONbits 000FAA                 __pidataCOMRAM 084A  
                  ?i1_SendLCD 0003                    ?i1_SetLine 0001           start_initialization 07BE  
                    ??_LCDout 000B                      ??_LEDout 0003        __end_of_fullSpeedAhead 07BE  
                    ??___wmul 000F                      ?_LEDInit 0001                   __pbssCOMRAM 0026  
                    ?i1_E_TOG 0001  __size_of_InterruptHandlerLow 00BA                      ?_SendLCD 000D  
                    ?_SetLine 0001               ?_fullSpeedAhead 0020                      ?___awdiv 0011  
                 __pintcodelo 0018                   ??i1_SendLCD 0004                   ??i1_SetLine 0005  
              __size_of_E_TOG 000E             __size_of_turnLeft 002A                 ??_setMotorPWM 001B  
                   _initMotor 04BE                   turnLeft@m_L 0020                   turnLeft@m_R 0022  
                    _LCD_Init 0414                 i1SendLCD@Byte 0004                ___wmul@product 000F  
                    _LATAbits 000F89                      _LATBbits 000F8A                      _LATCbits 000F8B  
                    _LATDbits 000F8C                      _PIE1bits 000F9D                 i1SendLCD@type 0003  
                    i1_LCDout 05BC                      _PIR1bits 000F9E                      _PIR2bits 000FA1  
                    _RCONbits 000FD0             ___wmul@multiplier 000B                  setMotorPWM@m 0019  
            __size_of_LEDInit 0022                    ?_initMotor 0001                     _turnRight 0740  
            __size_ofi1_E_TOG 000E                   _INTCON2bits 000FF1           __end_of_setMotorPWM 0270  
                    __Hrparam 0000                 i1SetLine@line 0005              __size_of_SendLCD 0030  
                    __Lrparam 0000              __size_of_SetLine 0034              __size_of___awdiv 00C4  
                  ?_turnRight 0020                      __ptext10 0414                      __ptext11 06E0  
                    __ptext12 0540                      __ptext13 082E                      __ptext15 06AC  
                    __ptext16 0710                      __ptext17 05BC                      __ptext18 083C  
                    __ptext19 0638                 __size_of_main 00E0                      int$flags 003D  
         _InterruptHandlerLow 0018                      _turnLeft 076A                    _INTCONbits 000FF2  
                 ??_initMotor 000B                   _setMotorPWM 00D6                      intlevel1 0000  
        ?_InterruptHandlerLow 0001              ??_fullSpeedAhead 0024                    _OSCCONbits 000FD3  
                 ??_turnRight 0024         ??_InterruptHandlerLow 0006  
