

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Nov 25 11:07:27 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    22  0000                     
    23                           ; Version 2.10
    24                           ; Generated 31/07/2019 GMT
    25                           ; 
    26                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4331 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	idataCOMRAM
    59  0002B0                     __pidataCOMRAM:
    60                           	opt callstack 0
    61                           
    62                           ;initializer for _TurningSpeed
    63  0002B0  4B                 	db	75
    64  0000                     _PIE1bits	set	3997
    65  0000                     _RCONbits	set	4048
    66  0000                     _INTCONbits	set	4082
    67  0000                     _OSCCONbits	set	4051
    68  0000                     _OSCCON	set	4051
    69  0000                     _RCSTAbits	set	4011
    70  0000                     _TXSTAbits	set	4012
    71  0000                     _BAUDCONbits	set	4010
    72  0000                     _SPBRGH	set	4016
    73  0000                     _SPBRG	set	4015
    74  0000                     _TXREG	set	4013
    75  0000                     _RCREG	set	4014
    76  0000                     _PIR1bits	set	3998
    77  0000                     _LATB	set	3978
    78  0000                     _PTPERH	set	3962
    79  0000                     _PTPERL	set	3963
    80  0000                     _PWMCON1	set	3950
    81  0000                     _PWMCON0	set	3951
    82  0000                     _PTCON1	set	3966
    83  0000                     _PTCON0	set	3967
    84  0000                     _LATBbits	set	3978
    85  0000                     _TRISBbits	set	3987
    86  0000                     _TRISDbits	set	3989
    87  0000                     _TRISCbits	set	3988
    88  0000                     _TRISAbits	set	3986
    89  0000                     _LATAbits	set	3977
    90  0000                     _LATDbits	set	3980
    91  0000                     _LATCbits	set	3979
    92  0000                     _PDC1H	set	3958
    93  0000                     _PDC1L	set	3959
    94  0000                     _PDC0H	set	3960
    95  0000                     _PDC0L	set	3961
    96                           
    97                           ; #config settings
    98  0000                     
    99                           	psect	cinit
   100  000262                     __pcinit:
   101                           	opt callstack 0
   102  000262                     start_initialization:
   103                           	opt callstack 0
   104  000262                     __initialization:
   105                           	opt callstack 0
   106                           
   107                           ; Initialize objects allocated to COMRAM (1 bytes)
   108                           ; load TBLPTR registers with __pidataCOMRAM
   109  000262  0EB0               	movlw	low __pidataCOMRAM
   110  000264  6EF6               	movwf	tblptrl,c
   111  000266  0E02               	movlw	high __pidataCOMRAM
   112  000268  6EF7               	movwf	tblptrh,c
   113  00026A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   114  00026C  6EF8               	movwf	tblptru,c
   115  00026E  0009               	tblrd		*+	;fetch initializer
   116  000270  CFF5 F02E          	movff	tablat,__pdataCOMRAM
   117                           
   118                           ; Clear objects allocated to COMRAM (35 bytes)
   119  000274  EE00  F001         	lfsr	0,__pbssCOMRAM
   120  000278  0E23               	movlw	35
   121  00027A                     clear_0:
   122  00027A  6AEE               	clrf	postinc0,c
   123  00027C  06E8               	decf	wreg,f,c
   124  00027E  E1FD               	bnz	clear_0
   125  000280                     end_of_initialization:
   126                           	opt callstack 0
   127  000280                     __end_of__initialization:
   128                           	opt callstack 0
   129  000280  902F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   130  000282  922F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   131  000284  0100               	movlb	0
   132  000286  EFB2  F000         	goto	_main	;jump to C main() function
   133                           
   134                           	psect	bssCOMRAM
   135  000001                     __pbssCOMRAM:
   136                           	opt callstack 0
   137  000001                     _reader:
   138                           	opt callstack 0
   139  000001                     	ds	1
   140  000002                     _A:
   141                           	opt callstack 0
   142  000002                     	ds	16
   143  000012                     _motorR:
   144                           	opt callstack 0
   145  000012                     	ds	9
   146  00001B                     _motorL:
   147                           	opt callstack 0
   148  00001B                     	ds	9
   149                           
   150                           	psect	dataCOMRAM
   151  00002E                     __pdataCOMRAM:
   152                           	opt callstack 0
   153  00002E                     _TurningSpeed:
   154                           	opt callstack 0
   155  00002E                     	ds	1
   156                           
   157                           	psect	cstackCOMRAM
   158  000024                     __pcstackCOMRAM:
   159                           	opt callstack 0
   160  000024                     ??_InterruptHandlerHigh:
   161  000024                     
   162                           ; 1 bytes @ 0x0
   163  000024                     	ds	2
   164  000026                     ??_LCDout:
   165  000026                     
   166                           ; 1 bytes @ 0x2
   167  000026                     	ds	1
   168  000027                     LCDout@number:
   169                           	opt callstack 0
   170                           
   171                           ; 1 bytes @ 0x3
   172  000027                     	ds	1
   173  000028                     SendLCD@type:
   174                           	opt callstack 0
   175                           
   176                           ; 1 bytes @ 0x4
   177  000028                     	ds	1
   178  000029                     SendLCD@Byte:
   179                           	opt callstack 0
   180                           
   181                           ; 1 bytes @ 0x5
   182  000029                     	ds	1
   183  00002A                     ??_LCD_Init:
   184  00002A                     SetLine@line:
   185                           	opt callstack 0
   186  00002A                     LCD_String@string:
   187                           	opt callstack 0
   188                           
   189                           ; 2 bytes @ 0x6
   190  00002A                     	ds	2
   191  00002C                     ??_main:
   192                           
   193                           ; 1 bytes @ 0x8
   194  00002C                     	ds	2
   195                           
   196 ;;
   197 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   198 ;;
   199 ;; *************** function _main *****************
   200 ;; Defined at:
   201 ;;		line 19 in file "main.c"
   202 ;; Parameters:    Size  Location     Type
   203 ;;		None
   204 ;; Auto vars:     Size  Location     Type
   205 ;;  i               1    0        unsigned char 
   206 ;;  kms             1    0        unsigned char 
   207 ;;  j               1    0        unsigned char 
   208 ;; Return value:  Size  Location     Type
   209 ;;                  1    wreg      void 
   210 ;; Registers used:
   211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   212 ;; Tracked objects:
   213 ;;		On entry : 0/0
   214 ;;		On exit  : 0/0
   215 ;;		Unchanged: 0/0
   216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   217 ;;      Params:         0       0       0       0
   218 ;;      Locals:         1       0       0       0
   219 ;;      Temps:          2       0       0       0
   220 ;;      Totals:         3       0       0       0
   221 ;;Total ram usage:        3 bytes
   222 ;; Hardware stack levels required when called:    5
   223 ;; This function calls:
   224 ;;		_LCD_Init
   225 ;;		_LCD_String
   226 ;;		_SendLCD
   227 ;;		_SetLine
   228 ;;		_initSerial
   229 ;; This function is called by:
   230 ;;		Startup code after reset
   231 ;; This function uses a non-reentrant model
   232 ;;
   233                           
   234                           	psect	text0
   235  000164                     __ptext0:
   236                           	opt callstack 0
   237  000164                     _main:
   238                           	opt callstack 26
   239  000164                     
   240                           ;main.c: 20:     OSCCON = 0x72;
   241  000164  0E72               	movlw	114
   242  000166  6ED3               	movwf	211,c	;volatile
   243  000168                     l193:
   244  000168  A4D3               	btfss	211,2,c	;volatile
   245  00016A  EFB9  F000         	goto	u181
   246  00016E  EFBB  F000         	goto	u180
   247  000172                     u181:
   248  000172  EFB4  F000         	goto	l193
   249  000176                     u180:
   250  000176                     
   251                           ;main.c: 22:     initSerial();
   252  000176  EC45  F001         	call	_initSerial	;wreg free
   253  00017A                     
   254                           ;main.c: 23:     LCD_Init();
   255  00017A  EC21  F000         	call	_LCD_Init	;wreg free
   256  00017E                     
   257                           ;main.c: 24:     SetLine(1);
   258  00017E  0E01               	movlw	1
   259  000180  ECFF  F000         	call	_SetLine
   260  000184                     
   261                           ;main.c: 25:     INTCONbits.GIEH = 1;
   262  000184  8EF2               	bsf	242,7,c	;volatile
   263  000186                     
   264                           ;main.c: 26:     INTCONbits.GIEL = 1;
   265  000186  8CF2               	bsf	242,6,c	;volatile
   266  000188                     
   267                           ;main.c: 27:     RCONbits.IPEN = 1;
   268  000188  8ED0               	bsf	208,7,c	;volatile
   269  00018A                     
   270                           ;main.c: 28:     PIE1bits.RCIE =1;
   271  00018A  8A9D               	bsf	157,5,c	;volatile
   272  00018C                     l1161:
   273                           
   274                           ;main.c: 35:             SendLCD(0b00000001, 0);
   275  00018C  0E00               	movlw	0
   276  00018E  6E28               	movwf	SendLCD@type^0,c
   277  000190  0E01               	movlw	1
   278  000192  EC19  F001         	call	_SendLCD
   279  000196                     
   280                           ;main.c: 36:             LCD_String(A);
   281  000196  0E02               	movlw	low _A
   282  000198  6E2A               	movwf	LCD_String@string^0,c
   283  00019A  0E00               	movlw	high _A
   284  00019C  6E2B               	movwf	(LCD_String@string+1)^0,c
   285  00019E  ECE1  F000         	call	_LCD_String	;wreg free
   286  0001A2                     
   287                           ;main.c: 37:             _delay((unsigned long)((100)*(8000000/4000.0)));
   288  0001A2  0E02               	movlw	2
   289  0001A4  6E2D               	movwf	(??_main+1)^0,c
   290  0001A6  0E04               	movlw	4
   291  0001A8  6E2C               	movwf	??_main^0,c
   292  0001AA  0EBA               	movlw	186
   293  0001AC                     u197:
   294  0001AC  2EE8               	decfsz	wreg,f,c
   295  0001AE  D7FE               	bra	u197
   296  0001B0  2E2C               	decfsz	??_main^0,f,c
   297  0001B2  D7FC               	bra	u197
   298  0001B4  2E2D               	decfsz	(??_main+1)^0,f,c
   299  0001B6  D7FA               	bra	u197
   300  0001B8  D000               	nop2	
   301  0001BA  EFC6  F000         	goto	l1161
   302  0001BE  EF1F  F000         	goto	start
   303  0001C2                     __end_of_main:
   304                           	opt callstack 0
   305                           
   306 ;; *************** function _initSerial *****************
   307 ;; Defined at:
   308 ;;		line 26 in file "serial.c"
   309 ;; Parameters:    Size  Location     Type
   310 ;;		None
   311 ;; Auto vars:     Size  Location     Type
   312 ;;		None
   313 ;; Return value:  Size  Location     Type
   314 ;;                  1    wreg      void 
   315 ;; Registers used:
   316 ;;		wreg, status,2
   317 ;; Tracked objects:
   318 ;;		On entry : 0/0
   319 ;;		On exit  : 0/0
   320 ;;		Unchanged: 0/0
   321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   322 ;;      Params:         0       0       0       0
   323 ;;      Locals:         0       0       0       0
   324 ;;      Temps:          0       0       0       0
   325 ;;      Totals:         0       0       0       0
   326 ;;Total ram usage:        0 bytes
   327 ;; Hardware stack levels used:    1
   328 ;; Hardware stack levels required when called:    1
   329 ;; This function calls:
   330 ;;		Nothing
   331 ;; This function is called by:
   332 ;;		_main
   333 ;; This function uses a non-reentrant model
   334 ;;
   335                           
   336                           	psect	text1
   337  00028A                     __ptext1:
   338                           	opt callstack 0
   339  00028A                     _initSerial:
   340                           	opt callstack 29
   341  00028A                     
   342                           ;serial.c: 27:     TRISCbits.RC6 = 1;
   343  00028A  8C94               	bsf	148,6,c	;volatile
   344                           
   345                           ;serial.c: 28:     TRISCbits.RC7 = 1;
   346  00028C  8E94               	bsf	148,7,c	;volatile
   347  00028E                     
   348                           ;serial.c: 29:     SPBRG = 207;
   349  00028E  0ECF               	movlw	207
   350  000290  6EAF               	movwf	175,c	;volatile
   351                           
   352                           ;serial.c: 30:     SPBRGH = 0;
   353  000292  0E00               	movlw	0
   354  000294  6EB0               	movwf	176,c	;volatile
   355  000296                     
   356                           ;serial.c: 31:     BAUDCONbits.BRG16 = 1;
   357  000296  86AA               	bsf	170,3,c	;volatile
   358  000298                     
   359                           ;serial.c: 32:     TXSTAbits.BRGH = 1;
   360  000298  84AC               	bsf	172,2,c	;volatile
   361  00029A                     
   362                           ;serial.c: 33:     RCSTAbits.CREN = 1;
   363  00029A  88AB               	bsf	171,4,c	;volatile
   364  00029C                     
   365                           ;serial.c: 34:     RCSTAbits.SPEN = 1;
   366  00029C  8EAB               	bsf	171,7,c	;volatile
   367  00029E                     
   368                           ;serial.c: 35:     TXSTAbits.TXEN = 1;
   369  00029E  8AAC               	bsf	172,5,c	;volatile
   370  0002A0  0012               	return		;funcret
   371  0002A2                     __end_of_initSerial:
   372                           	opt callstack 0
   373                           
   374 ;; *************** function _SetLine *****************
   375 ;; Defined at:
   376 ;;		line 85 in file "lcd.c"
   377 ;; Parameters:    Size  Location     Type
   378 ;;  line            1    wreg     unsigned char 
   379 ;; Auto vars:     Size  Location     Type
   380 ;;  line            1    6[COMRAM] unsigned char 
   381 ;; Return value:  Size  Location     Type
   382 ;;                  1    wreg      void 
   383 ;; Registers used:
   384 ;;		wreg, status,2, status,0, cstack
   385 ;; Tracked objects:
   386 ;;		On entry : 0/0
   387 ;;		On exit  : 0/0
   388 ;;		Unchanged: 0/0
   389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   390 ;;      Params:         0       0       0       0
   391 ;;      Locals:         1       0       0       0
   392 ;;      Temps:          0       0       0       0
   393 ;;      Totals:         1       0       0       0
   394 ;;Total ram usage:        1 bytes
   395 ;; Hardware stack levels used:    1
   396 ;; Hardware stack levels required when called:    4
   397 ;; This function calls:
   398 ;;		_SendLCD
   399 ;; This function is called by:
   400 ;;		_main
   401 ;; This function uses a non-reentrant model
   402 ;;
   403                           
   404                           	psect	text2
   405  0001FE                     __ptext2:
   406                           	opt callstack 0
   407  0001FE                     _SetLine:
   408                           	opt callstack 26
   409                           
   410                           ;incstack = 0
   411                           ;SetLine@line stored from wreg
   412  0001FE  6E2A               	movwf	SetLine@line^0,c
   413  000200                     
   414                           ;lcd.c: 86:     if (line == 1) {
   415  000200  042A               	decf	SetLine@line^0,w,c
   416  000202  A4D8               	btfss	status,2,c
   417  000204  EF06  F001         	goto	u161
   418  000208  EF08  F001         	goto	u160
   419  00020C                     u161:
   420  00020C  EF0F  F001         	goto	l1129
   421  000210                     u160:
   422  000210                     
   423                           ;lcd.c: 87:         SendLCD(0x80, 0);
   424  000210  0E00               	movlw	0
   425  000212  6E28               	movwf	SendLCD@type^0,c
   426  000214  0E80               	movlw	128
   427  000216  EC19  F001         	call	_SendLCD
   428                           
   429                           ;lcd.c: 88:     } else {
   430  00021A  EF14  F001         	goto	l1131
   431  00021E                     l1129:
   432                           
   433                           ;lcd.c: 89:         SendLCD(0xC0, 0);
   434  00021E  0E00               	movlw	0
   435  000220  6E28               	movwf	SendLCD@type^0,c
   436  000222  0EC0               	movlw	192
   437  000224  EC19  F001         	call	_SendLCD
   438  000228                     l1131:
   439                           
   440                           ;lcd.c: 91:     _delay((unsigned long)((50)*(8000000/4000000.0)));
   441  000228  0E21               	movlw	33
   442  00022A                     u207:
   443  00022A  2EE8               	decfsz	wreg,f,c
   444  00022C  D7FE               	bra	u207
   445  00022E  F000               	nop	
   446  000230  0012               	return		;funcret
   447  000232                     __end_of_SetLine:
   448                           	opt callstack 0
   449                           
   450 ;; *************** function _LCD_String *****************
   451 ;; Defined at:
   452 ;;		line 94 in file "lcd.c"
   453 ;; Parameters:    Size  Location     Type
   454 ;;  string          2    6[COMRAM] PTR unsigned char 
   455 ;;		 -> A(16), 
   456 ;; Auto vars:     Size  Location     Type
   457 ;;		None
   458 ;; Return value:  Size  Location     Type
   459 ;;                  1    wreg      void 
   460 ;; Registers used:
   461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   462 ;; Tracked objects:
   463 ;;		On entry : 0/0
   464 ;;		On exit  : 0/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   467 ;;      Params:         2       0       0       0
   468 ;;      Locals:         0       0       0       0
   469 ;;      Temps:          0       0       0       0
   470 ;;      Totals:         2       0       0       0
   471 ;;Total ram usage:        2 bytes
   472 ;; Hardware stack levels used:    1
   473 ;; Hardware stack levels required when called:    4
   474 ;; This function calls:
   475 ;;		_SendLCD
   476 ;; This function is called by:
   477 ;;		_main
   478 ;; This function uses a non-reentrant model
   479 ;;
   480                           
   481                           	psect	text3
   482  0001C2                     __ptext3:
   483                           	opt callstack 0
   484  0001C2                     _LCD_String:
   485                           	opt callstack 26
   486  0001C2                     
   487                           ;lcd.c: 96:     while (*string != 0) {
   488  0001C2  EFF2  F000         	goto	l1141
   489  0001C6                     l1135:
   490                           
   491                           ;lcd.c: 99:         SendLCD(*string++, 1);
   492  0001C6  0E01               	movlw	1
   493  0001C8  6E28               	movwf	SendLCD@type^0,c
   494  0001CA  C02A  FFD9         	movff	LCD_String@string,fsr2l
   495  0001CE  C02B  FFDA         	movff	LCD_String@string+1,fsr2h
   496  0001D2  50DF               	movf	indf2,w,c
   497  0001D4  EC19  F001         	call	_SendLCD
   498  0001D8  4A2A               	infsnz	LCD_String@string^0,f,c
   499  0001DA  2A2B               	incf	(LCD_String@string+1)^0,f,c
   500  0001DC                     
   501                           ;lcd.c: 100:         _delay((unsigned long)((50)*(8000000/4000000.0)));
   502  0001DC  0E21               	movlw	33
   503  0001DE                     u217:
   504  0001DE  2EE8               	decfsz	wreg,f,c
   505  0001E0  D7FE               	bra	u217
   506  0001E2  F000               	nop	
   507  0001E4                     l1141:
   508                           
   509                           ;lcd.c: 96:     while (*string != 0) {
   510  0001E4  C02A  FFD9         	movff	LCD_String@string,fsr2l
   511  0001E8  C02B  FFDA         	movff	LCD_String@string+1,fsr2h
   512  0001EC  50DF               	movf	indf2,w,c
   513  0001EE  A4D8               	btfss	status,2,c
   514  0001F0  EFFC  F000         	goto	u171
   515  0001F4  EFFE  F000         	goto	u170
   516  0001F8                     u171:
   517  0001F8  EFE3  F000         	goto	l1135
   518  0001FC                     u170:
   519  0001FC  0012               	return		;funcret
   520  0001FE                     __end_of_LCD_String:
   521                           	opt callstack 0
   522                           
   523 ;; *************** function _LCD_Init *****************
   524 ;; Defined at:
   525 ;;		line 38 in file "lcd.c"
   526 ;; Parameters:    Size  Location     Type
   527 ;;		None
   528 ;; Auto vars:     Size  Location     Type
   529 ;;		None
   530 ;; Return value:  Size  Location     Type
   531 ;;                  1    wreg      void 
   532 ;; Registers used:
   533 ;;		wreg, status,2, status,0, cstack
   534 ;; Tracked objects:
   535 ;;		On entry : 0/0
   536 ;;		On exit  : 0/0
   537 ;;		Unchanged: 0/0
   538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   539 ;;      Params:         0       0       0       0
   540 ;;      Locals:         0       0       0       0
   541 ;;      Temps:          1       0       0       0
   542 ;;      Totals:         1       0       0       0
   543 ;;Total ram usage:        1 bytes
   544 ;; Hardware stack levels used:    1
   545 ;; Hardware stack levels required when called:    4
   546 ;; This function calls:
   547 ;;		_LCDout
   548 ;;		_SendLCD
   549 ;; This function is called by:
   550 ;;		_main
   551 ;; This function uses a non-reentrant model
   552 ;;
   553                           
   554                           	psect	text4
   555  000042                     __ptext4:
   556                           	opt callstack 0
   557  000042                     _LCD_Init:
   558                           	opt callstack 26
   559  000042                     
   560                           ;lcd.c: 40:     TRISAbits.RA6 = 0;
   561  000042  9C92               	bcf	146,6,c	;volatile
   562                           
   563                           ;lcd.c: 41:     TRISCbits.RC0 = 0;
   564  000044  9094               	bcf	148,0,c	;volatile
   565                           
   566                           ;lcd.c: 42:     TRISCbits.RC1 = 0;
   567  000046  9294               	bcf	148,1,c	;volatile
   568                           
   569                           ;lcd.c: 43:     TRISCbits.RC2 = 0;
   570  000048  9494               	bcf	148,2,c	;volatile
   571                           
   572                           ;lcd.c: 44:     TRISDbits.RD0 = 0;
   573  00004A  9095               	bcf	149,0,c	;volatile
   574                           
   575                           ;lcd.c: 45:     TRISDbits.RD1 = 0;
   576  00004C  9295               	bcf	149,1,c	;volatile
   577                           
   578                           ;lcd.c: 47:     LATAbits.LA6 = 0;
   579  00004E  9C89               	bcf	137,6,c	;volatile
   580                           
   581                           ;lcd.c: 48:     LATCbits.LC0 = 0;
   582  000050  908B               	bcf	139,0,c	;volatile
   583                           
   584                           ;lcd.c: 49:     LATCbits.LC1 = 0;
   585  000052  928B               	bcf	139,1,c	;volatile
   586                           
   587                           ;lcd.c: 50:     LATCbits.LC2 = 0;
   588  000054  948B               	bcf	139,2,c	;volatile
   589                           
   590                           ;lcd.c: 51:     LATDbits.LD0 = 0;
   591  000056  908C               	bcf	140,0,c	;volatile
   592                           
   593                           ;lcd.c: 52:     LATDbits.LD1 = 0;
   594  000058  928C               	bcf	140,1,c	;volatile
   595  00005A                     
   596                           ;lcd.c: 64:     _delay((unsigned long)((15)*(8000000/4000.0)));
   597  00005A  0E27               	movlw	39
   598  00005C  6E2A               	movwf	??_LCD_Init^0,c
   599  00005E  0EF5               	movlw	245
   600  000060                     u227:
   601  000060  2EE8               	decfsz	wreg,f,c
   602  000062  D7FE               	bra	u227
   603  000064  2E2A               	decfsz	??_LCD_Init^0,f,c
   604  000066  D7FC               	bra	u227
   605  000068  F000               	nop	
   606  00006A                     
   607                           ;lcd.c: 65:     LCDout(0b0011);
   608  00006A  0E03               	movlw	3
   609  00006C  EC76  F000         	call	_LCDout
   610  000070                     
   611                           ;lcd.c: 66:     _delay((unsigned long)((5)*(8000000/4000.0)));
   612  000070  0E0D               	movlw	13
   613  000072  6E2A               	movwf	??_LCD_Init^0,c
   614  000074  0EFC               	movlw	252
   615  000076                     u237:
   616  000076  2EE8               	decfsz	wreg,f,c
   617  000078  D7FE               	bra	u237
   618  00007A  2E2A               	decfsz	??_LCD_Init^0,f,c
   619  00007C  D7FC               	bra	u237
   620                           
   621                           ;lcd.c: 67:     LCDout(0b0011);
   622  00007E  0E03               	movlw	3
   623  000080  EC76  F000         	call	_LCDout
   624  000084                     
   625                           ;lcd.c: 68:     _delay((unsigned long)((200)*(8000000/4000000.0)));
   626  000084  0E85               	movlw	133
   627  000086                     u247:
   628  000086  2EE8               	decfsz	wreg,f,c
   629  000088  D7FE               	bra	u247
   630  00008A  F000               	nop	
   631  00008C                     
   632                           ;lcd.c: 69:     LCDout(0b0011);
   633  00008C  0E03               	movlw	3
   634  00008E  EC76  F000         	call	_LCDout
   635                           
   636                           ;lcd.c: 70:     _delay((unsigned long)((50)*(8000000/4000000.0)));
   637  000092  0E21               	movlw	33
   638  000094                     u257:
   639  000094  2EE8               	decfsz	wreg,f,c
   640  000096  D7FE               	bra	u257
   641  000098  F000               	nop	
   642  00009A                     
   643                           ;lcd.c: 71:     LCDout(0b0010);
   644  00009A  0E02               	movlw	2
   645  00009C  EC76  F000         	call	_LCDout
   646  0000A0                     
   647                           ;lcd.c: 72:     _delay((unsigned long)((50)*(8000000/4000000.0)));
   648  0000A0  0E21               	movlw	33
   649  0000A2                     u267:
   650  0000A2  2EE8               	decfsz	wreg,f,c
   651  0000A4  D7FE               	bra	u267
   652  0000A6  F000               	nop	
   653                           
   654                           ;lcd.c: 74:     SendLCD(0b00101000, 0);
   655  0000A8  0E00               	movlw	0
   656  0000AA  6E28               	movwf	SendLCD@type^0,c
   657  0000AC  0E28               	movlw	40
   658  0000AE  EC19  F001         	call	_SendLCD
   659                           
   660                           ;lcd.c: 75:     SendLCD(0b00001000, 0);
   661  0000B2  0E00               	movlw	0
   662  0000B4  6E28               	movwf	SendLCD@type^0,c
   663  0000B6  0E08               	movlw	8
   664  0000B8  EC19  F001         	call	_SendLCD
   665                           
   666                           ;lcd.c: 76:     SendLCD(0b00000001, 0);
   667  0000BC  0E00               	movlw	0
   668  0000BE  6E28               	movwf	SendLCD@type^0,c
   669  0000C0  0E01               	movlw	1
   670  0000C2  EC19  F001         	call	_SendLCD
   671  0000C6                     
   672                           ;lcd.c: 77:     _delay((unsigned long)((2)*(8000000/4000.0)));
   673  0000C6  0E06               	movlw	6
   674  0000C8  6E2A               	movwf	??_LCD_Init^0,c
   675  0000CA  0E30               	movlw	48
   676  0000CC                     u277:
   677  0000CC  2EE8               	decfsz	wreg,f,c
   678  0000CE  D7FE               	bra	u277
   679  0000D0  2E2A               	decfsz	??_LCD_Init^0,f,c
   680  0000D2  D7FC               	bra	u277
   681  0000D4  D000               	nop2	
   682  0000D6                     
   683                           ;lcd.c: 78:     SendLCD(0b00000110, 0);
   684  0000D6  0E00               	movlw	0
   685  0000D8  6E28               	movwf	SendLCD@type^0,c
   686  0000DA  0E06               	movlw	6
   687  0000DC  EC19  F001         	call	_SendLCD
   688  0000E0                     
   689                           ;lcd.c: 79:     SendLCD(0b00001111, 0);
   690  0000E0  0E00               	movlw	0
   691  0000E2  6E28               	movwf	SendLCD@type^0,c
   692  0000E4  0E0F               	movlw	15
   693  0000E6  EC19  F001         	call	_SendLCD
   694  0000EA  0012               	return		;funcret
   695  0000EC                     __end_of_LCD_Init:
   696                           	opt callstack 0
   697                           
   698 ;; *************** function _SendLCD *****************
   699 ;; Defined at:
   700 ;;		line 26 in file "lcd.c"
   701 ;; Parameters:    Size  Location     Type
   702 ;;  Byte            1    wreg     unsigned char 
   703 ;;  type            1    4[COMRAM] unsigned char 
   704 ;; Auto vars:     Size  Location     Type
   705 ;;  Byte            1    5[COMRAM] unsigned char 
   706 ;; Return value:  Size  Location     Type
   707 ;;                  1    wreg      void 
   708 ;; Registers used:
   709 ;;		wreg, status,2, status,0, cstack
   710 ;; Tracked objects:
   711 ;;		On entry : 0/0
   712 ;;		On exit  : 0/0
   713 ;;		Unchanged: 0/0
   714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   715 ;;      Params:         1       0       0       0
   716 ;;      Locals:         1       0       0       0
   717 ;;      Temps:          0       0       0       0
   718 ;;      Totals:         2       0       0       0
   719 ;;Total ram usage:        2 bytes
   720 ;; Hardware stack levels used:    1
   721 ;; Hardware stack levels required when called:    3
   722 ;; This function calls:
   723 ;;		_LCDout
   724 ;; This function is called by:
   725 ;;		_LCD_Init
   726 ;;		_SetLine
   727 ;;		_LCD_String
   728 ;;		_main
   729 ;; This function uses a non-reentrant model
   730 ;;
   731                           
   732                           	psect	text5
   733  000232                     __ptext5:
   734                           	opt callstack 0
   735  000232                     _SendLCD:
   736                           	opt callstack 26
   737                           
   738                           ;incstack = 0
   739                           ;SendLCD@Byte stored from wreg
   740  000232  6E29               	movwf	SendLCD@Byte^0,c
   741  000234                     
   742                           ;lcd.c: 29:     LATAbits.LATA6 = type;
   743  000234  B028               	btfsc	SendLCD@type^0,0,c
   744  000236  D002               	bra	u155
   745  000238  9C89               	bcf	137,6,c	;volatile
   746  00023A  D001               	bra	u156
   747  00023C                     u155:
   748  00023C  8C89               	bsf	137,6,c	;volatile
   749  00023E                     u156:
   750  00023E                     
   751                           ;lcd.c: 31:     LCDout((Byte & 0b11110000) >> 4);
   752  00023E  3829               	swapf	SendLCD@Byte^0,w,c
   753  000240  0B0F               	andlw	15
   754  000242  0B0F               	andlw	15
   755  000244  EC76  F000         	call	_LCDout
   756  000248                     
   757                           ;lcd.c: 32:     _delay((unsigned long)((10)*(8000000/4000000.0)));
   758  000248  0E06               	movlw	6
   759  00024A                     u287:
   760  00024A  2EE8               	decfsz	wreg,f,c
   761  00024C  D7FE               	bra	u287
   762  00024E  D000               	nop2	
   763  000250                     
   764                           ;lcd.c: 33:     LCDout(Byte & 0b00001111);
   765  000250  5029               	movf	SendLCD@Byte^0,w,c
   766  000252  0B0F               	andlw	15
   767  000254  EC76  F000         	call	_LCDout
   768                           
   769                           ;lcd.c: 35:     _delay((unsigned long)((50)*(8000000/4000000.0)));
   770  000258  0E21               	movlw	33
   771  00025A                     u297:
   772  00025A  2EE8               	decfsz	wreg,f,c
   773  00025C  D7FE               	bra	u297
   774  00025E  F000               	nop	
   775  000260  0012               	return		;funcret
   776  000262                     __end_of_SendLCD:
   777                           	opt callstack 0
   778                           
   779 ;; *************** function _LCDout *****************
   780 ;; Defined at:
   781 ;;		line 14 in file "lcd.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;  number          1    wreg     unsigned char 
   784 ;; Auto vars:     Size  Location     Type
   785 ;;  number          1    3[COMRAM] unsigned char 
   786 ;; Return value:  Size  Location     Type
   787 ;;                  1    wreg      void 
   788 ;; Registers used:
   789 ;;		wreg, status,2, status,0, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   795 ;;      Params:         0       0       0       0
   796 ;;      Locals:         1       0       0       0
   797 ;;      Temps:          1       0       0       0
   798 ;;      Totals:         2       0       0       0
   799 ;;Total ram usage:        2 bytes
   800 ;; Hardware stack levels used:    1
   801 ;; Hardware stack levels required when called:    2
   802 ;; This function calls:
   803 ;;		_E_TOG
   804 ;; This function is called by:
   805 ;;		_SendLCD
   806 ;;		_LCD_Init
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810                           	psect	text6
   811  0000EC                     __ptext6:
   812                           	opt callstack 0
   813  0000EC                     _LCDout:
   814                           	opt callstack 26
   815                           
   816                           ;incstack = 0
   817                           ;LCDout@number stored from wreg
   818  0000EC  6E27               	movwf	LCDout@number^0,c
   819  0000EE                     
   820                           ;lcd.c: 16:     LATCbits.LATC1 = number & 0b0001;
   821  0000EE  C027  F026         	movff	LCDout@number,??_LCDout
   822  0000F2  0E01               	movlw	1
   823  0000F4  1626               	andwf	??_LCDout^0,f,c
   824  0000F6  4626               	rlncf	??_LCDout^0,f,c
   825  0000F8  508B               	movf	139,w,c	;volatile
   826  0000FA  1826               	xorwf	??_LCDout^0,w,c
   827  0000FC  0BFD               	andlw	-3
   828  0000FE  1826               	xorwf	??_LCDout^0,w,c
   829  000100  6E8B               	movwf	139,c	;volatile
   830                           
   831                           ;lcd.c: 17:     LATCbits.LATC2 = (number & 0b0010) >> 1;
   832  000102  C027  F026         	movff	LCDout@number,??_LCDout
   833  000106  90D8               	bcf	status,0,c
   834  000108  3226               	rrcf	??_LCDout^0,f,c
   835  00010A  0E01               	movlw	1
   836  00010C  1626               	andwf	??_LCDout^0,f,c
   837  00010E  4626               	rlncf	??_LCDout^0,f,c
   838  000110  4626               	rlncf	??_LCDout^0,f,c
   839  000112  508B               	movf	139,w,c	;volatile
   840  000114  1826               	xorwf	??_LCDout^0,w,c
   841  000116  0BFB               	andlw	-5
   842  000118  1826               	xorwf	??_LCDout^0,w,c
   843  00011A  6E8B               	movwf	139,c	;volatile
   844                           
   845                           ;lcd.c: 18:     LATDbits.LATD0 = (number & 0b0100) >> 2;
   846  00011C  C027  F026         	movff	LCDout@number,??_LCDout
   847  000120  90D8               	bcf	status,0,c
   848  000122  3226               	rrcf	??_LCDout^0,f,c
   849  000124  90D8               	bcf	status,0,c
   850  000126  3226               	rrcf	??_LCDout^0,f,c
   851  000128  0E01               	movlw	1
   852  00012A  1626               	andwf	??_LCDout^0,f,c
   853  00012C  508C               	movf	140,w,c	;volatile
   854  00012E  1826               	xorwf	??_LCDout^0,w,c
   855  000130  0BFE               	andlw	-2
   856  000132  1826               	xorwf	??_LCDout^0,w,c
   857  000134  6E8C               	movwf	140,c	;volatile
   858                           
   859                           ;lcd.c: 19:     LATDbits.LATD1 = (number & 0b1000) >> 3;
   860  000136  C027  F026         	movff	LCDout@number,??_LCDout
   861  00013A  90D8               	bcf	status,0,c
   862  00013C  3226               	rrcf	??_LCDout^0,f,c
   863  00013E  90D8               	bcf	status,0,c
   864  000140  3226               	rrcf	??_LCDout^0,f,c
   865  000142  90D8               	bcf	status,0,c
   866  000144  3226               	rrcf	??_LCDout^0,f,c
   867  000146  0E01               	movlw	1
   868  000148  1626               	andwf	??_LCDout^0,f,c
   869  00014A  4626               	rlncf	??_LCDout^0,f,c
   870  00014C  508C               	movf	140,w,c	;volatile
   871  00014E  1826               	xorwf	??_LCDout^0,w,c
   872  000150  0BFD               	andlw	-3
   873  000152  1826               	xorwf	??_LCDout^0,w,c
   874  000154  6E8C               	movwf	140,c	;volatile
   875  000156                     
   876                           ;lcd.c: 20:     E_TOG();
   877  000156  EC51  F001         	call	_E_TOG	;wreg free
   878  00015A                     
   879                           ;lcd.c: 22:     _delay((unsigned long)((5)*(8000000/4000000.0)));
   880  00015A  0E03               	movlw	3
   881  00015C                     u307:
   882  00015C  2EE8               	decfsz	wreg,f,c
   883  00015E  D7FE               	bra	u307
   884  000160  F000               	nop	
   885  000162  0012               	return		;funcret
   886  000164                     __end_of_LCDout:
   887                           	opt callstack 0
   888                           
   889 ;; *************** function _E_TOG *****************
   890 ;; Defined at:
   891 ;;		line 4 in file "lcd.c"
   892 ;; Parameters:    Size  Location     Type
   893 ;;		None
   894 ;; Auto vars:     Size  Location     Type
   895 ;;		None
   896 ;; Return value:  Size  Location     Type
   897 ;;                  1    wreg      void 
   898 ;; Registers used:
   899 ;;		wreg
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   905 ;;      Params:         0       0       0       0
   906 ;;      Locals:         0       0       0       0
   907 ;;      Temps:          0       0       0       0
   908 ;;      Totals:         0       0       0       0
   909 ;;Total ram usage:        0 bytes
   910 ;; Hardware stack levels used:    1
   911 ;; Hardware stack levels required when called:    1
   912 ;; This function calls:
   913 ;;		Nothing
   914 ;; This function is called by:
   915 ;;		_LCDout
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919                           	psect	text7
   920  0002A2                     __ptext7:
   921                           	opt callstack 0
   922  0002A2                     _E_TOG:
   923                           	opt callstack 26
   924  0002A2                     
   925                           ;lcd.c: 8:     LATCbits.LATC0 = 1;
   926  0002A2  808B               	bsf	139,0,c	;volatile
   927  0002A4                     
   928                           ;lcd.c: 9:     _delay((unsigned long)((5)*(8000000/4000000.0)));
   929  0002A4  0E03               	movlw	3
   930  0002A6                     u317:
   931  0002A6  2EE8               	decfsz	wreg,f,c
   932  0002A8  D7FE               	bra	u317
   933  0002AA  F000               	nop	
   934  0002AC                     
   935                           ;lcd.c: 10:     LATCbits.LATC0 = 0;
   936  0002AC  908B               	bcf	139,0,c	;volatile
   937  0002AE  0012               	return		;funcret
   938  0002B0                     __end_of_E_TOG:
   939                           	opt callstack 0
   940                           
   941 ;; *************** function _InterruptHandlerHigh *****************
   942 ;; Defined at:
   943 ;;		line 12 in file "main.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;		None
   946 ;; Auto vars:     Size  Location     Type
   947 ;;		None
   948 ;; Return value:  Size  Location     Type
   949 ;;                  1    wreg      void 
   950 ;; Registers used:
   951 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   957 ;;      Params:         0       0       0       0
   958 ;;      Locals:         0       0       0       0
   959 ;;      Temps:          2       0       0       0
   960 ;;      Totals:         2       0       0       0
   961 ;;Total ram usage:        2 bytes
   962 ;; Hardware stack levels used:    1
   963 ;; This function calls:
   964 ;;		Nothing
   965 ;; This function is called by:
   966 ;;		Interrupt level 2
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	intcode
   971  000008                     __pintcode:
   972                           	opt callstack 0
   973  000008                     _InterruptHandlerHigh:
   974                           	opt callstack 26
   975                           
   976                           ;incstack = 0
   977  000008  822F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   978  00000A  CFD9 F024          	movff	fsr2l,??_InterruptHandlerHigh
   979  00000E  CFDA F025          	movff	fsr2h,??_InterruptHandlerHigh+1
   980  000012                     
   981                           ;main.c: 13:     if (PIR1bits.RCIF==1) {
   982  000012  AA9E               	btfss	158,5,c	;volatile
   983  000014  EF0E  F000         	goto	i2u13_41
   984  000018  EF10  F000         	goto	i2u13_40
   985  00001C                     i2u13_41:
   986  00001C  EF19  F000         	goto	i2l188
   987  000020                     i2u13_40:
   988  000020                     
   989                           ;main.c: 14:         A[reader]=RCREG;
   990  000020  0E02               	movlw	low _A
   991  000022  2401               	addwf	_reader^0,w,c	;volatile
   992  000024  6ED9               	movwf	fsr2l,c
   993  000026  6ADA               	clrf	fsr2h,c
   994  000028  0E00               	movlw	high _A
   995  00002A  22DA               	addwfc	fsr2h,f,c
   996  00002C  CFAE FFDF          	movff	4014,indf2	;volatile
   997  000030                     
   998                           ;main.c: 15:         reader++;
   999  000030  2A01               	incf	_reader^0,f,c	;volatile
  1000  000032                     i2l188:
  1001  000032  C025  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  1002  000036  C024  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  1003  00003A  922F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1004  00003C  0011               	retfie		f
  1005  00003E                     __end_of_InterruptHandlerHigh:
  1006                           	opt callstack 0
  1007  0000                     
  1008                           	psect	rparam
  1009  0000                     
  1010                           	psect	temp
  1011  00002F                     btemp:
  1012                           	opt callstack 0
  1013  00002F                     	ds	1
  1014  0000                     int$flags	set	btemp
  1015  0000                     wtemp8	set	btemp+1
  1016  0000                     ttemp5	set	btemp+1
  1017  0000                     ttemp6	set	btemp+4
  1018  0000                     ttemp7	set	btemp+8
  1019                           tosu	equ	0xFFF
  1020                           tosh	equ	0xFFE
  1021                           tosl	equ	0xFFD
  1022                           stkptr	equ	0xFFC
  1023                           pclatu	equ	0xFFB
  1024                           pclath	equ	0xFFA
  1025                           pcl	equ	0xFF9
  1026                           tblptru	equ	0xFF8
  1027                           tblptrh	equ	0xFF7
  1028                           tblptrl	equ	0xFF6
  1029                           tablat	equ	0xFF5
  1030                           prodh	equ	0xFF4
  1031                           prodl	equ	0xFF3
  1032                           indf0	equ	0xFEF
  1033                           postinc0	equ	0xFEE
  1034                           postdec0	equ	0xFED
  1035                           preinc0	equ	0xFEC
  1036                           plusw0	equ	0xFEB
  1037                           fsr0h	equ	0xFEA
  1038                           fsr0l	equ	0xFE9
  1039                           wreg	equ	0xFE8
  1040                           indf1	equ	0xFE7
  1041                           postinc1	equ	0xFE6
  1042                           postdec1	equ	0xFE5
  1043                           preinc1	equ	0xFE4
  1044                           plusw1	equ	0xFE3
  1045                           fsr1h	equ	0xFE2
  1046                           fsr1l	equ	0xFE1
  1047                           bsr	equ	0xFE0
  1048                           indf2	equ	0xFDF
  1049                           postinc2	equ	0xFDE
  1050                           postdec2	equ	0xFDD
  1051                           preinc2	equ	0xFDC
  1052                           plusw2	equ	0xFDB
  1053                           fsr2h	equ	0xFDA
  1054                           fsr2l	equ	0xFD9
  1055                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     11      47
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S356DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S356DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> A(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_LCD_String
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _LCD_Init->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    3444
                                              8 COMRAM     3     3      0
                           _LCD_Init
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _initSerial
 ---------------------------------------------------------------------------------
 (1) _initSerial                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0     832
                                              6 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           2     0      2     931
                                              6 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0     870
                                              6 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     810
                                              4 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               2     2      0      60
                                              2 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _InterruptHandlerHigh                                 2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _initSerial

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      B      2F       1       50.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2F       3        0.0%
DATA                 0      0      2F      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Nov 25 11:07:27 2019

                            _A 0002                             l20 0162                             l23 0260  
                           l31 0230                             l17 02AE                             l26 00EA  
                           l37 01FC                    ?_LCD_String 002A                            l146 02A0  
                          l193 0168                            l881 00EE                            l961 0296  
                          l875 02A2                            l883 0156                            l963 0298  
                          l877 02A4                            l885 015A                            l965 029A  
                          l957 028A                            l879 02AC                            l967 029C  
                          l959 028E                            l969 029E                            u207 022A  
                          u160 0210                            u217 01DE                            u161 020C  
                          u170 01FC                            u307 015C                            u155 023C  
                          u227 0060                            u171 01F8                            u156 023E  
                          u180 0176                            u317 02A6                            u237 0076  
                          u181 0172                            u247 0086                            u257 0094  
                          u267 00A2                            u277 00CC                            u197 01AC  
                          u287 024A                            u297 025A                            wreg 000FE8  
                         l1101 0250                           l1111 0084                           l1103 0042  
                         l1121 00D6                           l1113 008C                           l1105 005A  
                         l1123 00E0                           l1115 009A                           l1107 006A  
                         l1131 0228                           l1117 00A0                           l1109 0070  
                         l1141 01E4                           l1133 01C2                           l1125 0200  
                         l1119 00C6                           l1135 01C6                           l1127 0210  
                         l1151 0184                           l1143 0164                           l1137 01D8  
                         l1129 021E                           l1161 018C                           l1153 0186  
                         l1145 0176                           l1139 01DC                           l1163 0196  
                         l1155 0188                           l1147 017A                           l1165 01A2  
                         l1157 018A                           l1149 017E                           l1095 0234  
                         l1159 018C                           l1097 023E                           l1099 0248  
                         _LATB 000F8A                           _main 0164                           fsr2h 000FDA  
                         indf2 000FDF                           fsr2l 000FD9                           btemp 002F  
                         start 003E                   ___param_bank 000000                __end_of_SendLCD 0262  
              __end_of_SetLine 0232               __end_of_LCD_Init 00EC                          ?_main 0024  
                        _PDC0H 000F78                          _PDC1H 000F76                          _PDC0L 000F79  
                        _PDC1L 000F77                          i2l188 0032                          _RCREG 000FAE  
                        _E_TOG 02A2                          _SPBRG 000FAF                          _TXREG 000FAD  
                        tablat 000FF5                          ttemp5 0030                          ttemp6 0033  
                        ttemp7 0037                          status 000FD8                          wtemp8 0030  
          __size_of_LCD_String 003C                   _TurningSpeed 002E                __initialization 0262  
                 __end_of_main 01C2                 __CFG_OSC$IRCIO 000000               LCD_String@string 002A  
                       ??_main 002C                  __activetblptr 000000                         ?_E_TOG 0024  
                       i2l1065 0012                         i2l1067 0020                         i2l1069 0030  
                       _LCDout 00EC                    SendLCD@Byte 0029                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                    SendLCD@type 0028  
                    ??_SendLCD 0029                      ??_SetLine 002A                         _reader 0001  
                       clear_0 027A                         _motorL 001B                         _motorR 0012  
                 __pdataCOMRAM 002E                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                     __accesstop 0060        __end_of__initialization 0280  
                    ?_LCD_Init 0024                  ___rparam_used 000001                    SetLine@line 002A  
                __end_of_E_TOG 02B0                 __pcstackCOMRAM 0024                   ??_LCD_String 002C  
                      ??_E_TOG 0026  __size_of_InterruptHandlerHigh 0036                        ?_LCDout 0024  
                   ??_LCD_Init 002A             __end_of_LCD_String 01FE                        i2u13_40 0020  
                      i2u13_41 001C                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
              __size_of_LCDout 0078                        _SendLCD 0232                        __Hparam 0000  
                      _SetLine 01FE                        __Lparam 0000                     _initSerial 028A  
                      __pcinit 0262                        __ramtop 0300                        __ptext0 0164  
                      __ptext1 028A                        __ptext2 01FE                        __ptext3 01C2  
                      __ptext4 0042                        __ptext5 0232                        __ptext6 00EC  
                      __ptext7 02A2                   LCDout@number 0027           end_of_initialization 0280  
                    _RCSTAbits 000FAB                        postinc0 000FEE                      _TRISAbits 000F92  
                    _TRISBbits 000F93                      _TRISCbits 000F94                      _TRISDbits 000F95  
               __end_of_LCDout 0164                      _TXSTAbits 000FAC              __size_of_LCD_Init 00AA  
                  ?_initSerial 0024                    _BAUDCONbits 000FAA                  __pidataCOMRAM 02B0  
          start_initialization 0262                       ??_LCDout 0026   __end_of_InterruptHandlerHigh 003E  
                  __pbssCOMRAM 0001            __size_of_initSerial 0018                       ?_SendLCD 0028  
                     ?_SetLine 0024                      __pintcode 0008                 __size_of_E_TOG 000E  
                     _LCD_Init 0042                       _LATAbits 000F89                       _LATBbits 000F8A  
                     _LATCbits 000F8B                       _LATDbits 000F8C                       _PIE1bits 000F9D  
                     _PIR1bits 000F9E                       _RCONbits 000FD0           _InterruptHandlerHigh 0008  
                     __Hrparam 0000               __size_of_SendLCD 0030                       __Lrparam 0000  
             __size_of_SetLine 0034                   ??_initSerial 0026          ?_InterruptHandlerHigh 0024  
           __end_of_initSerial 02A2                  __size_of_main 005E                       int$flags 002F  
                   _LCD_String 01C2                     _INTCONbits 000FF2                       intlevel2 0000  
                   _OSCCONbits 000FD3         ??_InterruptHandlerHigh 0024  
