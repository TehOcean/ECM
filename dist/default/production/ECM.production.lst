

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Dec 02 10:53:42 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    27  0000                     
    28                           ; Version 2.10
    29                           ; Generated 31/07/2019 GMT
    30                           ; 
    31                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4331 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	idataCOMRAM
    64  000682                     __pidataCOMRAM:
    65                           	opt callstack 0
    66                           
    67                           ;initializer for _TurningSpeed
    68  000682  3C                 	db	60
    69  0000                     _TMR1	set	4046
    70  0000                     _LATD	set	3980
    71  0000                     _LATC	set	3979
    72  0000                     _T1CONbits	set	4045
    73  0000                     _INTCON2bits	set	4081
    74  0000                     _CCP2CONbits	set	4026
    75  0000                     _CCP1CONbits	set	4029
    76  0000                     _PIE1bits	set	3997
    77  0000                     _RCONbits	set	4048
    78  0000                     _OSCCONbits	set	4051
    79  0000                     _OSCCON	set	4051
    80  0000                     _CCPR2H	set	4028
    81  0000                     _CCPR2L	set	4027
    82  0000                     _PIR2bits	set	4001
    83  0000                     _CCPR1H	set	4031
    84  0000                     _CCPR1L	set	4030
    85  0000                     _INTCONbits	set	4082
    86  0000                     _RCSTAbits	set	4011
    87  0000                     _TXSTAbits	set	4012
    88  0000                     _BAUDCONbits	set	4010
    89  0000                     _SPBRGH	set	4016
    90  0000                     _SPBRG	set	4015
    91  0000                     _TXREG	set	4013
    92  0000                     _RCREG	set	4014
    93  0000                     _PIR1bits	set	3998
    94  0000                     _LATB	set	3978
    95  0000                     _PTPERH	set	3962
    96  0000                     _PTPERL	set	3963
    97  0000                     _PWMCON1	set	3950
    98  0000                     _PWMCON0	set	3951
    99  0000                     _PTCON1	set	3966
   100  0000                     _PTCON0	set	3967
   101  0000                     _LATBbits	set	3978
   102  0000                     _TRISBbits	set	3987
   103  0000                     _TRISDbits	set	3989
   104  0000                     _TRISCbits	set	3988
   105  0000                     _TRISAbits	set	3986
   106  0000                     _LATAbits	set	3977
   107  0000                     _LATDbits	set	3980
   108  0000                     _LATCbits	set	3979
   109  0000                     _PDC1H	set	3958
   110  0000                     _PDC1L	set	3959
   111  0000                     _PDC0H	set	3960
   112  0000                     _PDC0L	set	3961
   113                           
   114                           ; #config settings
   115  0000                     
   116                           	psect	cinit
   117  000626                     __pcinit:
   118                           	opt callstack 0
   119  000626                     start_initialization:
   120                           	opt callstack 0
   121  000626                     __initialization:
   122                           	opt callstack 0
   123                           
   124                           ; Initialize objects allocated to COMRAM (1 bytes)
   125                           ; load TBLPTR registers with __pidataCOMRAM
   126  000626  0E82               	movlw	low __pidataCOMRAM
   127  000628  6EF6               	movwf	tblptrl,c
   128  00062A  0E06               	movlw	high __pidataCOMRAM
   129  00062C  6EF7               	movwf	tblptrh,c
   130  00062E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   131  000630  6EF8               	movwf	tblptru,c
   132  000632  0009               	tblrd		*+	;fetch initializer
   133  000634  CFF5 F03C          	movff	tablat,__pdataCOMRAM
   134                           
   135                           ; Clear objects allocated to COMRAM (22 bytes)
   136  000638  EE00  F026         	lfsr	0,__pbssCOMRAM
   137  00063C  0E16               	movlw	22
   138  00063E                     clear_0:
   139  00063E  6AEE               	clrf	postinc0,c
   140  000640  06E8               	decf	wreg,f,c
   141  000642  E1FD               	bnz	clear_0
   142  000644                     end_of_initialization:
   143                           	opt callstack 0
   144  000644                     __end_of__initialization:
   145                           	opt callstack 0
   146  000644  903D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   147  000646  923D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   148  000648  0100               	movlb	0
   149  00064A  EF38  F001         	goto	_main	;jump to C main() function
   150                           
   151                           	psect	bssCOMRAM
   152  000026                     __pbssCOMRAM:
   153                           	opt callstack 0
   154  000026                     _left:
   155                           	opt callstack 0
   156  000026                     	ds	2
   157  000028                     _right:
   158                           	opt callstack 0
   159  000028                     	ds	2
   160  00002A                     _motorR:
   161                           	opt callstack 0
   162  00002A                     	ds	9
   163  000033                     _motorL:
   164                           	opt callstack 0
   165  000033                     	ds	9
   166                           
   167                           	psect	dataCOMRAM
   168  00003C                     __pdataCOMRAM:
   169                           	opt callstack 0
   170  00003C                     _TurningSpeed:
   171                           	opt callstack 0
   172  00003C                     	ds	1
   173                           
   174                           	psect	cstackCOMRAM
   175  000001                     __pcstackCOMRAM:
   176                           	opt callstack 0
   177  000001                     ??_LCDout:
   178  000001                     LEDout@number:
   179                           	opt callstack 0
   180                           
   181                           ; 2 bytes @ 0x0
   182  000001                     	ds	1
   183  000002                     LCDout@number:
   184                           	opt callstack 0
   185                           
   186                           ; 1 bytes @ 0x1
   187  000002                     	ds	1
   188  000003                     ??_LEDout:
   189  000003                     SendLCD@type:
   190                           	opt callstack 0
   191                           
   192                           ; 1 bytes @ 0x2
   193  000003                     	ds	1
   194  000004                     SendLCD@Byte:
   195                           	opt callstack 0
   196                           
   197                           ; 1 bytes @ 0x3
   198  000004                     	ds	1
   199  000005                     SetLine@line:
   200                           	opt callstack 0
   201                           
   202                           ; 1 bytes @ 0x4
   203  000005                     	ds	1
   204  000006                     ??_InterruptHandlerLow:
   205                           
   206                           ; 1 bytes @ 0x5
   207  000006                     	ds	5
   208  00000B                     ?___wmul:
   209                           	opt callstack 0
   210  00000B                     ___wmul@multiplier:
   211                           	opt callstack 0
   212                           
   213                           ; 2 bytes @ 0xA
   214  00000B                     	ds	2
   215  00000D                     ___wmul@multiplicand:
   216                           	opt callstack 0
   217                           
   218                           ; 2 bytes @ 0xC
   219  00000D                     	ds	2
   220  00000F                     ___wmul@product:
   221                           	opt callstack 0
   222                           
   223                           ; 2 bytes @ 0xE
   224  00000F                     	ds	2
   225  000011                     ?___awdiv:
   226                           	opt callstack 0
   227  000011                     ___awdiv@dividend:
   228                           	opt callstack 0
   229                           
   230                           ; 2 bytes @ 0x10
   231  000011                     	ds	2
   232  000013                     ___awdiv@divisor:
   233                           	opt callstack 0
   234                           
   235                           ; 2 bytes @ 0x12
   236  000013                     	ds	2
   237  000015                     ___awdiv@counter:
   238                           	opt callstack 0
   239                           
   240                           ; 1 bytes @ 0x14
   241  000015                     	ds	1
   242  000016                     ___awdiv@sign:
   243                           	opt callstack 0
   244                           
   245                           ; 1 bytes @ 0x15
   246  000016                     	ds	1
   247  000017                     ___awdiv@quotient:
   248                           	opt callstack 0
   249                           
   250                           ; 2 bytes @ 0x16
   251  000017                     	ds	2
   252  000019                     setMotorPWM@m:
   253                           	opt callstack 0
   254                           
   255                           ; 2 bytes @ 0x18
   256  000019                     	ds	2
   257  00001B                     ??_setMotorPWM:
   258                           
   259                           ; 1 bytes @ 0x1A
   260  00001B                     	ds	3
   261  00001E                     setMotorPWM@PWMduty:
   262                           	opt callstack 0
   263                           
   264                           ; 2 bytes @ 0x1D
   265  00001E                     	ds	2
   266  000020                     turnLeft@m_L:
   267                           	opt callstack 0
   268  000020                     turnRight@m_L:
   269                           	opt callstack 0
   270  000020                     fullSpeedAhead@m_L:
   271                           	opt callstack 0
   272                           
   273                           ; 2 bytes @ 0x1F
   274  000020                     	ds	2
   275  000022                     turnLeft@m_R:
   276                           	opt callstack 0
   277  000022                     turnRight@m_R:
   278                           	opt callstack 0
   279  000022                     fullSpeedAhead@m_R:
   280                           	opt callstack 0
   281                           
   282                           ; 2 bytes @ 0x21
   283  000022                     	ds	2
   284  000024                     ??_main:
   285                           
   286                           ; 1 bytes @ 0x23
   287  000024                     	ds	2
   288                           
   289 ;;
   290 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   291 ;;
   292 ;; *************** function _main *****************
   293 ;; Defined at:
   294 ;;		line 44 in file "main.c"
   295 ;; Parameters:    Size  Location     Type
   296 ;;		None
   297 ;; Auto vars:     Size  Location     Type
   298 ;;		None
   299 ;; Return value:  Size  Location     Type
   300 ;;                  1    wreg      void 
   301 ;; Registers used:
   302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   303 ;; Tracked objects:
   304 ;;		On entry : 0/0
   305 ;;		On exit  : 0/0
   306 ;;		Unchanged: 0/0
   307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   308 ;;      Params:         0       0       0       0
   309 ;;      Locals:         0       0       0       0
   310 ;;      Temps:          2       0       0       0
   311 ;;      Totals:         2       0       0       0
   312 ;;Total ram usage:        2 bytes
   313 ;; Hardware stack levels required when called:    8
   314 ;; This function calls:
   315 ;;		_fullSpeedAhead
   316 ;;		_initMotor
   317 ;;		_turnLeft
   318 ;;		_turnRight
   319 ;; This function is called by:
   320 ;;		Startup code after reset
   321 ;; This function uses a non-reentrant model
   322 ;;
   323                           
   324                           	psect	text0
   325  000270                     __ptext0:
   326                           	opt callstack 0
   327  000270                     _main:
   328                           	opt callstack 23
   329  000270                     
   330                           ;main.c: 45:     OSCCON = 0x72;
   331  000270  0E72               	movlw	114
   332  000272  6ED3               	movwf	211,c	;volatile
   333  000274                     l220:
   334  000274  A4D3               	btfss	211,2,c	;volatile
   335  000276  EF3F  F001         	goto	u431
   336  00027A  EF41  F001         	goto	u430
   337  00027E                     u431:
   338  00027E  EF3A  F001         	goto	l220
   339  000282                     u430:
   340  000282                     
   341                           ;main.c: 50:     initMotor();
   342  000282  EC03  F002         	call	_initMotor	;wreg free
   343  000286                     
   344                           ;main.c: 52:     INTCONbits.GIEH = 1;
   345  000286  8EF2               	bsf	242,7,c	;volatile
   346  000288                     
   347                           ;main.c: 53:     INTCONbits.GIEL = 1;
   348  000288  8CF2               	bsf	242,6,c	;volatile
   349  00028A                     
   350                           ;main.c: 54:     RCONbits.IPEN = 1;
   351  00028A  8ED0               	bsf	208,7,c	;volatile
   352  00028C                     
   353                           ;main.c: 55:     PIE1bits.RCIE = 1;
   354  00028C  8A9D               	bsf	157,5,c	;volatile
   355  00028E                     
   356                           ;main.c: 57:     TRISCbits.RC1 = 1;
   357  00028E  8294               	bsf	148,1,c	;volatile
   358  000290                     
   359                           ;main.c: 58:     TRISCbits.RC2 = 1;
   360  000290  8494               	bsf	148,2,c	;volatile
   361  000292                     
   362                           ;main.c: 59:     TRISCbits.RC3 = 1;
   363  000292  8694               	bsf	148,3,c	;volatile
   364  000294                     
   365                           ;main.c: 60:     CCP1CONbits.CCP1M3 = 0;
   366  000294  96BD               	bcf	189,3,c	;volatile
   367  000296                     
   368                           ;main.c: 61:     CCP1CONbits.CCP1M2 = 1;
   369  000296  84BD               	bsf	189,2,c	;volatile
   370  000298                     
   371                           ;main.c: 62:     CCP1CONbits.CCP1M1 = 0;
   372  000298  92BD               	bcf	189,1,c	;volatile
   373  00029A                     
   374                           ;main.c: 63:     CCP1CONbits.CCP1M0 = 1;
   375  00029A  80BD               	bsf	189,0,c	;volatile
   376  00029C                     
   377                           ;main.c: 65:     CCP2CONbits.CCP2M3 = 0;
   378  00029C  96BA               	bcf	186,3,c	;volatile
   379  00029E                     
   380                           ;main.c: 66:     CCP2CONbits.CCP2M2 = 1;
   381  00029E  84BA               	bsf	186,2,c	;volatile
   382  0002A0                     
   383                           ;main.c: 67:     CCP2CONbits.CCP2M1 = 0;
   384  0002A0  92BA               	bcf	186,1,c	;volatile
   385  0002A2                     
   386                           ;main.c: 68:     CCP2CONbits.CCP2M0 = 1;
   387  0002A2  80BA               	bsf	186,0,c	;volatile
   388  0002A4                     
   389                           ;main.c: 71:     INTCONbits.INT0IE = 1;
   390  0002A4  88F2               	bsf	242,4,c	;volatile
   391  0002A6                     
   392                           ;main.c: 72:     INTCON2bits.INTEDG0 = 0;
   393  0002A6  9CF1               	bcf	241,6,c	;volatile
   394  0002A8                     
   395                           ;main.c: 74:     T1CONbits.TMR1ON = 1;
   396  0002A8  80CD               	bsf	205,0,c	;volatile
   397  0002AA                     
   398                           ;main.c: 75:     T1CONbits.RD16 = 1;
   399  0002AA  8ECD               	bsf	205,7,c	;volatile
   400  0002AC                     
   401                           ;main.c: 76:     T1CONbits.TMR1CS = 0;
   402  0002AC  92CD               	bcf	205,1,c	;volatile
   403  0002AE                     
   404                           ;main.c: 77:     T1CONbits.T1OSCEN = 0;
   405  0002AE  96CD               	bcf	205,3,c	;volatile
   406  0002B0                     
   407                           ;main.c: 78:     T1CONbits.T1CKPS0 = 1;
   408  0002B0  88CD               	bsf	205,4,c	;volatile
   409  0002B2                     
   410                           ;main.c: 79:     T1CONbits.T1CKPS1 = 1;
   411  0002B2  8ACD               	bsf	205,5,c	;volatile
   412  0002B4                     
   413                           ;main.c: 80:     T1CONbits.T1RUN = 1;
   414  0002B4  8CCD               	bsf	205,6,c	;volatile
   415  0002B6                     l1527:
   416                           
   417                           ;main.c: 90:                 if ((left - right) > 100){
   418  0002B6  5028               	movf	_right^0,w,c	;volatile
   419  0002B8  5C26               	subwf	_left^0,w,c	;volatile
   420  0002BA  6E24               	movwf	??_main^0,c
   421  0002BC  5029               	movf	(_right+1)^0,w,c	;volatile
   422  0002BE  5827               	subwfb	(_left+1)^0,w,c	;volatile
   423  0002C0  6E25               	movwf	(??_main+1)^0,c
   424  0002C2  5025               	movf	(??_main+1)^0,w,c
   425  0002C4  E109               	bnz	u440
   426  0002C6  0E65               	movlw	101
   427  0002C8  5C24               	subwf	??_main^0,w,c
   428  0002CA  A0D8               	btfss	status,0,c
   429  0002CC  EF6A  F001         	goto	u441
   430  0002D0  EF6C  F001         	goto	u440
   431  0002D4                     u441:
   432  0002D4  EF76  F001         	goto	l1531
   433  0002D8                     u440:
   434  0002D8                     
   435                           ;main.c: 91:                     turnLeft(&motorL, &motorR);
   436  0002D8  0E33               	movlw	low _motorL
   437  0002DA  6E20               	movwf	turnLeft@m_L^0,c
   438  0002DC  0E00               	movlw	high _motorL
   439  0002DE  6E21               	movwf	(turnLeft@m_L+1)^0,c
   440  0002E0  0E2A               	movlw	low _motorR
   441  0002E2  6E22               	movwf	turnLeft@m_R^0,c
   442  0002E4  0E00               	movlw	high _motorR
   443  0002E6  6E23               	movwf	(turnLeft@m_R+1)^0,c
   444  0002E8  ECE9  F002         	call	_turnLeft	;wreg free
   445  0002EC                     l1531:
   446                           
   447                           ;main.c: 94:                 if ((left - right) < 100) {
   448  0002EC  5028               	movf	_right^0,w,c	;volatile
   449  0002EE  5C26               	subwf	_left^0,w,c	;volatile
   450  0002F0  6E24               	movwf	??_main^0,c
   451  0002F2  5029               	movf	(_right+1)^0,w,c	;volatile
   452  0002F4  5827               	subwfb	(_left+1)^0,w,c	;volatile
   453  0002F6  6E25               	movwf	(??_main+1)^0,c
   454  0002F8  5025               	movf	(??_main+1)^0,w,c
   455  0002FA  E107               	bnz	u451
   456  0002FC  0E64               	movlw	100
   457  0002FE  5C24               	subwf	??_main^0,w,c
   458  000300  B0D8               	btfsc	status,0,c
   459  000302  EF85  F001         	goto	u451
   460  000306  EF87  F001         	goto	u450
   461  00030A                     u451:
   462  00030A  EF93  F001         	goto	l1535
   463  00030E                     u450:
   464  00030E                     
   465                           ;main.c: 95:                     turnRight(&motorL, &motorR);
   466  00030E  0E33               	movlw	low _motorL
   467  000310  6E20               	movwf	turnRight@m_L^0,c
   468  000312  0E00               	movlw	high _motorL
   469  000314  6E21               	movwf	(turnRight@m_L+1)^0,c
   470  000316  0E2A               	movlw	low _motorR
   471  000318  6E22               	movwf	turnRight@m_R^0,c
   472  00031A  0E00               	movlw	high _motorR
   473  00031C  6E23               	movwf	(turnRight@m_R+1)^0,c
   474  00031E  ECD4  F002         	call	_turnRight	;wreg free
   475                           
   476                           ;main.c: 96:                 }
   477  000322  EF5B  F001         	goto	l1527
   478  000326                     l1535:
   479                           
   480                           ;main.c: 98:                     fullSpeedAhead(&motorL, &motorR);
   481  000326  0E33               	movlw	low _motorL
   482  000328  6E20               	movwf	fullSpeedAhead@m_L^0,c
   483  00032A  0E00               	movlw	high _motorL
   484  00032C  6E21               	movwf	(fullSpeedAhead@m_L+1)^0,c
   485  00032E  0E2A               	movlw	low _motorR
   486  000330  6E22               	movwf	fullSpeedAhead@m_R^0,c
   487  000332  0E00               	movlw	high _motorR
   488  000334  6E23               	movwf	(fullSpeedAhead@m_R+1)^0,c
   489  000336  ECFE  F002         	call	_fullSpeedAhead	;wreg free
   490  00033A  EF5B  F001         	goto	l1527
   491  00033E  EF69  F000         	goto	start
   492  000342                     __end_of_main:
   493                           	opt callstack 0
   494                           
   495 ;; *************** function _turnRight *****************
   496 ;; Defined at:
   497 ;;		line 80 in file "motor.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;  m_L             2   31[COMRAM] PTR struct DC_motor
   500 ;;		 -> motorL(9), 
   501 ;;  m_R             2   33[COMRAM] PTR struct DC_motor
   502 ;;		 -> motorR(9), 
   503 ;; Auto vars:     Size  Location     Type
   504 ;;		None
   505 ;; Return value:  Size  Location     Type
   506 ;;                  1    wreg      void 
   507 ;; Registers used:
   508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   509 ;; Tracked objects:
   510 ;;		On entry : 0/0
   511 ;;		On exit  : 0/0
   512 ;;		Unchanged: 0/0
   513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   514 ;;      Params:         4       0       0       0
   515 ;;      Locals:         0       0       0       0
   516 ;;      Temps:          0       0       0       0
   517 ;;      Totals:         4       0       0       0
   518 ;;Total ram usage:        4 bytes
   519 ;; Hardware stack levels used:    1
   520 ;; Hardware stack levels required when called:    7
   521 ;; This function calls:
   522 ;;		_setMotorPWM
   523 ;; This function is called by:
   524 ;;		_main
   525 ;; This function uses a non-reentrant model
   526 ;;
   527                           
   528                           	psect	text1
   529  0005A8                     __ptext1:
   530                           	opt callstack 0
   531  0005A8                     _turnRight:
   532                           	opt callstack 23
   533  0005A8                     
   534                           ;motor.c: 81:     motorR.direction = 1;
   535  0005A8  0E01               	movlw	1
   536  0005AA  6E2B               	movwf	(_motorR+1)^0,c	;volatile
   537                           
   538                           ;motor.c: 82:     motorL.direction = 0;
   539  0005AC  0E00               	movlw	0
   540  0005AE  6E34               	movwf	(_motorL+1)^0,c	;volatile
   541  0005B0                     
   542                           ;motor.c: 83:     motorR.power = TurningSpeed;
   543  0005B0  C03C  F02A         	movff	_TurningSpeed,_motorR	;volatile
   544  0005B4                     
   545                           ;motor.c: 84:     motorL.power = TurningSpeed;
   546  0005B4  C03C  F033         	movff	_TurningSpeed,_motorL	;volatile
   547  0005B8                     
   548                           ;motor.c: 85:     setMotorPWM(&motorR);
   549  0005B8  0E2A               	movlw	low _motorR
   550  0005BA  6E19               	movwf	setMotorPWM@m^0,c
   551  0005BC  0E00               	movlw	high _motorR
   552  0005BE  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   553  0005C0  EC6B  F000         	call	_setMotorPWM	;wreg free
   554  0005C4                     
   555                           ;motor.c: 86:     setMotorPWM(&motorL);
   556  0005C4  0E33               	movlw	low _motorL
   557  0005C6  6E19               	movwf	setMotorPWM@m^0,c
   558  0005C8  0E00               	movlw	high _motorL
   559  0005CA  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   560  0005CC  EC6B  F000         	call	_setMotorPWM	;wreg free
   561  0005D0  0012               	return		;funcret
   562  0005D2                     __end_of_turnRight:
   563                           	opt callstack 0
   564                           
   565 ;; *************** function _turnLeft *****************
   566 ;; Defined at:
   567 ;;		line 70 in file "motor.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;  m_L             2   31[COMRAM] PTR struct DC_motor
   570 ;;		 -> motorL(9), 
   571 ;;  m_R             2   33[COMRAM] PTR struct DC_motor
   572 ;;		 -> motorR(9), 
   573 ;; Auto vars:     Size  Location     Type
   574 ;;		None
   575 ;; Return value:  Size  Location     Type
   576 ;;                  1    wreg      void 
   577 ;; Registers used:
   578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   579 ;; Tracked objects:
   580 ;;		On entry : 0/0
   581 ;;		On exit  : 0/0
   582 ;;		Unchanged: 0/0
   583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   584 ;;      Params:         4       0       0       0
   585 ;;      Locals:         0       0       0       0
   586 ;;      Temps:          0       0       0       0
   587 ;;      Totals:         4       0       0       0
   588 ;;Total ram usage:        4 bytes
   589 ;; Hardware stack levels used:    1
   590 ;; Hardware stack levels required when called:    7
   591 ;; This function calls:
   592 ;;		_setMotorPWM
   593 ;; This function is called by:
   594 ;;		_main
   595 ;; This function uses a non-reentrant model
   596 ;;
   597                           
   598                           	psect	text2
   599  0005D2                     __ptext2:
   600                           	opt callstack 0
   601  0005D2                     _turnLeft:
   602                           	opt callstack 23
   603  0005D2                     
   604                           ;motor.c: 71:     motorL.direction = 1;
   605  0005D2  0E01               	movlw	1
   606  0005D4  6E34               	movwf	(_motorL+1)^0,c	;volatile
   607                           
   608                           ;motor.c: 72:     motorR.direction = 0;
   609  0005D6  0E00               	movlw	0
   610  0005D8  6E2B               	movwf	(_motorR+1)^0,c	;volatile
   611  0005DA                     
   612                           ;motor.c: 73:     motorL.power = TurningSpeed;
   613  0005DA  C03C  F033         	movff	_TurningSpeed,_motorL	;volatile
   614  0005DE                     
   615                           ;motor.c: 74:     motorR.power = TurningSpeed;
   616  0005DE  C03C  F02A         	movff	_TurningSpeed,_motorR	;volatile
   617  0005E2                     
   618                           ;motor.c: 75:     setMotorPWM(&motorR);
   619  0005E2  0E2A               	movlw	low _motorR
   620  0005E4  6E19               	movwf	setMotorPWM@m^0,c
   621  0005E6  0E00               	movlw	high _motorR
   622  0005E8  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   623  0005EA  EC6B  F000         	call	_setMotorPWM	;wreg free
   624  0005EE                     
   625                           ;motor.c: 76:     setMotorPWM(&motorL);
   626  0005EE  0E33               	movlw	low _motorL
   627  0005F0  6E19               	movwf	setMotorPWM@m^0,c
   628  0005F2  0E00               	movlw	high _motorL
   629  0005F4  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   630  0005F6  EC6B  F000         	call	_setMotorPWM	;wreg free
   631  0005FA  0012               	return		;funcret
   632  0005FC                     __end_of_turnLeft:
   633                           	opt callstack 0
   634                           
   635 ;; *************** function _initMotor *****************
   636 ;; Defined at:
   637 ;;		line 4 in file "motor.c"
   638 ;; Parameters:    Size  Location     Type
   639 ;;		None
   640 ;; Auto vars:     Size  Location     Type
   641 ;;  PWMcycle        2    0        int 
   642 ;; Return value:  Size  Location     Type
   643 ;;                  1    wreg      void 
   644 ;; Registers used:
   645 ;;		wreg, status,2, status,0
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   651 ;;      Params:         0       0       0       0
   652 ;;      Locals:         2       0       0       0
   653 ;;      Temps:          0       0       0       0
   654 ;;      Totals:         2       0       0       0
   655 ;;Total ram usage:        2 bytes
   656 ;; Hardware stack levels used:    1
   657 ;; Hardware stack levels required when called:    5
   658 ;; This function calls:
   659 ;;		Nothing
   660 ;; This function is called by:
   661 ;;		_main
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           	psect	text3
   666  000406                     __ptext3:
   667                           	opt callstack 0
   668  000406                     _initMotor:
   669                           	opt callstack 25
   670  000406                     
   671                           ;motor.c: 6:     TRISBbits.RB0 = 0;
   672  000406  9093               	bcf	147,0,c	;volatile
   673  000408                     
   674                           ;motor.c: 7:     TRISBbits.RB1 = 0;
   675  000408  9293               	bcf	147,1,c	;volatile
   676  00040A                     
   677                           ;motor.c: 8:     TRISBbits.RB2 = 0;
   678  00040A  9493               	bcf	147,2,c	;volatile
   679  00040C                     
   680                           ;motor.c: 9:     TRISBbits.RB3 = 0;
   681  00040C  9693               	bcf	147,3,c	;volatile
   682  00040E                     
   683                           ;motor.c: 10:     LATBbits.LATB0 = 0;
   684  00040E  908A               	bcf	138,0,c	;volatile
   685  000410                     
   686                           ;motor.c: 11:     LATBbits.LATB1 = 0;
   687  000410  928A               	bcf	138,1,c	;volatile
   688  000412                     
   689                           ;motor.c: 12:     LATBbits.LATB2 = 0;
   690  000412  948A               	bcf	138,2,c	;volatile
   691  000414                     
   692                           ;motor.c: 13:     LATBbits.LATB3 = 0;
   693  000414  968A               	bcf	138,3,c	;volatile
   694                           
   695                           ;motor.c: 14:     PTCON0 = 0b00000000;
   696  000416  0E00               	movlw	0
   697  000418  6E7F               	movwf	127,c	;volatile
   698                           
   699                           ;motor.c: 15:     PTCON1 = 0b10000000;
   700  00041A  0E80               	movlw	128
   701  00041C  6E7E               	movwf	126,c	;volatile
   702                           
   703                           ;motor.c: 16:     PWMCON0 = 0b01101111;
   704  00041E  0E6F               	movlw	111
   705  000420  6E6F               	movwf	111,c	;volatile
   706                           
   707                           ;motor.c: 17:     PWMCON1 = 0x00;
   708  000422  0E00               	movlw	0
   709  000424  6E6E               	movwf	110,c	;volatile
   710                           
   711                           ;motor.c: 18:     PTPERL = 0b11000111;
   712  000426  0EC7               	movlw	199
   713  000428  6E7B               	movwf	123,c	;volatile
   714                           
   715                           ;motor.c: 19:     PTPERH = 0b00000000;
   716  00042A  0E00               	movlw	0
   717  00042C  6E7A               	movwf	122,c	;volatile
   718                           
   719                           ;motor.c: 20:     PDC0L = 0b00000000;
   720  00042E  0E00               	movlw	0
   721  000430  6E79               	movwf	121,c	;volatile
   722                           
   723                           ;motor.c: 21:     PDC0H = 0b00000000;
   724  000432  0E00               	movlw	0
   725  000434  6E78               	movwf	120,c	;volatile
   726                           
   727                           ;motor.c: 22:     PDC1L = 0b00000000;
   728  000436  0E00               	movlw	0
   729  000438  6E77               	movwf	119,c	;volatile
   730                           
   731                           ;motor.c: 23:     PDC1H = 0b00000000;
   732  00043A  0E00               	movlw	0
   733  00043C  6E76               	movwf	118,c	;volatile
   734                           
   735                           ;motor.c: 25:     motorL.power = 0;
   736  00043E  0E00               	movlw	0
   737  000440  6E33               	movwf	_motorL^0,c	;volatile
   738                           
   739                           ;motor.c: 26:     motorL.direction = 1;
   740  000442  0E01               	movlw	1
   741  000444  6E34               	movwf	(_motorL+1)^0,c	;volatile
   742  000446                     
   743                           ;motor.c: 27:     motorL.dutyLowByte = (unsigned char *) (&PDC0L);
   744  000446  0E79               	movlw	121
   745  000448  6E35               	movwf	(_motorL+2)^0,c	;volatile
   746  00044A  0E0F               	movlw	15
   747  00044C  6E36               	movwf	(_motorL+3)^0,c	;volatile
   748  00044E                     
   749                           ;motor.c: 28:     motorL.dutyHighByte = (unsigned char *) (&PDC0H);
   750  00044E  0E78               	movlw	120
   751  000450  6E37               	movwf	(_motorL+4)^0,c	;volatile
   752  000452  0E0F               	movlw	15
   753  000454  6E38               	movwf	(_motorL+5)^0,c	;volatile
   754                           
   755                           ;motor.c: 29:     motorL.dir_pin = 0;
   756  000456  0E00               	movlw	0
   757  000458  6E39               	movwf	(_motorL+6)^0,c	;volatile
   758  00045A                     
   759                           ;motor.c: 30:     motorL.PWMperiod = PWMcycle;
   760  00045A  0E00               	movlw	0
   761  00045C  6E3B               	movwf	(_motorL+8)^0,c	;volatile
   762  00045E  0EC7               	movlw	199
   763  000460  6E3A               	movwf	(_motorL+7)^0,c	;volatile
   764                           
   765                           ;motor.c: 33:     motorR.power = 0;
   766  000462  0E00               	movlw	0
   767  000464  6E2A               	movwf	_motorR^0,c	;volatile
   768                           
   769                           ;motor.c: 34:     motorR.direction = 1;
   770  000466  0E01               	movlw	1
   771  000468  6E2B               	movwf	(_motorR+1)^0,c	;volatile
   772  00046A                     
   773                           ;motor.c: 35:     motorR.dutyLowByte = (unsigned char *) (&PDC1L);
   774  00046A  0E77               	movlw	119
   775  00046C  6E2C               	movwf	(_motorR+2)^0,c	;volatile
   776  00046E  0E0F               	movlw	15
   777  000470  6E2D               	movwf	(_motorR+3)^0,c	;volatile
   778  000472                     
   779                           ;motor.c: 36:     motorR.dutyHighByte = (unsigned char *) (&PDC1H);
   780  000472  0E76               	movlw	118
   781  000474  6E2E               	movwf	(_motorR+4)^0,c	;volatile
   782  000476  0E0F               	movlw	15
   783  000478  6E2F               	movwf	(_motorR+5)^0,c	;volatile
   784                           
   785                           ;motor.c: 37:     motorR.dir_pin = 2;
   786  00047A  0E02               	movlw	2
   787  00047C  6E30               	movwf	(_motorR+6)^0,c	;volatile
   788  00047E                     
   789                           ;motor.c: 38:     motorR.PWMperiod = PWMcycle;
   790  00047E  0E00               	movlw	0
   791  000480  6E32               	movwf	(_motorR+8)^0,c	;volatile
   792  000482  0EC7               	movlw	199
   793  000484  6E31               	movwf	(_motorR+7)^0,c	;volatile
   794  000486  0012               	return		;funcret
   795  000488                     __end_of_initMotor:
   796                           	opt callstack 0
   797                           
   798 ;; *************** function _fullSpeedAhead *****************
   799 ;; Defined at:
   800 ;;		line 90 in file "motor.c"
   801 ;; Parameters:    Size  Location     Type
   802 ;;  m_L             2   31[COMRAM] PTR struct DC_motor
   803 ;;		 -> motorL(9), 
   804 ;;  m_R             2   33[COMRAM] PTR struct DC_motor
   805 ;;		 -> motorR(9), 
   806 ;; Auto vars:     Size  Location     Type
   807 ;;		None
   808 ;; Return value:  Size  Location     Type
   809 ;;                  1    wreg      void 
   810 ;; Registers used:
   811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   817 ;;      Params:         4       0       0       0
   818 ;;      Locals:         0       0       0       0
   819 ;;      Temps:          0       0       0       0
   820 ;;      Totals:         4       0       0       0
   821 ;;Total ram usage:        4 bytes
   822 ;; Hardware stack levels used:    1
   823 ;; Hardware stack levels required when called:    7
   824 ;; This function calls:
   825 ;;		_setMotorPWM
   826 ;; This function is called by:
   827 ;;		_main
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           	psect	text4
   832  0005FC                     __ptext4:
   833                           	opt callstack 0
   834  0005FC                     _fullSpeedAhead:
   835                           	opt callstack 23
   836  0005FC                     
   837                           ;motor.c: 91:     motorR.direction = 1;
   838  0005FC  0E01               	movlw	1
   839  0005FE  6E2B               	movwf	(_motorR+1)^0,c	;volatile
   840                           
   841                           ;motor.c: 92:     motorL.direction = 1;
   842  000600  0E01               	movlw	1
   843  000602  6E34               	movwf	(_motorL+1)^0,c	;volatile
   844  000604                     
   845                           ;motor.c: 93:     motorL.power = TurningSpeed;
   846  000604  C03C  F033         	movff	_TurningSpeed,_motorL	;volatile
   847  000608                     
   848                           ;motor.c: 94:     motorR.power = TurningSpeed;
   849  000608  C03C  F02A         	movff	_TurningSpeed,_motorR	;volatile
   850  00060C                     
   851                           ;motor.c: 95:     setMotorPWM(&motorR);
   852  00060C  0E2A               	movlw	low _motorR
   853  00060E  6E19               	movwf	setMotorPWM@m^0,c
   854  000610  0E00               	movlw	high _motorR
   855  000612  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   856  000614  EC6B  F000         	call	_setMotorPWM	;wreg free
   857  000618                     
   858                           ;motor.c: 96:     setMotorPWM(&motorL);
   859  000618  0E33               	movlw	low _motorL
   860  00061A  6E19               	movwf	setMotorPWM@m^0,c
   861  00061C  0E00               	movlw	high _motorL
   862  00061E  6E1A               	movwf	(setMotorPWM@m+1)^0,c
   863  000620  EC6B  F000         	call	_setMotorPWM	;wreg free
   864  000624  0012               	return		;funcret
   865  000626                     __end_of_fullSpeedAhead:
   866                           	opt callstack 0
   867                           
   868 ;; *************** function _setMotorPWM *****************
   869 ;; Defined at:
   870 ;;		line 41 in file "motor.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;  m               2   24[COMRAM] PTR struct DC_motor
   873 ;;		 -> motorR(9), motorL(9), 
   874 ;; Auto vars:     Size  Location     Type
   875 ;;  PWMduty         2   29[COMRAM] int 
   876 ;; Return value:  Size  Location     Type
   877 ;;                  1    wreg      void 
   878 ;; Registers used:
   879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   880 ;; Tracked objects:
   881 ;;		On entry : 0/0
   882 ;;		On exit  : 0/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   885 ;;      Params:         2       0       0       0
   886 ;;      Locals:         2       0       0       0
   887 ;;      Temps:          3       0       0       0
   888 ;;      Totals:         7       0       0       0
   889 ;;Total ram usage:        7 bytes
   890 ;; Hardware stack levels used:    1
   891 ;; Hardware stack levels required when called:    6
   892 ;; This function calls:
   893 ;;		___awdiv
   894 ;;		___wmul
   895 ;; This function is called by:
   896 ;;		_turnLeft
   897 ;;		_turnRight
   898 ;;		_fullSpeedAhead
   899 ;;		_stop
   900 ;;		_setMotorFullSpeed
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904                           	psect	text5
   905  0000D6                     __ptext5:
   906                           	opt callstack 0
   907  0000D6                     _setMotorPWM:
   908                           	opt callstack 23
   909  0000D6                     
   910                           ;motor.c: 42:     int PWMduty;;motor.c: 43:     if (m->direction) {
   911  0000D6  EE20 F001          	lfsr	2,1
   912  0000DA  5019               	movf	setMotorPWM@m^0,w,c
   913  0000DC  26D9               	addwf	fsr2l,f,c
   914  0000DE  501A               	movf	(setMotorPWM@m+1)^0,w,c
   915  0000E0  22DA               	addwfc	fsr2h,f,c
   916  0000E2  50DF               	movf	indf2,w,c
   917  0000E4  B4D8               	btfsc	status,2,c
   918  0000E6  EF77  F000         	goto	u321
   919  0000EA  EF79  F000         	goto	u320
   920  0000EE                     u321:
   921  0000EE  EFAA  F000         	goto	l1331
   922  0000F2                     u320:
   923  0000F2                     
   924                           ;motor.c: 45:         PWMduty = m->PWMperiod - ((int) (m->power)*(m->PWMperiod)) / 100;
   925  0000F2  C019  FFD9         	movff	setMotorPWM@m,fsr2l
   926  0000F6  C01A  FFDA         	movff	setMotorPWM@m+1,fsr2h
   927  0000FA  50DF               	movf	indf2,w,c
   928  0000FC  6E1B               	movwf	??_setMotorPWM^0,c
   929  0000FE  501B               	movf	??_setMotorPWM^0,w,c
   930  000100  6E0B               	movwf	___wmul@multiplier^0,c
   931  000102  6A0C               	clrf	(___wmul@multiplier+1)^0,c
   932  000104  EE20 F007          	lfsr	2,7
   933  000108  5019               	movf	setMotorPWM@m^0,w,c
   934  00010A  26D9               	addwf	fsr2l,f,c
   935  00010C  501A               	movf	(setMotorPWM@m+1)^0,w,c
   936  00010E  22DA               	addwfc	fsr2h,f,c
   937  000110  CFDE F00D          	movff	postinc2,___wmul@multiplicand
   938  000114  CFDD F00E          	movff	postdec2,___wmul@multiplicand+1
   939  000118  EC27  F003         	call	___wmul	;wreg free
   940  00011C  C00B  F011         	movff	?___wmul,___awdiv@dividend
   941  000120  C00C  F012         	movff	?___wmul+1,___awdiv@dividend+1
   942  000124  0E00               	movlw	0
   943  000126  6E14               	movwf	(___awdiv@divisor+1)^0,c
   944  000128  0E64               	movlw	100
   945  00012A  6E13               	movwf	___awdiv@divisor^0,c
   946  00012C  ECA1  F001         	call	___awdiv	;wreg free
   947  000130  EE20 F007          	lfsr	2,7
   948  000134  5019               	movf	setMotorPWM@m^0,w,c
   949  000136  26D9               	addwf	fsr2l,f,c
   950  000138  501A               	movf	(setMotorPWM@m+1)^0,w,c
   951  00013A  22DA               	addwfc	fsr2h,f,c
   952  00013C  CFDE F01C          	movff	postinc2,??_setMotorPWM+1
   953  000140  CFDD F01D          	movff	postdec2,??_setMotorPWM+2
   954  000144  5011               	movf	?___awdiv^0,w,c
   955  000146  5C1C               	subwf	(??_setMotorPWM+1)^0,w,c
   956  000148  6E1E               	movwf	setMotorPWM@PWMduty^0,c
   957  00014A  5012               	movf	(?___awdiv+1)^0,w,c
   958  00014C  581D               	subwfb	(??_setMotorPWM+2)^0,w,c
   959  00014E  6E1F               	movwf	(setMotorPWM@PWMduty+1)^0,c
   960                           
   961                           ;motor.c: 46:     } else {
   962  000150  EFCD  F000         	goto	l1333
   963  000154                     l1331:
   964                           
   965                           ;motor.c: 48:         PWMduty = ((int) (m->power)*(m->PWMperiod)) / 100;
   966  000154  C019  FFD9         	movff	setMotorPWM@m,fsr2l
   967  000158  C01A  FFDA         	movff	setMotorPWM@m+1,fsr2h
   968  00015C  50DF               	movf	indf2,w,c
   969  00015E  6E1B               	movwf	??_setMotorPWM^0,c
   970  000160  501B               	movf	??_setMotorPWM^0,w,c
   971  000162  6E0B               	movwf	___wmul@multiplier^0,c
   972  000164  6A0C               	clrf	(___wmul@multiplier+1)^0,c
   973  000166  EE20 F007          	lfsr	2,7
   974  00016A  5019               	movf	setMotorPWM@m^0,w,c
   975  00016C  26D9               	addwf	fsr2l,f,c
   976  00016E  501A               	movf	(setMotorPWM@m+1)^0,w,c
   977  000170  22DA               	addwfc	fsr2h,f,c
   978  000172  CFDE F00D          	movff	postinc2,___wmul@multiplicand
   979  000176  CFDD F00E          	movff	postdec2,___wmul@multiplicand+1
   980  00017A  EC27  F003         	call	___wmul	;wreg free
   981  00017E  C00B  F011         	movff	?___wmul,___awdiv@dividend
   982  000182  C00C  F012         	movff	?___wmul+1,___awdiv@dividend+1
   983  000186  0E00               	movlw	0
   984  000188  6E14               	movwf	(___awdiv@divisor+1)^0,c
   985  00018A  0E64               	movlw	100
   986  00018C  6E13               	movwf	___awdiv@divisor^0,c
   987  00018E  ECA1  F001         	call	___awdiv	;wreg free
   988  000192  C011  F01E         	movff	?___awdiv,setMotorPWM@PWMduty
   989  000196  C012  F01F         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
   990  00019A                     l1333:
   991                           
   992                           ;motor.c: 50:     PWMduty = (PWMduty << 2);
   993  00019A  C01E  F01B         	movff	setMotorPWM@PWMduty,??_setMotorPWM
   994  00019E  C01F  F01C         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
   995  0001A2  90D8               	bcf	status,0,c
   996  0001A4  361B               	rlcf	??_setMotorPWM^0,f,c
   997  0001A6  361C               	rlcf	(??_setMotorPWM+1)^0,f,c
   998  0001A8  90D8               	bcf	status,0,c
   999  0001AA  361B               	rlcf	??_setMotorPWM^0,f,c
  1000  0001AC  361C               	rlcf	(??_setMotorPWM+1)^0,f,c
  1001  0001AE  C01B  F01E         	movff	??_setMotorPWM,setMotorPWM@PWMduty
  1002  0001B2  C01C  F01F         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
  1003  0001B6                     
  1004                           ;motor.c: 51:     *(m->dutyLowByte) = PWMduty & 0xFF;
  1005  0001B6  EE20 F002          	lfsr	2,2
  1006  0001BA  5019               	movf	setMotorPWM@m^0,w,c
  1007  0001BC  26D9               	addwf	fsr2l,f,c
  1008  0001BE  501A               	movf	(setMotorPWM@m+1)^0,w,c
  1009  0001C0  22DA               	addwfc	fsr2h,f,c
  1010  0001C2  CFDE F01B          	movff	postinc2,??_setMotorPWM
  1011  0001C6  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  1012  0001CA  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  1013  0001CE  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1014  0001D2  C01E  FFDF         	movff	setMotorPWM@PWMduty,indf2
  1015  0001D6                     
  1016                           ;motor.c: 52:     *(m->dutyHighByte) = (PWMduty >> 8) & 0x3F;
  1017  0001D6  EE20 F004          	lfsr	2,4
  1018  0001DA  5019               	movf	setMotorPWM@m^0,w,c
  1019  0001DC  26D9               	addwf	fsr2l,f,c
  1020  0001DE  501A               	movf	(setMotorPWM@m+1)^0,w,c
  1021  0001E0  22DA               	addwfc	fsr2h,f,c
  1022  0001E2  CFDE F01B          	movff	postinc2,??_setMotorPWM
  1023  0001E6  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  1024  0001EA  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  1025  0001EE  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1026  0001F2  501F               	movf	(setMotorPWM@PWMduty+1)^0,w,c
  1027  0001F4  0B3F               	andlw	63
  1028  0001F6  6EDF               	movwf	indf2,c
  1029  0001F8                     
  1030                           ;motor.c: 54:     if (m->direction) {
  1031  0001F8  EE20 F001          	lfsr	2,1
  1032  0001FC  5019               	movf	setMotorPWM@m^0,w,c
  1033  0001FE  26D9               	addwf	fsr2l,f,c
  1034  000200  501A               	movf	(setMotorPWM@m+1)^0,w,c
  1035  000202  22DA               	addwfc	fsr2h,f,c
  1036  000204  50DF               	movf	indf2,w,c
  1037  000206  B4D8               	btfsc	status,2,c
  1038  000208  EF08  F001         	goto	u331
  1039  00020C  EF0A  F001         	goto	u330
  1040  000210                     u331:
  1041  000210  EF21  F001         	goto	l1343
  1042  000214                     u330:
  1043  000214                     
  1044                           ;motor.c: 55:         LATB = LATB | (1 << (m->dir_pin));
  1045  000214  EE20 F006          	lfsr	2,6
  1046  000218  5019               	movf	setMotorPWM@m^0,w,c
  1047  00021A  26D9               	addwf	fsr2l,f,c
  1048  00021C  501A               	movf	(setMotorPWM@m+1)^0,w,c
  1049  00021E  22DA               	addwfc	fsr2h,f,c
  1050  000220  50DF               	movf	indf2,w,c
  1051  000222  6E1B               	movwf	??_setMotorPWM^0,c
  1052  000224  0E01               	movlw	1
  1053  000226  6E1C               	movwf	(??_setMotorPWM+1)^0,c
  1054  000228  2A1B               	incf	??_setMotorPWM^0,f,c
  1055  00022A  EF19  F001         	goto	u344
  1056  00022E                     u345:
  1057  00022E  90D8               	bcf	status,0,c
  1058  000230  361C               	rlcf	(??_setMotorPWM+1)^0,f,c
  1059  000232                     u344:
  1060  000232  2E1B               	decfsz	??_setMotorPWM^0,f,c
  1061  000234  EF17  F001         	goto	u345
  1062  000238  501C               	movf	(??_setMotorPWM+1)^0,w,c
  1063  00023A  108A               	iorwf	138,w,c	;volatile
  1064  00023C  6E8A               	movwf	138,c	;volatile
  1065                           
  1066                           ;motor.c: 56:     } else {
  1067  00023E  EF37  F001         	goto	l84
  1068  000242                     l1343:
  1069                           
  1070                           ;motor.c: 57:         LATB = LATB & (~(1 << (m->dir_pin)));
  1071  000242  EE20 F006          	lfsr	2,6
  1072  000246  5019               	movf	setMotorPWM@m^0,w,c
  1073  000248  26D9               	addwf	fsr2l,f,c
  1074  00024A  501A               	movf	(setMotorPWM@m+1)^0,w,c
  1075  00024C  22DA               	addwfc	fsr2h,f,c
  1076  00024E  50DF               	movf	indf2,w,c
  1077  000250  6E1B               	movwf	??_setMotorPWM^0,c
  1078  000252  0E01               	movlw	1
  1079  000254  6E1C               	movwf	(??_setMotorPWM+1)^0,c
  1080  000256  2A1B               	incf	??_setMotorPWM^0,f,c
  1081  000258  EF30  F001         	goto	u354
  1082  00025C                     u355:
  1083  00025C  90D8               	bcf	status,0,c
  1084  00025E  361C               	rlcf	(??_setMotorPWM+1)^0,f,c
  1085  000260                     u354:
  1086  000260  2E1B               	decfsz	??_setMotorPWM^0,f,c
  1087  000262  EF2E  F001         	goto	u355
  1088  000266  501C               	movf	(??_setMotorPWM+1)^0,w,c
  1089  000268  0AFF               	xorlw	255
  1090  00026A  148A               	andwf	138,w,c	;volatile
  1091  00026C  6E8A               	movwf	138,c	;volatile
  1092  00026E                     l84:
  1093  00026E  0012               	return		;funcret
  1094  000270                     __end_of_setMotorPWM:
  1095                           	opt callstack 0
  1096                           
  1097 ;; *************** function ___wmul *****************
  1098 ;; Defined at:
  1099 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;  multiplier      2   10[COMRAM] unsigned int 
  1102 ;;  multiplicand    2   12[COMRAM] unsigned int 
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;  product         2   14[COMRAM] unsigned int 
  1105 ;; Return value:  Size  Location     Type
  1106 ;;                  2   10[COMRAM] unsigned int 
  1107 ;; Registers used:
  1108 ;;		wreg, status,2, status,0, prodl, prodh
  1109 ;; Tracked objects:
  1110 ;;		On entry : 0/0
  1111 ;;		On exit  : 0/0
  1112 ;;		Unchanged: 0/0
  1113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1114 ;;      Params:         4       0       0       0
  1115 ;;      Locals:         2       0       0       0
  1116 ;;      Temps:          0       0       0       0
  1117 ;;      Totals:         6       0       0       0
  1118 ;;Total ram usage:        6 bytes
  1119 ;; Hardware stack levels used:    1
  1120 ;; Hardware stack levels required when called:    5
  1121 ;; This function calls:
  1122 ;;		Nothing
  1123 ;; This function is called by:
  1124 ;;		_setMotorPWM
  1125 ;;		_delay_s
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           	psect	text6
  1130  00064E                     __ptext6:
  1131                           	opt callstack 0
  1132  00064E                     ___wmul:
  1133                           	opt callstack 23
  1134  00064E  500B               	movf	___wmul@multiplier^0,w,c
  1135  000650  020D               	mulwf	___wmul@multiplicand^0,c
  1136  000652  CFF3 F00F          	movff	prodl,___wmul@product
  1137  000656  CFF4 F010          	movff	prodh,___wmul@product+1
  1138  00065A  500B               	movf	___wmul@multiplier^0,w,c
  1139  00065C  020E               	mulwf	(___wmul@multiplicand+1)^0,c
  1140  00065E  50F3               	movf	243,w,c
  1141  000660  2610               	addwf	(___wmul@product+1)^0,f,c
  1142  000662  500C               	movf	(___wmul@multiplier+1)^0,w,c
  1143  000664  020D               	mulwf	___wmul@multiplicand^0,c
  1144  000666  50F3               	movf	243,w,c
  1145  000668  2610               	addwf	(___wmul@product+1)^0,f,c
  1146  00066A  C00F  F00B         	movff	___wmul@product,?___wmul
  1147  00066E  C010  F00C         	movff	___wmul@product+1,?___wmul+1
  1148  000672  0012               	return		;funcret
  1149  000674                     __end_of___wmul:
  1150                           	opt callstack 0
  1151                           
  1152 ;; *************** function ___awdiv *****************
  1153 ;; Defined at:
  1154 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;  dividend        2   16[COMRAM] int 
  1157 ;;  divisor         2   18[COMRAM] int 
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;  quotient        2   22[COMRAM] int 
  1160 ;;  sign            1   21[COMRAM] unsigned char 
  1161 ;;  counter         1   20[COMRAM] unsigned char 
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  2   16[COMRAM] int 
  1164 ;; Registers used:
  1165 ;;		wreg, status,2, status,0
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1171 ;;      Params:         4       0       0       0
  1172 ;;      Locals:         4       0       0       0
  1173 ;;      Temps:          0       0       0       0
  1174 ;;      Totals:         8       0       0       0
  1175 ;;Total ram usage:        8 bytes
  1176 ;; Hardware stack levels used:    1
  1177 ;; Hardware stack levels required when called:    5
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_setMotorPWM
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text7
  1186  000342                     __ptext7:
  1187                           	opt callstack 0
  1188  000342                     ___awdiv:
  1189                           	opt callstack 23
  1190  000342  0E00               	movlw	0
  1191  000344  6E16               	movwf	___awdiv@sign^0,c
  1192  000346  BE14               	btfsc	(___awdiv@divisor+1)^0,7,c
  1193  000348  EFAA  F001         	goto	u250
  1194  00034C  EFA8  F001         	goto	u251
  1195  000350                     u251:
  1196  000350  EFB0  F001         	goto	l1283
  1197  000354                     u250:
  1198  000354  6C13               	negf	___awdiv@divisor^0,c
  1199  000356  1E14               	comf	(___awdiv@divisor+1)^0,f,c
  1200  000358  B0D8               	btfsc	status,0,c
  1201  00035A  2A14               	incf	(___awdiv@divisor+1)^0,f,c
  1202  00035C  0E01               	movlw	1
  1203  00035E  6E16               	movwf	___awdiv@sign^0,c
  1204  000360                     l1283:
  1205  000360  BE12               	btfsc	(___awdiv@dividend+1)^0,7,c
  1206  000362  EFB7  F001         	goto	u260
  1207  000366  EFB5  F001         	goto	u261
  1208  00036A                     u261:
  1209  00036A  EFBD  F001         	goto	l1289
  1210  00036E                     u260:
  1211  00036E  6C11               	negf	___awdiv@dividend^0,c
  1212  000370  1E12               	comf	(___awdiv@dividend+1)^0,f,c
  1213  000372  B0D8               	btfsc	status,0,c
  1214  000374  2A12               	incf	(___awdiv@dividend+1)^0,f,c
  1215  000376  0E01               	movlw	1
  1216  000378  1A16               	xorwf	___awdiv@sign^0,f,c
  1217  00037A                     l1289:
  1218  00037A  0E00               	movlw	0
  1219  00037C  6E18               	movwf	(___awdiv@quotient+1)^0,c
  1220  00037E  0E00               	movlw	0
  1221  000380  6E17               	movwf	___awdiv@quotient^0,c
  1222  000382  5013               	movf	___awdiv@divisor^0,w,c
  1223  000384  1014               	iorwf	(___awdiv@divisor+1)^0,w,c
  1224  000386  B4D8               	btfsc	status,2,c
  1225  000388  EFC8  F001         	goto	u271
  1226  00038C  EFCA  F001         	goto	u270
  1227  000390                     u271:
  1228  000390  EFF2  F001         	goto	l1311
  1229  000394                     u270:
  1230  000394  0E01               	movlw	1
  1231  000396  6E15               	movwf	___awdiv@counter^0,c
  1232  000398  EFD2  F001         	goto	l1297
  1233  00039C                     l1295:
  1234  00039C  90D8               	bcf	status,0,c
  1235  00039E  3613               	rlcf	___awdiv@divisor^0,f,c
  1236  0003A0  3614               	rlcf	(___awdiv@divisor+1)^0,f,c
  1237  0003A2  2A15               	incf	___awdiv@counter^0,f,c
  1238  0003A4                     l1297:
  1239  0003A4  AE14               	btfss	(___awdiv@divisor+1)^0,7,c
  1240  0003A6  EFD7  F001         	goto	u281
  1241  0003AA  EFD9  F001         	goto	u280
  1242  0003AE                     u281:
  1243  0003AE  EFCE  F001         	goto	l1295
  1244  0003B2                     u280:
  1245  0003B2                     l1299:
  1246  0003B2  90D8               	bcf	status,0,c
  1247  0003B4  3617               	rlcf	___awdiv@quotient^0,f,c
  1248  0003B6  3618               	rlcf	(___awdiv@quotient+1)^0,f,c
  1249  0003B8  5013               	movf	___awdiv@divisor^0,w,c
  1250  0003BA  5C11               	subwf	___awdiv@dividend^0,w,c
  1251  0003BC  5014               	movf	(___awdiv@divisor+1)^0,w,c
  1252  0003BE  5812               	subwfb	(___awdiv@dividend+1)^0,w,c
  1253  0003C0  A0D8               	btfss	status,0,c
  1254  0003C2  EFE5  F001         	goto	u291
  1255  0003C6  EFE7  F001         	goto	u290
  1256  0003CA                     u291:
  1257  0003CA  EFEC  F001         	goto	l1307
  1258  0003CE                     u290:
  1259  0003CE  5013               	movf	___awdiv@divisor^0,w,c
  1260  0003D0  5E11               	subwf	___awdiv@dividend^0,f,c
  1261  0003D2  5014               	movf	(___awdiv@divisor+1)^0,w,c
  1262  0003D4  5A12               	subwfb	(___awdiv@dividend+1)^0,f,c
  1263  0003D6  8017               	bsf	___awdiv@quotient^0,0,c
  1264  0003D8                     l1307:
  1265  0003D8  90D8               	bcf	status,0,c
  1266  0003DA  3214               	rrcf	(___awdiv@divisor+1)^0,f,c
  1267  0003DC  3213               	rrcf	___awdiv@divisor^0,f,c
  1268  0003DE  2E15               	decfsz	___awdiv@counter^0,f,c
  1269  0003E0  EFD9  F001         	goto	l1299
  1270  0003E4                     l1311:
  1271  0003E4  5016               	movf	___awdiv@sign^0,w,c
  1272  0003E6  B4D8               	btfsc	status,2,c
  1273  0003E8  EFF8  F001         	goto	u301
  1274  0003EC  EFFA  F001         	goto	u300
  1275  0003F0                     u301:
  1276  0003F0  EFFE  F001         	goto	l1315
  1277  0003F4                     u300:
  1278  0003F4  6C17               	negf	___awdiv@quotient^0,c
  1279  0003F6  1E18               	comf	(___awdiv@quotient+1)^0,f,c
  1280  0003F8  B0D8               	btfsc	status,0,c
  1281  0003FA  2A18               	incf	(___awdiv@quotient+1)^0,f,c
  1282  0003FC                     l1315:
  1283  0003FC  C017  F011         	movff	___awdiv@quotient,?___awdiv
  1284  000400  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  1285  000404  0012               	return		;funcret
  1286  000406                     __end_of___awdiv:
  1287                           	opt callstack 0
  1288                           
  1289 ;; *************** function _InterruptHandlerLow *****************
  1290 ;; Defined at:
  1291 ;;		line 21 in file "main.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;		None
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;		None
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      void 
  1298 ;; Registers used:
  1299 ;;		wreg, status,2, status,0, cstack
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1305 ;;      Params:         0       0       0       0
  1306 ;;      Locals:         0       0       0       0
  1307 ;;      Temps:          5       0       0       0
  1308 ;;      Totals:         5       0       0       0
  1309 ;;Total ram usage:        5 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    4
  1312 ;; This function calls:
  1313 ;;		_LEDout
  1314 ;;		_SendLCD
  1315 ;;		_SetLine
  1316 ;; This function is called by:
  1317 ;;		Interrupt level 1
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321                           	psect	intcodelo
  1322  000018                     __pintcodelo:
  1323                           	opt callstack 0
  1324  000018                     _InterruptHandlerLow:
  1325                           	opt callstack 23
  1326                           
  1327                           ;incstack = 0
  1328  000018  803D               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  1329  00001A  CFD8 F008          	movff	status,??_InterruptHandlerLow+2
  1330  00001E  CFE8 F009          	movff	wreg,??_InterruptHandlerLow+3
  1331  000022  CFE0 F00A          	movff	bsr,??_InterruptHandlerLow+4
  1332  000026                     
  1333                           ;main.c: 22:     if (INTCONbits.INT0IF == 1) {
  1334  000026  A2F2               	btfss	242,1,c	;volatile
  1335  000028  EF18  F000         	goto	i1u40_21
  1336  00002C  EF1A  F000         	goto	i1u40_20
  1337  000030                     i1u40_21:
  1338  000030  EF61  F000         	goto	i1l215
  1339  000034                     i1u40_20:
  1340  000034                     
  1341                           ;main.c: 23:         TMR1 = 0;
  1342  000034  0E00               	movlw	0
  1343  000036  6ECF               	movwf	207,c	;volatile
  1344  000038  0E00               	movlw	0
  1345  00003A  6ECE               	movwf	206,c	;volatile
  1346  00003C                     
  1347                           ;main.c: 24:         LEDout(2);
  1348  00003C  0E00               	movlw	0
  1349  00003E  6E02               	movwf	(LEDout@number+1)^0,c
  1350  000040  0E02               	movlw	2
  1351  000042  6E01               	movwf	LEDout@number^0,c
  1352  000044  EC82  F002         	call	_LEDout	;wreg free
  1353  000048                     
  1354                           ;main.c: 25:         INTCONbits.INT0IF = 0;
  1355  000048  92F2               	bcf	242,1,c	;volatile
  1356  00004A                     
  1357                           ;main.c: 27:         if (PIR1bits.CCP1IF == 1) {
  1358  00004A  A49E               	btfss	158,2,c	;volatile
  1359  00004C  EF2A  F000         	goto	i1u41_21
  1360  000050  EF2C  F000         	goto	i1u41_20
  1361  000054                     i1u41_21:
  1362  000054  EF43  F000         	goto	i1l1463
  1363  000058                     i1u41_20:
  1364  000058                     
  1365                           ;main.c: 28:             left = CCPR1L + (CCPR1H << 8);
  1366  000058  50BF               	movf	191,w,c	;volatile
  1367  00005A  6E07               	movwf	(??_InterruptHandlerLow+1)^0,c
  1368  00005C  6A06               	clrf	??_InterruptHandlerLow^0,c
  1369  00005E  50BE               	movf	190,w,c	;volatile
  1370  000060  2406               	addwf	??_InterruptHandlerLow^0,w,c
  1371  000062  6E26               	movwf	_left^0,c	;volatile
  1372  000064  0E00               	movlw	0
  1373  000066  2007               	addwfc	(??_InterruptHandlerLow+1)^0,w,c
  1374  000068  6E27               	movwf	(_left+1)^0,c	;volatile
  1375  00006A                     
  1376                           ;main.c: 29:             PIR1bits.CCP1IF = 0;
  1377  00006A  949E               	bcf	158,2,c	;volatile
  1378  00006C                     
  1379                           ;main.c: 30:             LEDout(CCPR1H);
  1380  00006C  CFBF F001          	movff	4031,LEDout@number	;volatile
  1381  000070  6A02               	clrf	(LEDout@number+1)^0,c
  1382  000072  EC82  F002         	call	_LEDout	;wreg free
  1383  000076                     
  1384                           ;main.c: 31:             SetLine(1);
  1385  000076  0E01               	movlw	1
  1386  000078  ECA2  F002         	call	_SetLine
  1387  00007C                     
  1388                           ;main.c: 32:             SendLCD(CCPR1L,1);
  1389  00007C  0E01               	movlw	1
  1390  00007E  6E03               	movwf	SendLCD@type^0,c
  1391  000080  50BE               	movf	190,w,c	;volatile
  1392  000082  ECBC  F002         	call	_SendLCD
  1393  000086                     i1l1463:
  1394                           
  1395                           ;main.c: 34:         if (PIR2bits.CCP2IF == 1) {
  1396  000086  A0A1               	btfss	161,0,c	;volatile
  1397  000088  EF48  F000         	goto	i1u42_21
  1398  00008C  EF4A  F000         	goto	i1u42_20
  1399  000090                     i1u42_21:
  1400  000090  EF61  F000         	goto	i1l215
  1401  000094                     i1u42_20:
  1402  000094                     
  1403                           ;main.c: 35:             right = CCPR2L + (CCPR2H << 8);
  1404  000094  50BC               	movf	188,w,c	;volatile
  1405  000096  6E07               	movwf	(??_InterruptHandlerLow+1)^0,c
  1406  000098  6A06               	clrf	??_InterruptHandlerLow^0,c
  1407  00009A  50BB               	movf	187,w,c	;volatile
  1408  00009C  2406               	addwf	??_InterruptHandlerLow^0,w,c
  1409  00009E  6E28               	movwf	_right^0,c	;volatile
  1410  0000A0  0E00               	movlw	0
  1411  0000A2  2007               	addwfc	(??_InterruptHandlerLow+1)^0,w,c
  1412  0000A4  6E29               	movwf	(_right+1)^0,c	;volatile
  1413  0000A6                     
  1414                           ;main.c: 36:             PIR2bits.CCP2IF = 0;
  1415  0000A6  90A1               	bcf	161,0,c	;volatile
  1416  0000A8                     
  1417                           ;main.c: 37:             LEDout(CCPR2H);
  1418  0000A8  CFBC F001          	movff	4028,LEDout@number	;volatile
  1419  0000AC  6A02               	clrf	(LEDout@number+1)^0,c
  1420  0000AE  EC82  F002         	call	_LEDout	;wreg free
  1421  0000B2                     
  1422                           ;main.c: 38:             SetLine(2);
  1423  0000B2  0E02               	movlw	2
  1424  0000B4  ECA2  F002         	call	_SetLine
  1425  0000B8                     
  1426                           ;main.c: 39:             SendLCD(CCPR2L,1);
  1427  0000B8  0E01               	movlw	1
  1428  0000BA  6E03               	movwf	SendLCD@type^0,c
  1429  0000BC  50BB               	movf	187,w,c	;volatile
  1430  0000BE  ECBC  F002         	call	_SendLCD
  1431  0000C2                     i1l215:
  1432  0000C2  C00A  FFE0         	movff	??_InterruptHandlerLow+4,bsr
  1433  0000C6  C009  FFE8         	movff	??_InterruptHandlerLow+3,wreg
  1434  0000CA  C008  FFD8         	movff	??_InterruptHandlerLow+2,status
  1435  0000CE  903D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1436  0000D0  0010               	retfie	
  1437  0000D2                     __end_of_InterruptHandlerLow:
  1438                           	opt callstack 0
  1439                           
  1440 ;; *************** function _SetLine *****************
  1441 ;; Defined at:
  1442 ;;		line 85 in file "lcd.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  line            1    wreg     unsigned char 
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;  line            1    4[COMRAM] unsigned char 
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2, status,0, cstack
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1456 ;;      Params:         0       0       0       0
  1457 ;;      Locals:         1       0       0       0
  1458 ;;      Temps:          0       0       0       0
  1459 ;;      Totals:         1       0       0       0
  1460 ;;Total ram usage:        1 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    3
  1463 ;; This function calls:
  1464 ;;		_SendLCD
  1465 ;; This function is called by:
  1466 ;;		_InterruptHandlerLow
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text9
  1471  000544                     __ptext9:
  1472                           	opt callstack 0
  1473  000544                     _SetLine:
  1474                           	opt callstack 23
  1475                           
  1476                           ;incstack = 0
  1477                           ;SetLine@line stored from wreg
  1478  000544  6E05               	movwf	SetLine@line^0,c
  1479  000546                     
  1480                           ;lcd.c: 86:     if (line == 1) {
  1481  000546  0405               	decf	SetLine@line^0,w,c
  1482  000548  A4D8               	btfss	status,2,c
  1483  00054A  EFA9  F002         	goto	i1u36_21
  1484  00054E  EFAB  F002         	goto	i1u36_20
  1485  000552                     i1u36_21:
  1486  000552  EFB2  F002         	goto	i1l1349
  1487  000556                     i1u36_20:
  1488  000556                     
  1489                           ;lcd.c: 87:         SendLCD(0x80, 0);
  1490  000556  0E00               	movlw	0
  1491  000558  6E03               	movwf	SendLCD@type^0,c
  1492  00055A  0E80               	movlw	128
  1493  00055C  ECBC  F002         	call	_SendLCD
  1494                           
  1495                           ;lcd.c: 88:     } else {
  1496  000560  EFB7  F002         	goto	i1l1351
  1497  000564                     i1l1349:
  1498                           
  1499                           ;lcd.c: 89:         SendLCD(0xC0, 0);
  1500  000564  0E00               	movlw	0
  1501  000566  6E03               	movwf	SendLCD@type^0,c
  1502  000568  0EC0               	movlw	192
  1503  00056A  ECBC  F002         	call	_SendLCD
  1504  00056E                     i1l1351:
  1505                           
  1506                           ;lcd.c: 91:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  1507  00056E  0E21               	movlw	33
  1508  000570                     i1u46_27:
  1509  000570  2EE8               	decfsz	wreg,f,c
  1510  000572  D7FE               	bra	i1u46_27
  1511  000574  F000               	nop	
  1512  000576  0012               	return		;funcret
  1513  000578                     __end_of_SetLine:
  1514                           	opt callstack 0
  1515                           
  1516 ;; *************** function _SendLCD *****************
  1517 ;; Defined at:
  1518 ;;		line 26 in file "lcd.c"
  1519 ;; Parameters:    Size  Location     Type
  1520 ;;  Byte            1    wreg     unsigned char 
  1521 ;;  type            1    2[COMRAM] unsigned char 
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;  Byte            1    3[COMRAM] unsigned char 
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  1    wreg      void 
  1526 ;; Registers used:
  1527 ;;		wreg, status,2, status,0, cstack
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1533 ;;      Params:         1       0       0       0
  1534 ;;      Locals:         1       0       0       0
  1535 ;;      Temps:          0       0       0       0
  1536 ;;      Totals:         2       0       0       0
  1537 ;;Total ram usage:        2 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; Hardware stack levels required when called:    2
  1540 ;; This function calls:
  1541 ;;		_LCDout
  1542 ;; This function is called by:
  1543 ;;		_SetLine
  1544 ;;		_InterruptHandlerLow
  1545 ;;		_LCD_Init
  1546 ;;		_LCD_String
  1547 ;;		_ClearLCD
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           	psect	text10
  1552  000578                     __ptext10:
  1553                           	opt callstack 0
  1554  000578                     _SendLCD:
  1555                           	opt callstack 23
  1556                           
  1557                           ;incstack = 0
  1558                           ;SendLCD@Byte stored from wreg
  1559  000578  6E04               	movwf	SendLCD@Byte^0,c
  1560  00057A                     
  1561                           ;lcd.c: 29:     LATAbits.LATA6 = type;
  1562  00057A  B003               	btfsc	SendLCD@type^0,0,c
  1563  00057C  D002               	bra	i1u31_25
  1564  00057E  9C89               	bcf	137,6,c	;volatile
  1565  000580  D001               	bra	i1u31_26
  1566  000582                     i1u31_25:
  1567  000582  8C89               	bsf	137,6,c	;volatile
  1568  000584                     i1u31_26:
  1569  000584                     
  1570                           ;lcd.c: 31:     LCDout((Byte & 0b11110000) >> 4);
  1571  000584  3804               	swapf	SendLCD@Byte^0,w,c
  1572  000586  0B0F               	andlw	15
  1573  000588  0B0F               	andlw	15
  1574  00058A  EC44  F002         	call	_LCDout
  1575  00058E                     
  1576                           ;lcd.c: 32:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  1577  00058E  0E06               	movlw	6
  1578  000590                     i1u47_27:
  1579  000590  2EE8               	decfsz	wreg,f,c
  1580  000592  D7FE               	bra	i1u47_27
  1581  000594  D000               	nop2	
  1582  000596                     
  1583                           ;lcd.c: 33:     LCDout(Byte & 0b00001111);
  1584  000596  5004               	movf	SendLCD@Byte^0,w,c
  1585  000598  0B0F               	andlw	15
  1586  00059A  EC44  F002         	call	_LCDout
  1587                           
  1588                           ;lcd.c: 35:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  1589  00059E  0E21               	movlw	33
  1590  0005A0                     i1u48_27:
  1591  0005A0  2EE8               	decfsz	wreg,f,c
  1592  0005A2  D7FE               	bra	i1u48_27
  1593  0005A4  F000               	nop	
  1594  0005A6  0012               	return		;funcret
  1595  0005A8                     __end_of_SendLCD:
  1596                           	opt callstack 0
  1597                           
  1598 ;; *************** function _LCDout *****************
  1599 ;; Defined at:
  1600 ;;		line 14 in file "lcd.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;  number          1    wreg     unsigned char 
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;  number          1    1[COMRAM] unsigned char 
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      void 
  1607 ;; Registers used:
  1608 ;;		wreg, status,2, status,0, cstack
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1614 ;;      Params:         0       0       0       0
  1615 ;;      Locals:         1       0       0       0
  1616 ;;      Temps:          1       0       0       0
  1617 ;;      Totals:         2       0       0       0
  1618 ;;Total ram usage:        2 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    1
  1621 ;; This function calls:
  1622 ;;		_E_TOG
  1623 ;; This function is called by:
  1624 ;;		_SendLCD
  1625 ;;		_LCD_Init
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           	psect	text11
  1630  000488                     __ptext11:
  1631                           	opt callstack 0
  1632  000488                     _LCDout:
  1633                           	opt callstack 23
  1634                           
  1635                           ;incstack = 0
  1636                           ;LCDout@number stored from wreg
  1637  000488  6E02               	movwf	LCDout@number^0,c
  1638  00048A                     
  1639                           ;lcd.c: 16:     LATDbits.LATD3 = number & 0b0001;
  1640  00048A  C002  F001         	movff	LCDout@number,??_LCDout
  1641  00048E  0E01               	movlw	1
  1642  000490  1601               	andwf	??_LCDout^0,f,c
  1643  000492  4601               	rlncf	??_LCDout^0,f,c
  1644  000494  4601               	rlncf	??_LCDout^0,f,c
  1645  000496  4601               	rlncf	??_LCDout^0,f,c
  1646  000498  508C               	movf	140,w,c	;volatile
  1647  00049A  1801               	xorwf	??_LCDout^0,w,c
  1648  00049C  0BF7               	andlw	-9
  1649  00049E  1801               	xorwf	??_LCDout^0,w,c
  1650  0004A0  6E8C               	movwf	140,c	;volatile
  1651                           
  1652                           ;lcd.c: 17:     LATDbits.LATD2 = (number & 0b0010) >> 1;
  1653  0004A2  C002  F001         	movff	LCDout@number,??_LCDout
  1654  0004A6  90D8               	bcf	status,0,c
  1655  0004A8  3201               	rrcf	??_LCDout^0,f,c
  1656  0004AA  0E01               	movlw	1
  1657  0004AC  1601               	andwf	??_LCDout^0,f,c
  1658  0004AE  4601               	rlncf	??_LCDout^0,f,c
  1659  0004B0  4601               	rlncf	??_LCDout^0,f,c
  1660  0004B2  508C               	movf	140,w,c	;volatile
  1661  0004B4  1801               	xorwf	??_LCDout^0,w,c
  1662  0004B6  0BFB               	andlw	-5
  1663  0004B8  1801               	xorwf	??_LCDout^0,w,c
  1664  0004BA  6E8C               	movwf	140,c	;volatile
  1665                           
  1666                           ;lcd.c: 18:     LATDbits.LATD0 = (number & 0b0100) >> 2;
  1667  0004BC  C002  F001         	movff	LCDout@number,??_LCDout
  1668  0004C0  90D8               	bcf	status,0,c
  1669  0004C2  3201               	rrcf	??_LCDout^0,f,c
  1670  0004C4  90D8               	bcf	status,0,c
  1671  0004C6  3201               	rrcf	??_LCDout^0,f,c
  1672  0004C8  0E01               	movlw	1
  1673  0004CA  1601               	andwf	??_LCDout^0,f,c
  1674  0004CC  508C               	movf	140,w,c	;volatile
  1675  0004CE  1801               	xorwf	??_LCDout^0,w,c
  1676  0004D0  0BFE               	andlw	-2
  1677  0004D2  1801               	xorwf	??_LCDout^0,w,c
  1678  0004D4  6E8C               	movwf	140,c	;volatile
  1679                           
  1680                           ;lcd.c: 19:     LATDbits.LATD1 = (number & 0b1000) >> 3;
  1681  0004D6  C002  F001         	movff	LCDout@number,??_LCDout
  1682  0004DA  90D8               	bcf	status,0,c
  1683  0004DC  3201               	rrcf	??_LCDout^0,f,c
  1684  0004DE  90D8               	bcf	status,0,c
  1685  0004E0  3201               	rrcf	??_LCDout^0,f,c
  1686  0004E2  90D8               	bcf	status,0,c
  1687  0004E4  3201               	rrcf	??_LCDout^0,f,c
  1688  0004E6  0E01               	movlw	1
  1689  0004E8  1601               	andwf	??_LCDout^0,f,c
  1690  0004EA  4601               	rlncf	??_LCDout^0,f,c
  1691  0004EC  508C               	movf	140,w,c	;volatile
  1692  0004EE  1801               	xorwf	??_LCDout^0,w,c
  1693  0004F0  0BFD               	andlw	-3
  1694  0004F2  1801               	xorwf	??_LCDout^0,w,c
  1695  0004F4  6E8C               	movwf	140,c	;volatile
  1696  0004F6                     
  1697                           ;lcd.c: 20:     E_TOG();
  1698  0004F6  EC3A  F003         	call	_E_TOG	;wreg free
  1699  0004FA                     
  1700                           ;lcd.c: 22:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1701  0004FA  0E03               	movlw	3
  1702  0004FC                     i1u49_27:
  1703  0004FC  2EE8               	decfsz	wreg,f,c
  1704  0004FE  D7FE               	bra	i1u49_27
  1705  000500  F000               	nop	
  1706  000502  0012               	return		;funcret
  1707  000504                     __end_of_LCDout:
  1708                           	opt callstack 0
  1709                           
  1710 ;; *************** function _E_TOG *****************
  1711 ;; Defined at:
  1712 ;;		line 4 in file "lcd.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;		None
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;		None
  1717 ;; Return value:  Size  Location     Type
  1718 ;;                  1    wreg      void 
  1719 ;; Registers used:
  1720 ;;		wreg
  1721 ;; Tracked objects:
  1722 ;;		On entry : 0/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1726 ;;      Params:         0       0       0       0
  1727 ;;      Locals:         0       0       0       0
  1728 ;;      Temps:          0       0       0       0
  1729 ;;      Totals:         0       0       0       0
  1730 ;;Total ram usage:        0 bytes
  1731 ;; Hardware stack levels used:    1
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_LCDout
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text12
  1740  000674                     __ptext12:
  1741                           	opt callstack 0
  1742  000674                     _E_TOG:
  1743                           	opt callstack 23
  1744  000674                     
  1745                           ;lcd.c: 8:     LATCbits.LATC0 = 1;
  1746  000674  808B               	bsf	139,0,c	;volatile
  1747  000676                     
  1748                           ;lcd.c: 9:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1749  000676  0E03               	movlw	3
  1750  000678                     i1u50_27:
  1751  000678  2EE8               	decfsz	wreg,f,c
  1752  00067A  D7FE               	bra	i1u50_27
  1753  00067C  F000               	nop	
  1754  00067E                     
  1755                           ;lcd.c: 10:     LATCbits.LATC0 = 0;
  1756  00067E  908B               	bcf	139,0,c	;volatile
  1757  000680  0012               	return		;funcret
  1758  000682                     __end_of_E_TOG:
  1759                           	opt callstack 0
  1760                           
  1761 ;; *************** function _LEDout *****************
  1762 ;; Defined at:
  1763 ;;		line 4 in file "led.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;  number          2    0[COMRAM] int 
  1766 ;; Auto vars:     Size  Location     Type
  1767 ;;		None
  1768 ;; Return value:  Size  Location     Type
  1769 ;;                  1    wreg      void 
  1770 ;; Registers used:
  1771 ;;		wreg, status,2, status,0
  1772 ;; Tracked objects:
  1773 ;;		On entry : 0/0
  1774 ;;		On exit  : 0/0
  1775 ;;		Unchanged: 0/0
  1776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1777 ;;      Params:         2       0       0       0
  1778 ;;      Locals:         0       0       0       0
  1779 ;;      Temps:          3       0       0       0
  1780 ;;      Totals:         5       0       0       0
  1781 ;;Total ram usage:        5 bytes
  1782 ;; Hardware stack levels used:    1
  1783 ;; This function calls:
  1784 ;;		Nothing
  1785 ;; This function is called by:
  1786 ;;		_InterruptHandlerLow
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           	psect	text13
  1791  000504                     __ptext13:
  1792                           	opt callstack 0
  1793  000504                     _LEDout:
  1794                           	opt callstack 26
  1795  000504                     
  1796                           ;led.c: 13:     LATC = (number & 0b00111100) << 2;
  1797  000504  C001  F003         	movff	LEDout@number,??_LEDout
  1798  000508  0E3C               	movlw	60
  1799  00050A  1603               	andwf	??_LEDout^0,f,c
  1800  00050C  90D8               	bcf	status,0,c
  1801  00050E  3603               	rlcf	??_LEDout^0,f,c
  1802  000510  90D8               	bcf	status,0,c
  1803  000512  3403               	rlcf	??_LEDout^0,w,c
  1804  000514  6E8B               	movwf	139,c	;volatile
  1805                           
  1806                           ;led.c: 14:     LATD = ((number & 0b00000011) << 2) | ((number & 0b11000000) >> 2);
  1807  000516  C001  F003         	movff	LEDout@number,??_LEDout
  1808  00051A  C002  F004         	movff	LEDout@number+1,??_LEDout+1
  1809  00051E  3404               	rlcf	(??_LEDout+1)^0,w,c
  1810  000520  3204               	rrcf	(??_LEDout+1)^0,f,c
  1811  000522  3203               	rrcf	??_LEDout^0,f,c
  1812  000524  3404               	rlcf	(??_LEDout+1)^0,w,c
  1813  000526  3204               	rrcf	(??_LEDout+1)^0,f,c
  1814  000528  3203               	rrcf	??_LEDout^0,f,c
  1815  00052A  0E30               	movlw	48
  1816  00052C  1603               	andwf	??_LEDout^0,f,c
  1817  00052E  C001  F005         	movff	LEDout@number,??_LEDout+2
  1818  000532  0E03               	movlw	3
  1819  000534  1605               	andwf	(??_LEDout+2)^0,f,c
  1820  000536  90D8               	bcf	status,0,c
  1821  000538  3605               	rlcf	(??_LEDout+2)^0,f,c
  1822  00053A  90D8               	bcf	status,0,c
  1823  00053C  3405               	rlcf	(??_LEDout+2)^0,w,c
  1824  00053E  1003               	iorwf	??_LEDout^0,w,c
  1825  000540  6E8C               	movwf	140,c	;volatile
  1826  000542  0012               	return		;funcret
  1827  000544                     __end_of_LEDout:
  1828                           	opt callstack 0
  1829  0000                     
  1830                           	psect	rparam
  1831  0000                     
  1832                           	psect	temp
  1833  00003D                     btemp:
  1834                           	opt callstack 0
  1835  00003D                     	ds	1
  1836  0000                     int$flags	set	btemp
  1837  0000                     wtemp8	set	btemp+1
  1838  0000                     ttemp5	set	btemp+1
  1839  0000                     ttemp6	set	btemp+4
  1840  0000                     ttemp7	set	btemp+8
  1841                           tosu	equ	0xFFF
  1842                           tosh	equ	0xFFE
  1843                           tosl	equ	0xFFD
  1844                           stkptr	equ	0xFFC
  1845                           pclatu	equ	0xFFB
  1846                           pclath	equ	0xFFA
  1847                           pcl	equ	0xFF9
  1848                           tblptru	equ	0xFF8
  1849                           tblptrh	equ	0xFF7
  1850                           tblptrl	equ	0xFF6
  1851                           tablat	equ	0xFF5
  1852                           prodh	equ	0xFF4
  1853                           prodl	equ	0xFF3
  1854                           indf0	equ	0xFEF
  1855                           postinc0	equ	0xFEE
  1856                           postdec0	equ	0xFED
  1857                           preinc0	equ	0xFEC
  1858                           plusw0	equ	0xFEB
  1859                           fsr0h	equ	0xFEA
  1860                           fsr0l	equ	0xFE9
  1861                           wreg	equ	0xFE8
  1862                           indf1	equ	0xFE7
  1863                           postinc1	equ	0xFE6
  1864                           postdec1	equ	0xFE5
  1865                           preinc1	equ	0xFE4
  1866                           plusw1	equ	0xFE3
  1867                           fsr1h	equ	0xFE2
  1868                           fsr1l	equ	0xFE1
  1869                           bsr	equ	0xFE0
  1870                           indf2	equ	0xFDF
  1871                           postinc2	equ	0xFDE
  1872                           postdec2	equ	0xFDD
  1873                           preinc2	equ	0xFDC
  1874                           plusw2	equ	0xFDB
  1875                           fsr2h	equ	0xFDA
  1876                           fsr2l	equ	0xFD9
  1877                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      60
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    fullSpeedAhead@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    fullSpeedAhead@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRight@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRight@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnLeft@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLeft@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), motorL(COMRAM[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S357DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S357DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_fullSpeedAhead
    _main->_turnLeft
    _main->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerLow in COMRAM

    _InterruptHandlerLow->_LEDout
    _InterruptHandlerLow->_SetLine
    _SetLine->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6480
                                             35 COMRAM     2     2      0
                     _fullSpeedAhead
                          _initMotor
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     0      4    2150
                                             31 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             4     0      4    2150
                                             31 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initMotor                                            2     2      0      30
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       4     0      4    2150
                                             31 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          7     5      2    1998
                                             24 COMRAM     7     5      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     507
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                             16 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _InterruptHandlerLow                                  5     5      0    2240
                                              5 COMRAM     5     5      0
                             _LEDout
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (5) _SetLine                                              1     1      0     984
                                              4 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (6) _SendLCD                                              2     1      1     962
                                              2 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (7) _LCDout                                               2     2      0      60
                                              0 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (8) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _LEDout                                               5     3      2     294
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initMotor
   _turnLeft
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnRight
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)
   _LEDout
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      3C       1       63.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3C       3        0.0%
DATA                 0      0      3C      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Dec 02 10:53:42 2019

                          l90 05FA                            l84 026E                            l77 0486  
                          l93 05D0                            l96 0624                  ___awdiv@sign 0016  
           fullSpeedAhead@m_L 0020             fullSpeedAhead@m_R 0022                            bsr 000FE0  
         ___wmul@multiplicand 000D                           l220 0274                           l250 0672  
                         l481 0404                           u300 03F4                           u301 03F0  
                         u320 00F2                           u321 00EE                           u250 0354  
                         u330 0214                           u251 0350                           u331 0210  
                         u260 036E                           u261 036A                           u270 0394  
                         u430 0282                           u271 0390                           u431 027E  
                         u280 03B2                           u344 0232                           u440 02D8  
                         u281 03AE                           u345 022E                           u441 02D4  
                         u290 03CE                           u354 0260                           u450 030E  
                         u291 03CA                           u355 025C                           u451 030A  
                         wreg 000FE8                          l1021 0406                          l1031 0410  
                        l1023 0408                          l1041 045A                          l1033 0412  
                        l1025 040A                          l1043 046A                          l1035 0414  
                        l1027 040C                          l1019 0406                          l1301 03B8  
                        l1045 0472                          l1037 0446                          l1029 040E  
                        l1303 03CE                          l1311 03E4                          l1047 047E  
                        l1039 044E                          l1313 03F4                          l1305 03D6  
                        l1315 03FC                          l1307 03D8                          l1331 0154  
                        l1309 03DE                          l1341 0214                          l1333 019A  
                        l1501 029C                          l1271 066A                          l1343 0242  
                        l1335 01B6                          l1327 00D6                          l1511 02A6  
                        l1503 029E                          l1281 035C                          l1337 01D6  
                        l1329 00F2                          l1361 05EE                          l1353 05D2  
                        l1521 02B0                          l1513 02A8                          l1505 02A0  
                        l1291 0382                          l1283 0360                          l1275 0342  
                        l1339 01F8                          l1355 05DA                          l1371 05C4  
                        l1363 05A8                          l1531 02EC                          l1523 02B2  
                        l1515 02AA                          l1507 02A2                          l1293 0394  
                        l1285 036E                          l1277 0346                          l1269 064E  
                        l1381 0618                          l1373 05FC                          l1357 05DE  
                        l1365 05B0                          l1533 030E                          l1525 02B4  
                        l1517 02AC                          l1509 02A4                          l1295 039C  
                        l1287 0376                          l1279 0354                          l1375 0604  
                        l1359 05E2                          l1367 05B4                          l1535 0326  
                        l1527 02B6                          l1519 02AE                          l1297 03A4  
                        l1289 037A                          l1377 0608                          l1369 05B8  
                        l1529 02D8                          l1481 0288                          l1299 03B2  
                        l1379 060C                          l1491 0292                          l1483 028A  
                        l1475 0270                          l1493 0294                          l1485 028C  
                        l1477 0282                          l1495 0296                          l1487 028E  
                        l1479 0286                          l1497 0298                          l1489 0290  
                        l1499 029A                          _LATB 000F8A                          _LATC 000F8B  
                        _LATD 000F8C                          i1l20 0502                          i1l23 05A6  
                        i1l31 0576                          i1l17 0680                          _TMR1 000FCE  
                        _main 0270                          _left 0026                          fsr2h 000FDA  
                        indf2 000FDF                          fsr2l 000FD9                          btemp 003D  
                        prodh 000FF4                          prodl 000FF3                          start 00D2  
                ___param_bank 000000               __end_of_SendLCD 05A8               __end_of_SetLine 0578  
                       ?_main 0001               __end_of___awdiv 0406               ___awdiv@divisor 0013  
                       _PDC0H 000F78                         _PDC1H 000F76                         _PDC0L 000F79  
                       _PDC1L 000F77                         i1l215 00C2                         i1l244 0542  
                       i1l923 0674                         i1l931 04F6                         i1l925 0676  
                       i1l933 04FA                         i1l927 067E                         i1l929 048A  
             ___awdiv@counter 0015                         _RCREG 000FAE                         _E_TOG 0674  
                       _SPBRG 000FAF                         _TXREG 000FAD                         _right 0028  
                       tablat 000FF5                         ttemp5 003E                         ttemp6 0041  
                       ttemp7 0045                         status 000FD8                         wtemp8 003E  
                _TurningSpeed 003C               __initialization 0626                  __end_of_main 0342  
              __CFG_OSC$IRCIO 000000                        ??_main 0024                 __activetblptr 000000  
                      ?_E_TOG 0001                  ?_setMotorPWM 0019                        _CCPR1H 000FBF  
                      _CCPR2H 000FBC                        _CCPR1L 000FBE                        _CCPR2L 000FBB  
            ___awdiv@dividend 0011                        i1l1321 0584                        i1l1323 058E  
                      i1l1325 0596                        i1l1319 057A                        i1l1351 056E  
                      i1l1345 0546                        i1l1347 0556                        i1l1451 004A  
                      i1l1443 0026                        i1l1349 0564                        i1l1461 007C  
                      i1l1453 0058                        i1l1445 0034                        i1l1383 0504  
                      i1l1471 00B2                        i1l1455 006A                        i1l1463 0086  
                      i1l1447 003C                        i1l1473 00B8                        i1l1465 0094  
                      i1l1457 006C                        i1l1449 0048                        i1l1467 00A6  
                      i1l1459 0076                        i1l1469 00A8                        _LCDout 0488  
                 SendLCD@Byte 0004                        _LEDout 0504                        _OSCCON 000FD3  
                      _PTCON0 000F7F                        _PTCON1 000F7E                        _SPBRGH 000FB0  
                      _PTPERH 000F7A                        _PTPERL 000F7B                   SendLCD@type 0003  
                   ??_SendLCD 0004                     ??_SetLine 0005                        ___wmul 064E  
                   ??___awdiv 0015                        clear_0 063E              ___awdiv@quotient 0017  
                      _motorL 0033                        _motorR 002A                  __pdataCOMRAM 003C  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
            __end_of_turnLeft 05FC                    __accesstop 0060       __end_of__initialization 0644  
               ___rparam_used 000001                   SetLine@line 0005                 __end_of_E_TOG 0682  
              __pcstackCOMRAM 0001                       ??_E_TOG 0001   __end_of_InterruptHandlerLow 00D2  
                     ?_LCDout 0001                       ?_LEDout 0001            __size_of_initMotor 0082  
                     ?___wmul 000B       __size_of_fullSpeedAhead 002A                       i1u31_25 0582  
                     i1u31_26 0584                       i1u40_20 0034                       i1u40_21 0030  
                     i1u41_20 0058                       i1u41_21 0054                       i1u42_20 0094  
                     i1u42_21 0090                       i1u50_27 0678                       i1u36_20 0556  
                     i1u36_21 0552                       i1u46_27 0570                       i1u47_27 0590  
                     i1u48_27 05A0                       i1u49_27 04FC                       _PWMCON0 000F6F  
                     _PWMCON1 000F6E          __size_of_setMotorPWM 019A               __size_of_LCDout 007C  
             __size_of_LEDout 0040            __size_of_turnRight 002A                       _SendLCD 0578  
                     __Hparam 0000                       _SetLine 0544                       __Lparam 0000  
                     ___awdiv 0342               __size_of___wmul 0026                       __pcinit 0626  
                     __ramtop 0300                     ?_turnLeft 0020                       __ptext0 0270  
                     __ptext1 05A8                       __ptext2 05D2                       __ptext3 0406  
                     __ptext4 05FC                       __ptext5 00D6                       __ptext6 064E  
                     __ptext7 0342                       __ptext9 0544                     _T1CONbits 000FCD  
           __end_of_initMotor 0488                  LCDout@number 0002          end_of_initialization 0644  
          setMotorPWM@PWMduty 001E                  turnRight@m_L 0020                  turnRight@m_R 0022  
                   _RCSTAbits 000FAB                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE                    ??_turnLeft 0024             __end_of_turnRight 05D2  
                LEDout@number 0001                     _TRISAbits 000F92                     _TRISBbits 000F93  
                   _TRISCbits 000F94                     _TRISDbits 000F95                   _CCP1CONbits 000FBD  
              __end_of_LCDout 0504                   _CCP2CONbits 000FBA                     _TXSTAbits 000FAC  
              __end_of_LEDout 0544                _fullSpeedAhead 05FC                __end_of___wmul 0674  
                 _BAUDCONbits 000FAA                 __pidataCOMRAM 0682           start_initialization 0626  
                    ??_LCDout 0001                      ??_LEDout 0003        __end_of_fullSpeedAhead 0626  
                    ??___wmul 000F                   __pbssCOMRAM 0026  __size_of_InterruptHandlerLow 00BA  
                    ?_SendLCD 0003                      ?_SetLine 0001               ?_fullSpeedAhead 0020  
                    ?___awdiv 0011                   __pintcodelo 0018                __size_of_E_TOG 000E  
           __size_of_turnLeft 002A                 ??_setMotorPWM 001B                     _initMotor 0406  
                 turnLeft@m_L 0020                   turnLeft@m_R 0022                ___wmul@product 000F  
                    _LATAbits 000F89                      _LATBbits 000F8A                      _LATCbits 000F8B  
                    _LATDbits 000F8C                      _PIE1bits 000F9D                      _PIR1bits 000F9E  
                    _PIR2bits 000FA1                      _RCONbits 000FD0             ___wmul@multiplier 000B  
                setMotorPWM@m 0019                    ?_initMotor 0001                     _turnRight 05A8  
                 _INTCON2bits 000FF1           __end_of_setMotorPWM 0270                      __Hrparam 0000  
            __size_of_SendLCD 0030                      __Lrparam 0000              __size_of_SetLine 0034  
            __size_of___awdiv 00C4                    ?_turnRight 0020                      __ptext10 0578  
                    __ptext11 0488                      __ptext12 0674                      __ptext13 0504  
               __size_of_main 00D2                      int$flags 003D           _InterruptHandlerLow 0018  
                    _turnLeft 05D2                    _INTCONbits 000FF2                   ??_initMotor 000B  
                 _setMotorPWM 00D6                      intlevel1 0000          ?_InterruptHandlerLow 0001  
            ??_fullSpeedAhead 0024                    _OSCCONbits 000FD3                   ??_turnRight 0024  
       ??_InterruptHandlerLow 0006  
