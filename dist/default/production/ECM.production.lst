

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Nov 25 15:31:48 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 2.10
    40                           ; Generated 31/07/2019 GMT
    41                           ; 
    42                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4331 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataCOMRAM
    75  000DB0                     __pidataCOMRAM:
    76                           	opt callstack 0
    77                           
    78                           ;initializer for _TurningSpeed
    79  000DB0  4B                 	db	75
    80                           
    81                           	psect	idataBANK0
    82  000DA6                     __pidataBANK0:
    83                           	opt callstack 0
    84                           
    85                           ;initializer for stoa@F1131
    86  000DA6  28                 	db	40
    87  000DA7  6E                 	db	110
    88  000DA8  75                 	db	117
    89  000DA9  6C                 	db	108
    90  000DAA  6C                 	db	108
    91  000DAB  29                 	db	41
    92  000DAC  00                 	db	0
    93  0000                     _PIE1bits	set	3997
    94  0000                     _RCONbits	set	4048
    95  0000                     _INTCONbits	set	4082
    96  0000                     _OSCCONbits	set	4051
    97  0000                     _OSCCON	set	4051
    98  0000                     _RCSTAbits	set	4011
    99  0000                     _TXSTAbits	set	4012
   100  0000                     _BAUDCONbits	set	4010
   101  0000                     _SPBRGH	set	4016
   102  0000                     _SPBRG	set	4015
   103  0000                     _TXREG	set	4013
   104  0000                     _RCREG	set	4014
   105  0000                     _PIR1bits	set	3998
   106  0000                     _LATB	set	3978
   107  0000                     _PTPERH	set	3962
   108  0000                     _PTPERL	set	3963
   109  0000                     _PWMCON1	set	3950
   110  0000                     _PWMCON0	set	3951
   111  0000                     _PTCON1	set	3966
   112  0000                     _PTCON0	set	3967
   113  0000                     _LATBbits	set	3978
   114  0000                     _TRISBbits	set	3987
   115  0000                     _TRISDbits	set	3989
   116  0000                     _TRISCbits	set	3988
   117  0000                     _TRISAbits	set	3986
   118  0000                     _LATAbits	set	3977
   119  0000                     _LATDbits	set	3980
   120  0000                     _LATCbits	set	3979
   121  0000                     _PDC1H	set	3958
   122  0000                     _PDC1L	set	3959
   123  0000                     _PDC0H	set	3960
   124  0000                     _PDC0L	set	3961
   125                           
   126                           	psect	smallconst
   127  000300                     __psmallconst:
   128                           	opt callstack 0
   129  000300  00                 	db	0
   130  000301                     STR_1:
   131  000301  25                 	db	37
   132  000302  2E                 	db	46
   133  000303  31                 	db	49	;'1'
   134  000304  30                 	db	48	;'0'
   135  000305  73                 	db	115	;'s'
   136  000306  00                 	db	0
   137                           
   138                           ; #config settings
   139  000307  00                 	db	0	; dummy byte at the end
   140  0000                     
   141                           	psect	cinit
   142  000B54                     __pcinit:
   143                           	opt callstack 0
   144  000B54                     start_initialization:
   145                           	opt callstack 0
   146  000B54                     __initialization:
   147                           	opt callstack 0
   148                           
   149                           ; Initialize objects allocated to BANK0 (7 bytes)
   150                           ; load TBLPTR registers with __pidataBANK0
   151  000B54  0EA6               	movlw	low __pidataBANK0
   152  000B56  6EF6               	movwf	tblptrl,c
   153  000B58  0E0D               	movlw	high __pidataBANK0
   154  000B5A  6EF7               	movwf	tblptrh,c
   155  000B5C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   156  000B5E  6EF8               	movwf	tblptru,c
   157  000B60  EE00  F0A6         	lfsr	0,__pdataBANK0
   158  000B64  EE10 F007          	lfsr	1,7
   159  000B68                     copy_data0:
   160  000B68  0009               	tblrd		*+
   161  000B6A  CFF5 FFEE          	movff	tablat,postinc0
   162  000B6E  50E5               	movf	postdec1,w,c
   163  000B70  50E1               	movf	fsr1l,w,c
   164  000B72  E1FA               	bnz	copy_data0
   165                           
   166                           ; Initialize objects allocated to COMRAM (1 bytes)
   167                           ; load TBLPTR registers with __pidataCOMRAM
   168  000B74  0EB0               	movlw	low __pidataCOMRAM
   169  000B76  6EF6               	movwf	tblptrl,c
   170  000B78  0E0D               	movlw	high __pidataCOMRAM
   171  000B7A  6EF7               	movwf	tblptrh,c
   172  000B7C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   173  000B7E  6EF8               	movwf	tblptru,c
   174  000B80  0009               	tblrd		*+	;fetch initializer
   175  000B82  CFF5 F053          	movff	tablat,__pdataCOMRAM
   176                           
   177                           ; Clear objects allocated to BANK0 (60 bytes)
   178  000B86  EE00  F060         	lfsr	0,__pbssBANK0
   179  000B8A  0E3C               	movlw	60
   180  000B8C                     clear_0:
   181  000B8C  6AEE               	clrf	postinc0,c
   182  000B8E  06E8               	decf	wreg,f,c
   183  000B90  E1FD               	bnz	clear_0
   184                           
   185                           ; Clear objects allocated to COMRAM (9 bytes)
   186  000B92  EE00  F04A         	lfsr	0,__pbssCOMRAM
   187  000B96  0E09               	movlw	9
   188  000B98                     clear_1:
   189  000B98  6AEE               	clrf	postinc0,c
   190  000B9A  06E8               	decf	wreg,f,c
   191  000B9C  E1FD               	bnz	clear_1
   192  000B9E                     end_of_initialization:
   193                           	opt callstack 0
   194  000B9E                     __end_of__initialization:
   195                           	opt callstack 0
   196  000B9E  9054               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   197  000BA0  9254               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   198  000BA2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   199  000BA4  6EF8               	movwf	tblptru,c
   200  000BA6  0100               	movlb	0
   201  000BA8  EF44  F005         	goto	_main	;jump to C main() function
   202                           
   203                           	psect	bssCOMRAM
   204  00004A                     __pbssCOMRAM:
   205                           	opt callstack 0
   206  00004A                     _nout:
   207                           	opt callstack 0
   208  00004A                     	ds	2
   209  00004C                     _width:
   210                           	opt callstack 0
   211  00004C                     	ds	2
   212  00004E                     _prec:
   213                           	opt callstack 0
   214  00004E                     	ds	2
   215  000050                     _flags:
   216                           	opt callstack 0
   217  000050                     	ds	2
   218  000052                     _reader:
   219                           	opt callstack 0
   220  000052                     	ds	1
   221                           
   222                           	psect	dataCOMRAM
   223  000053                     __pdataCOMRAM:
   224                           	opt callstack 0
   225  000053                     _TurningSpeed:
   226                           	opt callstack 0
   227  000053                     	ds	1
   228                           
   229                           	psect	bssBANK0
   230  000060                     __pbssBANK0:
   231                           	opt callstack 0
   232  000060                     	ds	32
   233  000080                     _A:
   234                           	opt callstack 0
   235  000080                     	ds	10
   236  00008A                     _motorR:
   237                           	opt callstack 0
   238  00008A                     	ds	9
   239  000093                     _motorL:
   240                           	opt callstack 0
   241  000093                     	ds	9
   242                           
   243                           	psect	dataBANK0
   244  0000A6                     __pdataBANK0:
   245                           	opt callstack 0
   246  0000A6                     stoa@F1131:
   247                           	opt callstack 0
   248  0000A6                     	ds	7
   249                           
   250                           	psect	cstackBANK0
   251  00009C                     __pcstackBANK0:
   252                           	opt callstack 0
   253  00009C                     main@buf:
   254                           	opt callstack 0
   255                           
   256                           ; 10 bytes @ 0x0
   257  00009C                     	ds	10
   258                           
   259                           	psect	cstackCOMRAM
   260  000001                     __pcstackCOMRAM:
   261                           	opt callstack 0
   262  000001                     ??_InterruptHandlerHigh:
   263  000001                     
   264                           ; 1 bytes @ 0x0
   265  000001                     	ds	2
   266  000003                     ??_LCDout:
   267  000003                     ?_strlen:
   268                           	opt callstack 0
   269  000003                     ?_isdigit:
   270                           	opt callstack 0
   271  000003                     ?_isspace:
   272                           	opt callstack 0
   273  000003                     ?___wmul:
   274                           	opt callstack 0
   275  000003                     ___wmul@multiplier:
   276                           	opt callstack 0
   277  000003                     isdigit@c:
   278                           	opt callstack 0
   279  000003                     isspace@c:
   280                           	opt callstack 0
   281  000003                     fputc@c:
   282                           	opt callstack 0
   283  000003                     strlen@s:
   284                           	opt callstack 0
   285                           
   286                           ; 2 bytes @ 0x2
   287  000003                     	ds	1
   288  000004                     LCDout@number:
   289                           	opt callstack 0
   290                           
   291                           ; 1 bytes @ 0x3
   292  000004                     	ds	1
   293  000005                     ??_isdigit:
   294  000005                     ??_isspace:
   295  000005                     SendLCD@type:
   296                           	opt callstack 0
   297  000005                     ___wmul@multiplicand:
   298                           	opt callstack 0
   299  000005                     fputc@fp:
   300                           	opt callstack 0
   301  000005                     strlen@a:
   302                           	opt callstack 0
   303                           
   304                           ; 2 bytes @ 0x4
   305  000005                     	ds	1
   306  000006                     SendLCD@Byte:
   307                           	opt callstack 0
   308                           
   309                           ; 1 bytes @ 0x5
   310  000006                     	ds	1
   311  000007                     ??_fputc:
   312  000007                     ??_LCD_Init:
   313  000007                     SetLine@line:
   314                           	opt callstack 0
   315  000007                     LCD_String@string:
   316                           	opt callstack 0
   317  000007                     ___wmul@product:
   318                           	opt callstack 0
   319                           
   320                           ; 2 bytes @ 0x6
   321  000007                     	ds	2
   322  000009                     _isspace$1603:
   323                           	opt callstack 0
   324                           
   325                           ; 1 bytes @ 0x8
   326  000009                     	ds	1
   327  00000A                     ?_atoi:
   328                           	opt callstack 0
   329  00000A                     atoi@s:
   330                           	opt callstack 0
   331                           
   332                           ; 2 bytes @ 0x9
   333  00000A                     	ds	2
   334  00000C                     ??_atoi:
   335  00000C                     ?_stoa:
   336                           	opt callstack 0
   337  00000C                     stoa@fp:
   338                           	opt callstack 0
   339                           
   340                           ; 2 bytes @ 0xB
   341  00000C                     	ds	2
   342  00000E                     stoa@s:
   343                           	opt callstack 0
   344                           
   345                           ; 2 bytes @ 0xD
   346  00000E                     	ds	2
   347  000010                     ??_stoa:
   348  000010                     atoi@neg:
   349                           	opt callstack 0
   350                           
   351                           ; 2 bytes @ 0xF
   352  000010                     	ds	1
   353  000011                     stoa@nuls:
   354                           	opt callstack 0
   355                           
   356                           ; 7 bytes @ 0x10
   357  000011                     	ds	1
   358  000012                     _atoi$1585:
   359                           	opt callstack 0
   360                           
   361                           ; 2 bytes @ 0x11
   362  000012                     	ds	2
   363  000014                     _atoi$1587:
   364                           	opt callstack 0
   365                           
   366                           ; 2 bytes @ 0x13
   367  000014                     	ds	2
   368  000016                     _atoi$1586:
   369                           	opt callstack 0
   370                           
   371                           ; 1 bytes @ 0x15
   372  000016                     	ds	1
   373  000017                     atoi@n:
   374                           	opt callstack 0
   375                           
   376                           ; 2 bytes @ 0x16
   377  000017                     	ds	1
   378  000018                     stoa@i:
   379                           	opt callstack 0
   380                           
   381                           ; 2 bytes @ 0x17
   382  000018                     	ds	2
   383  00001A                     stoa@w:
   384                           	opt callstack 0
   385                           
   386                           ; 2 bytes @ 0x19
   387  00001A                     	ds	2
   388  00001C                     stoa@cp:
   389                           	opt callstack 0
   390                           
   391                           ; 2 bytes @ 0x1B
   392  00001C                     	ds	2
   393  00001E                     stoa@p:
   394                           	opt callstack 0
   395                           
   396                           ; 2 bytes @ 0x1D
   397  00001E                     	ds	2
   398  000020                     stoa@l:
   399                           	opt callstack 0
   400                           
   401                           ; 2 bytes @ 0x1F
   402  000020                     	ds	2
   403  000022                     ?_vfpfcnvrt:
   404                           	opt callstack 0
   405  000022                     vfpfcnvrt@fp:
   406                           	opt callstack 0
   407                           
   408                           ; 2 bytes @ 0x21
   409  000022                     	ds	2
   410  000024                     vfpfcnvrt@fmt:
   411                           	opt callstack 0
   412                           
   413                           ; 2 bytes @ 0x23
   414  000024                     	ds	2
   415  000026                     vfpfcnvrt@ap:
   416                           	opt callstack 0
   417                           
   418                           ; 2 bytes @ 0x25
   419  000026                     	ds	2
   420  000028                     ??_vfpfcnvrt:
   421                           
   422                           ; 1 bytes @ 0x27
   423  000028                     	ds	4
   424  00002C                     vfpfcnvrt@cp:
   425                           	opt callstack 0
   426                           
   427                           ; 2 bytes @ 0x2B
   428  00002C                     	ds	2
   429  00002E                     _vfpfcnvrt$1130:
   430                           	opt callstack 0
   431                           
   432                           ; 2 bytes @ 0x2D
   433  00002E                     	ds	2
   434  000030                     ?_vfprintf:
   435                           	opt callstack 0
   436  000030                     vfprintf@fp:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0x2F
   440  000030                     	ds	2
   441  000032                     vfprintf@fmt:
   442                           	opt callstack 0
   443                           
   444                           ; 2 bytes @ 0x31
   445  000032                     	ds	2
   446  000034                     vfprintf@ap:
   447                           	opt callstack 0
   448                           
   449                           ; 2 bytes @ 0x33
   450  000034                     	ds	2
   451  000036                     vfprintf@cfmt:
   452                           	opt callstack 0
   453                           
   454                           ; 2 bytes @ 0x35
   455  000036                     	ds	2
   456  000038                     ?_sprintf:
   457                           	opt callstack 0
   458  000038                     sprintf@s:
   459                           	opt callstack 0
   460                           
   461                           ; 2 bytes @ 0x37
   462  000038                     	ds	2
   463  00003A                     sprintf@fmt:
   464                           	opt callstack 0
   465                           
   466                           ; 2 bytes @ 0x39
   467  00003A                     	ds	4
   468  00003E                     
   469                           ; 1 bytes @ 0x3D
   470  00003E                     	ds	2
   471  000040                     sprintf@ap:
   472                           	opt callstack 0
   473                           
   474                           ; 2 bytes @ 0x3F
   475  000040                     	ds	2
   476  000042                     sprintf@f:
   477                           	opt callstack 0
   478                           
   479                           ; 6 bytes @ 0x41
   480  000042                     	ds	6
   481  000048                     ??_main:
   482                           
   483                           ; 1 bytes @ 0x47
   484  000048                     	ds	2
   485                           
   486 ;;
   487 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   488 ;;
   489 ;; *************** function _main *****************
   490 ;; Defined at:
   491 ;;		line 19 in file "main.c"
   492 ;; Parameters:    Size  Location     Type
   493 ;;		None
   494 ;; Auto vars:     Size  Location     Type
   495 ;;  buf            10    0[BANK0 ] unsigned char [10]
   496 ;;  i               1    0        unsigned char 
   497 ;;  kms             1    0        unsigned char 
   498 ;;  j               1    0        unsigned char 
   499 ;; Return value:  Size  Location     Type
   500 ;;                  1    wreg      void 
   501 ;; Registers used:
   502 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   503 ;; Tracked objects:
   504 ;;		On entry : 0/0
   505 ;;		On exit  : 0/0
   506 ;;		Unchanged: 0/0
   507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   508 ;;      Params:         0       0       0       0
   509 ;;      Locals:         0      11       0       0
   510 ;;      Temps:          2       0       0       0
   511 ;;      Totals:         2      11       0       0
   512 ;;Total ram usage:       13 bytes
   513 ;; Hardware stack levels required when called:    7
   514 ;; This function calls:
   515 ;;		_LCD_Init
   516 ;;		_LCD_String
   517 ;;		_SetLine
   518 ;;		_initSerial
   519 ;;		_sprintf
   520 ;; This function is called by:
   521 ;;		Startup code after reset
   522 ;; This function uses a non-reentrant model
   523 ;;
   524                           
   525                           	psect	text0
   526  000A88                     __ptext0:
   527                           	opt callstack 0
   528  000A88                     _main:
   529                           	opt callstack 24
   530  000A88                     
   531                           ;main.c: 20:     OSCCON = 0x72;
   532  000A88  0E72               	movlw	114
   533  000A8A  6ED3               	movwf	211,c	;volatile
   534  000A8C                     l198:
   535  000A8C  A4D3               	btfss	211,2,c	;volatile
   536  000A8E  EF4B  F005         	goto	u1431
   537  000A92  EF4D  F005         	goto	u1430
   538  000A96                     u1431:
   539  000A96  EF46  F005         	goto	l198
   540  000A9A                     u1430:
   541  000A9A                     
   542                           ;main.c: 22:     initSerial();
   543  000A9A  ECC0  F006         	call	_initSerial	;wreg free
   544  000A9E                     
   545                           ;main.c: 23:     LCD_Init();
   546  000A9E  ECB3  F004         	call	_LCD_Init	;wreg free
   547  000AA2                     
   548                           ;main.c: 24:     SetLine(1);
   549  000AA2  0E01               	movlw	1
   550  000AA4  EC7B  F006         	call	_SetLine
   551  000AA8                     
   552                           ;main.c: 25:     INTCONbits.GIEH = 1;
   553  000AA8  8EF2               	bsf	242,7,c	;volatile
   554  000AAA                     
   555                           ;main.c: 26:     INTCONbits.GIEL = 1;
   556  000AAA  8CF2               	bsf	242,6,c	;volatile
   557  000AAC                     
   558                           ;main.c: 27:     RCONbits.IPEN = 1;
   559  000AAC  8ED0               	bsf	208,7,c	;volatile
   560  000AAE                     
   561                           ;main.c: 28:     PIE1bits.RCIE = 1;
   562  000AAE  8A9D               	bsf	157,5,c	;volatile
   563  000AB0                     l2306:
   564                           
   565                           ;main.c: 36:         sprintf(buf,"%.10s",A[1]);
   566  000AB0  0E9C               	movlw	low main@buf
   567  000AB2  6E38               	movwf	sprintf@s^0,c
   568  000AB4  0E00               	movlw	high main@buf
   569  000AB6  6E39               	movwf	(sprintf@s+1)^0,c
   570  000AB8  0E01               	movlw	low STR_1
   571  000ABA  6E3A               	movwf	sprintf@fmt^0,c
   572  000ABC  0E03               	movlw	high STR_1
   573  000ABE  6E3B               	movwf	(sprintf@fmt+1)^0,c
   574  000AC0  C081  F03C         	movff	_A+1,?_sprintf+4	;volatile
   575  000AC4  6A3D               	clrf	(?_sprintf+5)^0,c
   576  000AC6  ECFF  F005         	call	_sprintf	;wreg free
   577  000ACA                     
   578                           ;main.c: 38:         LCD_String(buf);
   579  000ACA  0E9C               	movlw	low main@buf
   580  000ACC  6E07               	movwf	LCD_String@string^0,c
   581  000ACE  0E00               	movlw	high main@buf
   582  000AD0  6E08               	movwf	(LCD_String@string+1)^0,c
   583  000AD2  EC26  F006         	call	_LCD_String	;wreg free
   584  000AD6                     
   585                           ;main.c: 39:         _delay((unsigned long)((100)*(8000000/4000.0)));
   586  000AD6  0E02               	movlw	2
   587  000AD8  6E49               	movwf	(??_main+1)^0,c
   588  000ADA  0E04               	movlw	4
   589  000ADC  6E48               	movwf	??_main^0,c
   590  000ADE  0EBA               	movlw	186
   591  000AE0                     u1447:
   592  000AE0  2EE8               	decfsz	wreg,f,c
   593  000AE2  D7FE               	bra	u1447
   594  000AE4  2E48               	decfsz	??_main^0,f,c
   595  000AE6  D7FC               	bra	u1447
   596  000AE8  2E49               	decfsz	(??_main+1)^0,f,c
   597  000AEA  D7FA               	bra	u1447
   598  000AEC  D000               	nop2	
   599  000AEE  EF58  F005         	goto	l2306
   600  000AF2  EF1F  F000         	goto	start
   601  000AF6                     __end_of_main:
   602                           	opt callstack 0
   603                           
   604 ;; *************** function _sprintf *****************
   605 ;; Defined at:
   606 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_sprintf.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;  s               2   55[COMRAM] PTR unsigned char 
   609 ;;		 -> main@buf(10), 
   610 ;;  fmt             2   57[COMRAM] PTR const unsigned char 
   611 ;;		 -> STR_1(6), 
   612 ;; Auto vars:     Size  Location     Type
   613 ;;  f               6   65[COMRAM] struct _IO_FILE
   614 ;;  ap              2   63[COMRAM] PTR void [1]
   615 ;;		 -> ?_sprintf(2), 
   616 ;;  ret             2    0        int 
   617 ;; Return value:  Size  Location     Type
   618 ;;                  2   55[COMRAM] int 
   619 ;; Registers used:
   620 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   621 ;; Tracked objects:
   622 ;;		On entry : 0/0
   623 ;;		On exit  : 0/0
   624 ;;		Unchanged: 0/0
   625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   626 ;;      Params:         6       0       0       0
   627 ;;      Locals:        10       0       0       0
   628 ;;      Temps:          0       0       0       0
   629 ;;      Totals:        16       0       0       0
   630 ;;Total ram usage:       16 bytes
   631 ;; Hardware stack levels used:    1
   632 ;; Hardware stack levels required when called:    6
   633 ;; This function calls:
   634 ;;		_vfprintf
   635 ;; This function is called by:
   636 ;;		_main
   637 ;; This function uses a non-reentrant model
   638 ;;
   639                           
   640                           	psect	text1
   641  000BFE                     __ptext1:
   642                           	opt callstack 0
   643  000BFE                     _sprintf:
   644                           	opt callstack 24
   645  000BFE  0E3C               	movlw	low (?_sprintf+4)
   646  000C00  6E40               	movwf	sprintf@ap^0,c
   647  000C02  0E00               	movlw	high (?_sprintf+4)
   648  000C04  6E41               	movwf	(sprintf@ap+1)^0,c
   649  000C06  C038  F042         	movff	sprintf@s,sprintf@f
   650  000C0A  C039  F043         	movff	sprintf@s+1,sprintf@f+1
   651  000C0E  0E00               	movlw	0
   652  000C10  6E45               	movwf	(sprintf@f+3)^0,c
   653  000C12  0E00               	movlw	0
   654  000C14  6E44               	movwf	(sprintf@f+2)^0,c
   655  000C16  0E00               	movlw	0
   656  000C18  6E47               	movwf	(sprintf@f+5)^0,c
   657  000C1A  0E00               	movlw	0
   658  000C1C  6E46               	movwf	(sprintf@f+4)^0,c
   659  000C1E  0E42               	movlw	low sprintf@f
   660  000C20  6E30               	movwf	vfprintf@fp^0,c
   661  000C22  0E00               	movlw	high sprintf@f
   662  000C24  6E31               	movwf	(vfprintf@fp+1)^0,c
   663  000C26  C03A  F032         	movff	sprintf@fmt,vfprintf@fmt
   664  000C2A  C03B  F033         	movff	sprintf@fmt+1,vfprintf@fmt+1
   665  000C2E  0E40               	movlw	low sprintf@ap
   666  000C30  6E34               	movwf	vfprintf@ap^0,c
   667  000C32  0E00               	movlw	high sprintf@ap
   668  000C34  6E35               	movwf	(vfprintf@ap+1)^0,c
   669  000C36  EC7B  F005         	call	_vfprintf	;wreg free
   670  000C3A  5044               	movf	(sprintf@f+2)^0,w,c
   671  000C3C  2438               	addwf	sprintf@s^0,w,c
   672  000C3E  6ED9               	movwf	fsr2l,c
   673  000C40  5045               	movf	(sprintf@f+3)^0,w,c
   674  000C42  2039               	addwfc	(sprintf@s+1)^0,w,c
   675  000C44  6EDA               	movwf	fsr2h,c
   676  000C46  0E00               	movlw	0
   677  000C48  6EDF               	movwf	indf2,c
   678  000C4A  0012               	return		;funcret
   679  000C4C                     __end_of_sprintf:
   680                           	opt callstack 0
   681                           
   682 ;; *************** function _vfprintf *****************
   683 ;; Defined at:
   684 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;  fp              2   47[COMRAM] PTR struct _IO_FILE
   687 ;;		 -> sprintf@f(6), 
   688 ;;  fmt             2   49[COMRAM] PTR const unsigned char 
   689 ;;		 -> STR_1(6), 
   690 ;;  ap              2   51[COMRAM] PTR PTR void 
   691 ;;		 -> sprintf@ap(2), 
   692 ;; Auto vars:     Size  Location     Type
   693 ;;  cfmt            2   53[COMRAM] PTR unsigned char 
   694 ;;		 -> STR_1(6), 
   695 ;; Return value:  Size  Location     Type
   696 ;;                  2   47[COMRAM] int 
   697 ;; Registers used:
   698 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   704 ;;      Params:         6       0       0       0
   705 ;;      Locals:         2       0       0       0
   706 ;;      Temps:          0       0       0       0
   707 ;;      Totals:         8       0       0       0
   708 ;;Total ram usage:        8 bytes
   709 ;; Hardware stack levels used:    1
   710 ;; Hardware stack levels required when called:    5
   711 ;; This function calls:
   712 ;;		_vfpfcnvrt
   713 ;; This function is called by:
   714 ;;		_sprintf
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           	psect	text2
   719  000AF6                     __ptext2:
   720                           	opt callstack 0
   721  000AF6                     _vfprintf:
   722                           	opt callstack 24
   723  000AF6                     
   724                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   725  000AF6  C032  F036         	movff	vfprintf@fmt,vfprintf@cfmt
   726  000AFA  C033  F037         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   727  000AFE                     
   728                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   729  000AFE  0E00               	movlw	0
   730  000B00  6E4B               	movwf	(_nout+1)^0,c
   731  000B02  0E00               	movlw	0
   732  000B04  6E4A               	movwf	_nout^0,c
   733                           
   734                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   735  000B06  EF97  F005         	goto	l2152
   736  000B0A                     l2150:
   737                           
   738                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   739  000B0A  C030  F022         	movff	vfprintf@fp,vfpfcnvrt@fp
   740  000B0E  C031  F023         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   741  000B12  0E36               	movlw	low vfprintf@cfmt
   742  000B14  6E24               	movwf	vfpfcnvrt@fmt^0,c
   743  000B16  0E00               	movlw	high vfprintf@cfmt
   744  000B18  6E25               	movwf	(vfpfcnvrt@fmt+1)^0,c
   745  000B1A  C034  F026         	movff	vfprintf@ap,vfpfcnvrt@ap
   746  000B1E  C035  F027         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   747  000B22  EC84  F001         	call	_vfpfcnvrt	;wreg free
   748  000B26  5022               	movf	?_vfpfcnvrt^0,w,c
   749  000B28  264A               	addwf	_nout^0,f,c
   750  000B2A  5023               	movf	(?_vfpfcnvrt+1)^0,w,c
   751  000B2C  224B               	addwfc	(_nout+1)^0,f,c
   752  000B2E                     l2152:
   753                           
   754                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   755  000B2E  C036  FFF6         	movff	vfprintf@cfmt,tblptrl
   756  000B32  C037  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   757  000B36                     	if	0	;tblptru may be non-zero
   758  000B36                     	endif
   759  000B36                     	if	0	;tblptru may be non-zero
   760  000B36                     	endif
   761  000B36  0008               	tblrd		*
   762  000B38  50F5               	movf	tablat,w,c
   763  000B3A  0900               	iorlw	0
   764  000B3C  A4D8               	btfss	status,2,c
   765  000B3E  EFA3  F005         	goto	u1341
   766  000B42  EFA5  F005         	goto	u1340
   767  000B46                     u1341:
   768  000B46  EF85  F005         	goto	l2150
   769  000B4A                     u1340:
   770  000B4A                     
   771                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   772  000B4A  C04A  F030         	movff	_nout,?_vfprintf
   773  000B4E  C04B  F031         	movff	_nout+1,?_vfprintf+1
   774  000B52  0012               	return		;funcret
   775  000B54                     __end_of_vfprintf:
   776                           	opt callstack 0
   777                           
   778 ;; *************** function _vfpfcnvrt *****************
   779 ;; Defined at:
   780 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;  fp              2   33[COMRAM] PTR struct _IO_FILE
   783 ;;		 -> sprintf@f(6), 
   784 ;;  fmt             2   35[COMRAM] PTR PTR unsigned char 
   785 ;;		 -> vfprintf@cfmt(2), 
   786 ;;  ap              2   37[COMRAM] PTR PTR void 
   787 ;;		 -> sprintf@ap(2), 
   788 ;; Auto vars:     Size  Location     Type
   789 ;;  llu             8    0        unsigned long long 
   790 ;;  ll              8    0        long long 
   791 ;;  f               4    0        long long 
   792 ;;  vp              3    0        PTR void 
   793 ;;  ct              3    0        unsigned char [3]
   794 ;;  cp              2   43[COMRAM] PTR unsigned char 
   795 ;;		 -> ?_sprintf(2), 
   796 ;;  i               2    0        int 
   797 ;;  done            2    0        int 
   798 ;;  c               1    0        unsigned char 
   799 ;; Return value:  Size  Location     Type
   800 ;;                  2   33[COMRAM] int 
   801 ;; Registers used:
   802 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   808 ;;      Params:         6       0       0       0
   809 ;;      Locals:         4       0       0       0
   810 ;;      Temps:          4       0       0       0
   811 ;;      Totals:        14       0       0       0
   812 ;;Total ram usage:       14 bytes
   813 ;; Hardware stack levels used:    1
   814 ;; Hardware stack levels required when called:    4
   815 ;; This function calls:
   816 ;;		_atoi
   817 ;;		_fputc
   818 ;;		_isdigit
   819 ;;		_stoa
   820 ;; This function is called by:
   821 ;;		_vfprintf
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           	psect	text3
   826  000308                     __ptext3:
   827                           	opt callstack 0
   828  000308                     _vfpfcnvrt:
   829                           	opt callstack 24
   830  000308                     
   831                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   832  000308  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   833  00030C  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   834  000310  CFDE FFF6          	movff	postinc2,tblptrl
   835  000314  CFDD FFF7          	movff	postdec2,tblptrh
   836  000318                     	if	0	;tblptru may be non-zero
   837  000318                     	endif
   838  000318                     	if	0	;tblptru may be non-zero
   839  000318                     	endif
   840  000318  0008               	tblrd		*
   841  00031A  50F5               	movf	tablat,w,c
   842  00031C  0A25               	xorlw	37
   843  00031E  A4D8               	btfss	status,2,c
   844  000320  EF94  F001         	goto	u1251
   845  000324  EF96  F001         	goto	u1250
   846  000328                     u1251:
   847  000328  EFA9  F002         	goto	l2130
   848  00032C                     u1250:
   849  00032C                     
   850                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   851  00032C  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   852  000330  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   853  000334  2ADE               	incf	postinc2,f,c
   854  000336  0E00               	movlw	0
   855  000338  22DD               	addwfc	postdec2,f,c
   856  00033A                     
   857                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   858  00033A  0E00               	movlw	0
   859  00033C  6E4D               	movwf	(_width+1)^0,c
   860  00033E  0E00               	movlw	0
   861  000340  6E4C               	movwf	_width^0,c
   862  000342  C04C  F050         	movff	_width,_flags
   863  000346  C04D  F051         	movff	_width+1,_flags+1
   864  00034A                     
   865                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   866  00034A  684E               	setf	_prec^0,c
   867  00034C  684F               	setf	(_prec+1)^0,c
   868  00034E                     
   869                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 740:       
      +                            if ((*fmt)[0] == '.') {
   870  00034E  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   871  000352  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   872  000356  CFDE FFF6          	movff	postinc2,tblptrl
   873  00035A  CFDD FFF7          	movff	postdec2,tblptrh
   874  00035E                     	if	0	;tblptru may be non-zero
   875  00035E                     	endif
   876  00035E                     	if	0	;tblptru may be non-zero
   877  00035E                     	endif
   878  00035E  0008               	tblrd		*
   879  000360  50F5               	movf	tablat,w,c
   880  000362  0A2E               	xorlw	46
   881  000364  A4D8               	btfss	status,2,c
   882  000366  EFB7  F001         	goto	u1261
   883  00036A  EFB9  F001         	goto	u1260
   884  00036E                     u1261:
   885  00036E  EF36  F002         	goto	l2106
   886  000372                     u1260:
   887  000372                     
   888                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 741:       
      +                                prec = 0;
   889  000372  0E00               	movlw	0
   890  000374  6E4F               	movwf	(_prec+1)^0,c
   891  000376  0E00               	movlw	0
   892  000378  6E4E               	movwf	_prec^0,c
   893  00037A                     
   894                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 742:       
      +                                ++*fmt;
   895  00037A  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   896  00037E  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   897  000382  2ADE               	incf	postinc2,f,c
   898  000384  0E00               	movlw	0
   899  000386  22DD               	addwfc	postdec2,f,c
   900  000388                     
   901                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 743:       
      +                                if ((*fmt)[0] == '*') {
   902  000388  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   903  00038C  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   904  000390  CFDE FFF6          	movff	postinc2,tblptrl
   905  000394  CFDD FFF7          	movff	postdec2,tblptrh
   906  000398                     	if	0	;tblptru may be non-zero
   907  000398                     	endif
   908  000398                     	if	0	;tblptru may be non-zero
   909  000398                     	endif
   910  000398  0008               	tblrd		*
   911  00039A  50F5               	movf	tablat,w,c
   912  00039C  0A2A               	xorlw	42
   913  00039E  A4D8               	btfss	status,2,c
   914  0003A0  EFD4  F001         	goto	u1271
   915  0003A4  EFD6  F001         	goto	u1270
   916  0003A8                     u1271:
   917  0003A8  EFF3  F001         	goto	l2096
   918  0003AC                     u1270:
   919  0003AC                     
   920                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 744:       
      +                                    ++*fmt;
   921  0003AC  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   922  0003B0  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   923  0003B4  2ADE               	incf	postinc2,f,c
   924  0003B6  0E00               	movlw	0
   925  0003B8  22DD               	addwfc	postdec2,f,c
   926                           
   927                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 745:       
      +                                    prec = (*(int *)__va_arg(*(int **)ap, (int)0));
   928  0003BA  C026  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   929  0003BE  C027  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   930  0003C2  CFDF F028          	movff	indf2,??_vfpfcnvrt
   931  0003C6  0E02               	movlw	2
   932  0003C8  26DE               	addwf	postinc2,f,c
   933  0003CA  CFDF F029          	movff	indf2,??_vfpfcnvrt+1
   934  0003CE  0E00               	movlw	0
   935  0003D0  22DD               	addwfc	postdec2,f,c
   936  0003D2  C028  FFD9         	movff	??_vfpfcnvrt,fsr2l
   937  0003D6  C029  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   938  0003DA  CFDE F04E          	movff	postinc2,_prec
   939  0003DE  CFDD F04F          	movff	postdec2,_prec+1
   940                           
   941                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 746:       
      +                                } else {
   942  0003E2  EF36  F002         	goto	l2106
   943  0003E6                     l2096:
   944                           
   945                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 747:       
      +                                    prec = atoi(*fmt);
   946  0003E6  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   947  0003EA  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   948  0003EE  CFDE F00A          	movff	postinc2,atoi@s
   949  0003F2  CFDD F00B          	movff	postdec2,atoi@s+1
   950  0003F6  ECC5  F002         	call	_atoi	;wreg free
   951  0003FA  C00A  F04E         	movff	?_atoi,_prec
   952  0003FE  C00B  F04F         	movff	?_atoi+1,_prec+1
   953                           
   954                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 748:       
      +                                    while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
   955  000402  EF0A  F002         	goto	l2100
   956  000406                     l2098:
   957                           
   958                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 749:       
      +                                        ++*fmt;
   959  000406  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   960  00040A  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   961  00040E  2ADE               	incf	postinc2,f,c
   962  000410  0E00               	movlw	0
   963  000412  22DD               	addwfc	postdec2,f,c
   964  000414                     l2100:
   965  000414  0ED0               	movlw	208
   966  000416  6E28               	movwf	??_vfpfcnvrt^0,c
   967  000418  0EFF               	movlw	255
   968  00041A  6E29               	movwf	(??_vfpfcnvrt+1)^0,c
   969  00041C  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   970  000420  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   971  000424  CFDE FFF6          	movff	postinc2,tblptrl
   972  000428  CFDD FFF7          	movff	postdec2,tblptrh
   973  00042C                     	if	0	;tblptru may be non-zero
   974  00042C                     	endif
   975  00042C                     	if	0	;tblptru may be non-zero
   976  00042C                     	endif
   977  00042C  0008               	tblrd		*
   978  00042E  50F5               	movf	tablat,w,c
   979  000430  6E2A               	movwf	(??_vfpfcnvrt+2)^0,c
   980  000432  6A2B               	clrf	(??_vfpfcnvrt+3)^0,c
   981  000434  5028               	movf	??_vfpfcnvrt^0,w,c
   982  000436  262A               	addwf	(??_vfpfcnvrt+2)^0,f,c
   983  000438  5029               	movf	(??_vfpfcnvrt+1)^0,w,c
   984  00043A  222B               	addwfc	(??_vfpfcnvrt+3)^0,f,c
   985  00043C  502B               	movf	(??_vfpfcnvrt+3)^0,w,c
   986  00043E  E10A               	bnz	u1280
   987  000440  0E0A               	movlw	10
   988  000442  5C2A               	subwf	(??_vfpfcnvrt+2)^0,w,c
   989  000444  A0D8               	btfss	status,0,c
   990  000446  EF27  F002         	goto	u1281
   991  00044A  EF2A  F002         	goto	u1280
   992  00044E                     u1281:
   993  00044E  0E01               	movlw	1
   994  000450  EF2B  F002         	goto	u1290
   995  000454                     u1280:
   996  000454  0E00               	movlw	0
   997  000456                     u1290:
   998  000456  6E2E               	movwf	_vfpfcnvrt$1130^0,c
   999  000458  6A2F               	clrf	(_vfpfcnvrt$1130+1)^0,c
  1000  00045A  502E               	movf	_vfpfcnvrt$1130^0,w,c
  1001  00045C  102F               	iorwf	(_vfpfcnvrt$1130+1)^0,w,c
  1002  00045E  A4D8               	btfss	status,2,c
  1003  000460  EF34  F002         	goto	u1301
  1004  000464  EF36  F002         	goto	u1300
  1005  000468                     u1301:
  1006  000468  EF03  F002         	goto	l2098
  1007  00046C                     u1300:
  1008  00046C                     l2106:
  1009                           
  1010                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1149:      
      +                             if (*fmt[0] == 's') {
  1011  00046C  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1012  000470  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1013  000474  CFDE FFF6          	movff	postinc2,tblptrl
  1014  000478  CFDD FFF7          	movff	postdec2,tblptrh
  1015  00047C                     	if	0	;tblptru may be non-zero
  1016  00047C                     	endif
  1017  00047C                     	if	0	;tblptru may be non-zero
  1018  00047C                     	endif
  1019  00047C  0008               	tblrd		*
  1020  00047E  50F5               	movf	tablat,w,c
  1021  000480  0A73               	xorlw	115
  1022  000482  A4D8               	btfss	status,2,c
  1023  000484  EF46  F002         	goto	u1311
  1024  000488  EF48  F002         	goto	u1310
  1025  00048C                     u1311:
  1026  00048C  EF73  F002         	goto	l2114
  1027  000490                     u1310:
  1028  000490                     
  1029                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1151:      
      +                                 ++*fmt;
  1030  000490  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1031  000494  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1032  000498  2ADE               	incf	postinc2,f,c
  1033  00049A  0E00               	movlw	0
  1034  00049C  22DD               	addwfc	postdec2,f,c
  1035                           
  1036                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1152:      
      +                                 cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
  1037  00049E  C026  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1038  0004A2  C027  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1039  0004A6  CFDF F028          	movff	indf2,??_vfpfcnvrt
  1040  0004AA  0E02               	movlw	2
  1041  0004AC  26DE               	addwf	postinc2,f,c
  1042  0004AE  CFDF F029          	movff	indf2,??_vfpfcnvrt+1
  1043  0004B2  0E00               	movlw	0
  1044  0004B4  22DD               	addwfc	postdec2,f,c
  1045  0004B6  C028  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1046  0004BA  C029  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1047  0004BE  CFDE F02C          	movff	postinc2,vfpfcnvrt@cp
  1048  0004C2  CFDD F02D          	movff	postdec2,vfpfcnvrt@cp+1
  1049  0004C6                     
  1050                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1154:      
      +                                 return stoa(fp, cp);
  1051  0004C6  C022  F00C         	movff	vfpfcnvrt@fp,stoa@fp
  1052  0004CA  C023  F00D         	movff	vfpfcnvrt@fp+1,stoa@fp+1
  1053  0004CE  C02C  F00E         	movff	vfpfcnvrt@cp,stoa@s
  1054  0004D2  C02D  F00F         	movff	vfpfcnvrt@cp+1,stoa@s+1
  1055  0004D6  EC8D  F003         	call	_stoa	;wreg free
  1056  0004DA  C00C  F022         	movff	?_stoa,?_vfpfcnvrt
  1057  0004DE  C00D  F023         	movff	?_stoa+1,?_vfpfcnvrt+1
  1058  0004E2  EFC4  F002         	goto	l276
  1059  0004E6                     l2114:
  1060                           
  1061                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1062  0004E6  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1063  0004EA  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1064  0004EE  CFDE FFF6          	movff	postinc2,tblptrl
  1065  0004F2  CFDD FFF7          	movff	postdec2,tblptrh
  1066  0004F6                     	if	0	;tblptru may be non-zero
  1067  0004F6                     	endif
  1068  0004F6                     	if	0	;tblptru may be non-zero
  1069  0004F6                     	endif
  1070  0004F6  0008               	tblrd		*
  1071  0004F8  50F5               	movf	tablat,w,c
  1072  0004FA  0A25               	xorlw	37
  1073  0004FC  A4D8               	btfss	status,2,c
  1074  0004FE  EF83  F002         	goto	u1321
  1075  000502  EF85  F002         	goto	u1320
  1076  000506                     u1321:
  1077  000506  EF9C  F002         	goto	l2124
  1078  00050A                     u1320:
  1079  00050A                     
  1080                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1081  00050A  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1082  00050E  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1083  000512  2ADE               	incf	postinc2,f,c
  1084  000514  0E00               	movlw	0
  1085  000516  22DD               	addwfc	postdec2,f,c
  1086  000518                     
  1087                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1088  000518  0E00               	movlw	0
  1089  00051A  6E04               	movwf	(fputc@c+1)^0,c
  1090  00051C  0E25               	movlw	37
  1091  00051E  6E03               	movwf	fputc@c^0,c
  1092  000520  C022  F005         	movff	vfpfcnvrt@fp,fputc@fp
  1093  000524  C023  F006         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1094  000528  EC4E  F004         	call	_fputc	;wreg free
  1095  00052C                     l2120:
  1096                           
  1097                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1098  00052C  0E00               	movlw	0
  1099  00052E  6E23               	movwf	(?_vfpfcnvrt+1)^0,c
  1100  000530  0E01               	movlw	1
  1101  000532  6E22               	movwf	?_vfpfcnvrt^0,c
  1102  000534  EFC4  F002         	goto	l276
  1103  000538                     l2124:
  1104                           
  1105                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1106  000538  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1107  00053C  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1108  000540  2ADE               	incf	postinc2,f,c
  1109  000542  0E00               	movlw	0
  1110  000544  22DD               	addwfc	postdec2,f,c
  1111  000546                     
  1112                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1113  000546  0E00               	movlw	0
  1114  000548  6E23               	movwf	(?_vfpfcnvrt+1)^0,c
  1115  00054A  0E00               	movlw	0
  1116  00054C  6E22               	movwf	?_vfpfcnvrt^0,c
  1117  00054E  EFC4  F002         	goto	l276
  1118  000552                     l2130:
  1119                           
  1120                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1121  000552  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1122  000556  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1123  00055A  CFDE FFF6          	movff	postinc2,tblptrl
  1124  00055E  CFDD FFF7          	movff	postdec2,tblptrh
  1125  000562                     	if	0	;tblptru may be non-zero
  1126  000562                     	endif
  1127  000562                     	if	0	;tblptru may be non-zero
  1128  000562                     	endif
  1129  000562  0008               	tblrd		*
  1130  000564  50F5               	movf	tablat,w,c
  1131  000566  6E03               	movwf	fputc@c^0,c
  1132  000568  6A04               	clrf	(fputc@c+1)^0,c
  1133  00056A  C022  F005         	movff	vfpfcnvrt@fp,fputc@fp
  1134  00056E  C023  F006         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1135  000572  EC4E  F004         	call	_fputc	;wreg free
  1136  000576                     
  1137                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1138  000576  C024  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1139  00057A  C025  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1140  00057E  2ADE               	incf	postinc2,f,c
  1141  000580  0E00               	movlw	0
  1142  000582  22DD               	addwfc	postdec2,f,c
  1143  000584  EF96  F002         	goto	l2120
  1144  000588                     l276:
  1145  000588  0012               	return		;funcret
  1146  00058A                     __end_of_vfpfcnvrt:
  1147                           	opt callstack 0
  1148                           
  1149 ;; *************** function _stoa *****************
  1150 ;; Defined at:
  1151 ;;		line 546 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1154 ;;		 -> sprintf@f(6), 
  1155 ;;  s               2   13[COMRAM] PTR unsigned char 
  1156 ;;		 -> ?_sprintf(2), 
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;  nuls            7   16[COMRAM] unsigned char [7]
  1159 ;;  l               2   31[COMRAM] int 
  1160 ;;  p               2   29[COMRAM] int 
  1161 ;;  cp              2   27[COMRAM] PTR unsigned char 
  1162 ;;		 -> ?_sprintf(2), stoa@nuls(7), 
  1163 ;;  w               2   25[COMRAM] int 
  1164 ;;  i               2   23[COMRAM] int 
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  2   11[COMRAM] int 
  1167 ;; Registers used:
  1168 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1174 ;;      Params:         4       0       0       0
  1175 ;;      Locals:        17       0       0       0
  1176 ;;      Temps:          1       0       0       0
  1177 ;;      Totals:        22       0       0       0
  1178 ;;Total ram usage:       22 bytes
  1179 ;; Hardware stack levels used:    1
  1180 ;; Hardware stack levels required when called:    3
  1181 ;; This function calls:
  1182 ;;		_fputc
  1183 ;;		_strlen
  1184 ;; This function is called by:
  1185 ;;		_vfpfcnvrt
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           	psect	text4
  1190  00071A                     __ptext4:
  1191                           	opt callstack 0
  1192  00071A                     _stoa:
  1193                           	opt callstack 24
  1194  00071A                     
  1195                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 546: static
      +                           int stoa(FILE *fp, char *s);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\
      +                          common\doprnt.c: 547: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\commo
      +                          n\doprnt.c: 548:     char *cp, nuls[] = "(null)";
  1196  00071A  EE20  F0A6         	lfsr	2,stoa@F1131
  1197  00071E  EE10  F011         	lfsr	1,stoa@nuls
  1198  000722  0E06               	movlw	6
  1199  000724                     u1091:
  1200  000724  CFDB FFE3          	movff	plusw2,plusw1
  1201  000728  06E8               	decf	wreg,f,c
  1202  00072A  E2FC               	bc	u1091
  1203  00072C                     
  1204                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 549:     in
      +                          t i, l, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c
      +                          : 552:     cp = s;
  1205  00072C  C00E  F01C         	movff	stoa@s,stoa@cp
  1206  000730  C00F  F01D         	movff	stoa@s+1,stoa@cp+1
  1207  000734                     
  1208                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 553:     if
      +                           (!cp) {
  1209  000734  501C               	movf	stoa@cp^0,w,c
  1210  000736  101D               	iorwf	(stoa@cp+1)^0,w,c
  1211  000738  A4D8               	btfss	status,2,c
  1212  00073A  EFA1  F003         	goto	u1101
  1213  00073E  EFA3  F003         	goto	u1100
  1214  000742                     u1101:
  1215  000742  EFA7  F003         	goto	l1996
  1216  000746                     u1100:
  1217  000746                     
  1218                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 554:       
      +                            cp = nuls;
  1219  000746  0E11               	movlw	low stoa@nuls
  1220  000748  6E1C               	movwf	stoa@cp^0,c
  1221  00074A  0E00               	movlw	high stoa@nuls
  1222  00074C  6E1D               	movwf	(stoa@cp+1)^0,c
  1223  00074E                     l1996:
  1224                           
  1225                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 558:     l 
      +                          = strlen(cp);
  1226  00074E  C01C  F003         	movff	stoa@cp,strlen@s
  1227  000752  C01D  F004         	movff	stoa@cp+1,strlen@s+1
  1228  000756  EC60  F006         	call	_strlen	;wreg free
  1229  00075A  C003  F020         	movff	?_strlen,stoa@l
  1230  00075E  C004  F021         	movff	?_strlen+1,stoa@l+1
  1231  000762                     
  1232                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 559:     p 
      +                          = prec;
  1233  000762  C04E  F01E         	movff	_prec,stoa@p
  1234  000766  C04F  F01F         	movff	_prec+1,stoa@p+1
  1235  00076A                     
  1236                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 560:     l 
      +                          = (!(p < 0) && (p < l)) ? p : l;
  1237  00076A  BE1F               	btfsc	(stoa@p+1)^0,7,c
  1238  00076C  EFBA  F003         	goto	u1111
  1239  000770  EFBC  F003         	goto	u1110
  1240  000774                     u1111:
  1241  000774  EFD1  F003         	goto	l247
  1242  000778                     u1110:
  1243  000778  5020               	movf	stoa@l^0,w,c
  1244  00077A  5C1E               	subwf	stoa@p^0,w,c
  1245  00077C  501F               	movf	(stoa@p+1)^0,w,c
  1246  00077E  0A80               	xorlw	128
  1247  000780  6E10               	movwf	??_stoa^0,c
  1248  000782  5021               	movf	(stoa@l+1)^0,w,c
  1249  000784  0A80               	xorlw	128
  1250  000786  5810               	subwfb	??_stoa^0,w,c
  1251  000788  A0D8               	btfss	status,0,c
  1252  00078A  EFC9  F003         	goto	u1121
  1253  00078E  EFCB  F003         	goto	u1120
  1254  000792                     u1121:
  1255  000792  EFCD  F003         	goto	l245
  1256  000796                     u1120:
  1257  000796  EFD1  F003         	goto	l247
  1258  00079A                     l245:
  1259  00079A  C01E  F020         	movff	stoa@p,stoa@l
  1260  00079E  C01F  F021         	movff	stoa@p+1,stoa@l+1
  1261  0007A2                     l247:
  1262                           
  1263                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 561:     p 
      +                          = l;
  1264  0007A2  C020  F01E         	movff	stoa@l,stoa@p
  1265  0007A6  C021  F01F         	movff	stoa@l+1,stoa@p+1
  1266                           
  1267                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 562:     w 
      +                          = width;
  1268  0007AA  C04C  F01A         	movff	_width,stoa@w
  1269  0007AE  C04D  F01B         	movff	_width+1,stoa@w+1
  1270                           
  1271                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 565:     if
      +                           (!(flags & (1 << 0))) {
  1272  0007B2  B050               	btfsc	_flags^0,0,c
  1273  0007B4  EFDE  F003         	goto	u1131
  1274  0007B8  EFE0  F003         	goto	u1130
  1275  0007BC                     u1131:
  1276  0007BC  EFFD  F003         	goto	l2012
  1277  0007C0                     u1130:
  1278  0007C0  EFEE  F003         	goto	l2010
  1279  0007C4                     l2006:
  1280                           
  1281                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 567:       
      +                                fputc(' ', fp);
  1282  0007C4  0E00               	movlw	0
  1283  0007C6  6E04               	movwf	(fputc@c+1)^0,c
  1284  0007C8  0E20               	movlw	32
  1285  0007CA  6E03               	movwf	fputc@c^0,c
  1286  0007CC  C00C  F005         	movff	stoa@fp,fputc@fp
  1287  0007D0  C00D  F006         	movff	stoa@fp+1,fputc@fp+1
  1288  0007D4  EC4E  F004         	call	_fputc	;wreg free
  1289  0007D8                     
  1290                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 568:       
      +                                ++l;
  1291  0007D8  4A20               	infsnz	stoa@l^0,f,c
  1292  0007DA  2A21               	incf	(stoa@l+1)^0,f,c
  1293  0007DC                     l2010:
  1294                           
  1295                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 566:       
      +                            while (l < w) {
  1296  0007DC  501A               	movf	stoa@w^0,w,c
  1297  0007DE  5C20               	subwf	stoa@l^0,w,c
  1298  0007E0  5021               	movf	(stoa@l+1)^0,w,c
  1299  0007E2  0A80               	xorlw	128
  1300  0007E4  6E10               	movwf	??_stoa^0,c
  1301  0007E6  501B               	movf	(stoa@w+1)^0,w,c
  1302  0007E8  0A80               	xorlw	128
  1303  0007EA  5810               	subwfb	??_stoa^0,w,c
  1304  0007EC  A0D8               	btfss	status,0,c
  1305  0007EE  EFFB  F003         	goto	u1141
  1306  0007F2  EFFD  F003         	goto	u1140
  1307  0007F6                     u1141:
  1308  0007F6  EFE2  F003         	goto	l2006
  1309  0007FA                     u1140:
  1310  0007FA                     l2012:
  1311                           
  1312                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 573:     i 
      +                          = 0;
  1313  0007FA  0E00               	movlw	0
  1314  0007FC  6E19               	movwf	(stoa@i+1)^0,c
  1315  0007FE  0E00               	movlw	0
  1316  000800  6E18               	movwf	stoa@i^0,c
  1317                           
  1318                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
  1319  000802  EF16  F004         	goto	l2020
  1320  000806                     l2014:
  1321                           
  1322                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 575:       
      +                            fputc(*cp, fp);
  1323  000806  C01C  FFD9         	movff	stoa@cp,fsr2l
  1324  00080A  C01D  FFDA         	movff	stoa@cp+1,fsr2h
  1325  00080E  50DF               	movf	indf2,w,c
  1326  000810  6E10               	movwf	??_stoa^0,c
  1327  000812  5010               	movf	??_stoa^0,w,c
  1328  000814  6E03               	movwf	fputc@c^0,c
  1329  000816  6A04               	clrf	(fputc@c+1)^0,c
  1330  000818  C00C  F005         	movff	stoa@fp,fputc@fp
  1331  00081C  C00D  F006         	movff	stoa@fp+1,fputc@fp+1
  1332  000820  EC4E  F004         	call	_fputc	;wreg free
  1333  000824                     
  1334                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 576:       
      +                            ++cp;
  1335  000824  4A1C               	infsnz	stoa@cp^0,f,c
  1336  000826  2A1D               	incf	(stoa@cp+1)^0,f,c
  1337  000828                     
  1338                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 577:       
      +                            ++i;
  1339  000828  4A18               	infsnz	stoa@i^0,f,c
  1340  00082A  2A19               	incf	(stoa@i+1)^0,f,c
  1341  00082C                     l2020:
  1342                           
  1343                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
  1344  00082C  501E               	movf	stoa@p^0,w,c
  1345  00082E  5C18               	subwf	stoa@i^0,w,c
  1346  000830  5019               	movf	(stoa@i+1)^0,w,c
  1347  000832  0A80               	xorlw	128
  1348  000834  6E10               	movwf	??_stoa^0,c
  1349  000836  501F               	movf	(stoa@p+1)^0,w,c
  1350  000838  0A80               	xorlw	128
  1351  00083A  5810               	subwfb	??_stoa^0,w,c
  1352  00083C  A0D8               	btfss	status,0,c
  1353  00083E  EF23  F004         	goto	u1151
  1354  000842  EF25  F004         	goto	u1150
  1355  000846                     u1151:
  1356  000846  EF03  F004         	goto	l2014
  1357  00084A                     u1150:
  1358  00084A                     
  1359                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 581:     if
      +                           (flags & (1 << 0)) {
  1360  00084A  A050               	btfss	_flags^0,0,c
  1361  00084C  EF2A  F004         	goto	u1161
  1362  000850  EF2C  F004         	goto	u1160
  1363  000854                     u1161:
  1364  000854  EF49  F004         	goto	l257
  1365  000858                     u1160:
  1366  000858  EF3A  F004         	goto	l2028
  1367  00085C                     l2024:
  1368                           
  1369                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 583:       
      +                                fputc(' ', fp);
  1370  00085C  0E00               	movlw	0
  1371  00085E  6E04               	movwf	(fputc@c+1)^0,c
  1372  000860  0E20               	movlw	32
  1373  000862  6E03               	movwf	fputc@c^0,c
  1374  000864  C00C  F005         	movff	stoa@fp,fputc@fp
  1375  000868  C00D  F006         	movff	stoa@fp+1,fputc@fp+1
  1376  00086C  EC4E  F004         	call	_fputc	;wreg free
  1377  000870                     
  1378                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 584:       
      +                                ++l;
  1379  000870  4A20               	infsnz	stoa@l^0,f,c
  1380  000872  2A21               	incf	(stoa@l+1)^0,f,c
  1381  000874                     l2028:
  1382                           
  1383                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 582:       
      +                            while (l < w) {
  1384  000874  501A               	movf	stoa@w^0,w,c
  1385  000876  5C20               	subwf	stoa@l^0,w,c
  1386  000878  5021               	movf	(stoa@l+1)^0,w,c
  1387  00087A  0A80               	xorlw	128
  1388  00087C  6E10               	movwf	??_stoa^0,c
  1389  00087E  501B               	movf	(stoa@w+1)^0,w,c
  1390  000880  0A80               	xorlw	128
  1391  000882  5810               	subwfb	??_stoa^0,w,c
  1392  000884  A0D8               	btfss	status,0,c
  1393  000886  EF47  F004         	goto	u1171
  1394  00088A  EF49  F004         	goto	u1170
  1395  00088E                     u1171:
  1396  00088E  EF2E  F004         	goto	l2024
  1397  000892                     u1170:
  1398  000892                     l257:
  1399                           
  1400                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 588:     re
      +                          turn l;
  1401  000892  C020  F00C         	movff	stoa@l,?_stoa
  1402  000896  C021  F00D         	movff	stoa@l+1,?_stoa+1
  1403  00089A  0012               	return		;funcret
  1404  00089C                     __end_of_stoa:
  1405                           	opt callstack 0
  1406                           
  1407 ;; *************** function _strlen *****************
  1408 ;; Defined at:
  1409 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;  s               2    2[COMRAM] PTR const unsigned char 
  1412 ;;		 -> ?_sprintf(2), stoa@nuls(7), 
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;  a               2    4[COMRAM] PTR const unsigned char 
  1415 ;;		 -> ?_sprintf(2), stoa@nuls(7), 
  1416 ;; Return value:  Size  Location     Type
  1417 ;;                  2    2[COMRAM] unsigned int 
  1418 ;; Registers used:
  1419 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1425 ;;      Params:         2       0       0       0
  1426 ;;      Locals:         2       0       0       0
  1427 ;;      Temps:          0       0       0       0
  1428 ;;      Totals:         4       0       0       0
  1429 ;;Total ram usage:        4 bytes
  1430 ;; Hardware stack levels used:    1
  1431 ;; Hardware stack levels required when called:    1
  1432 ;; This function calls:
  1433 ;;		Nothing
  1434 ;; This function is called by:
  1435 ;;		_stoa
  1436 ;; This function uses a non-reentrant model
  1437 ;;
  1438                           
  1439                           	psect	text5
  1440  000CC0                     __ptext5:
  1441                           	opt callstack 0
  1442  000CC0                     _strlen:
  1443                           	opt callstack 25
  1444  000CC0  C003  F005         	movff	strlen@s,strlen@a
  1445  000CC4  C004  F006         	movff	strlen@s+1,strlen@a+1
  1446  000CC8  EF68  F006         	goto	l1954
  1447  000CCC                     l1952:
  1448  000CCC  4A03               	infsnz	strlen@s^0,f,c
  1449  000CCE  2A04               	incf	(strlen@s+1)^0,f,c
  1450  000CD0                     l1954:
  1451  000CD0  C003  FFD9         	movff	strlen@s,fsr2l
  1452  000CD4  C004  FFDA         	movff	strlen@s+1,fsr2h
  1453  000CD8  50DF               	movf	indf2,w,c
  1454  000CDA  A4D8               	btfss	status,2,c
  1455  000CDC  EF72  F006         	goto	u1041
  1456  000CE0  EF74  F006         	goto	u1040
  1457  000CE4                     u1041:
  1458  000CE4  EF66  F006         	goto	l1952
  1459  000CE8                     u1040:
  1460  000CE8  5005               	movf	strlen@a^0,w,c
  1461  000CEA  5C03               	subwf	strlen@s^0,w,c
  1462  000CEC  6E03               	movwf	?_strlen^0,c
  1463  000CEE  5006               	movf	(strlen@a+1)^0,w,c
  1464  000CF0  5804               	subwfb	(strlen@s+1)^0,w,c
  1465  000CF2  6E04               	movwf	(?_strlen+1)^0,c
  1466  000CF4  0012               	return		;funcret
  1467  000CF6                     __end_of_strlen:
  1468                           	opt callstack 0
  1469                           
  1470 ;; *************** function _fputc *****************
  1471 ;; Defined at:
  1472 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;  c               2    2[COMRAM] int 
  1475 ;;  fp              2    4[COMRAM] PTR struct _IO_FILE
  1476 ;;		 -> sprintf@f(6), 
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;		None
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  2    2[COMRAM] int 
  1481 ;; Registers used:
  1482 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1488 ;;      Params:         4       0       0       0
  1489 ;;      Locals:         0       0       0       0
  1490 ;;      Temps:          5       0       0       0
  1491 ;;      Totals:         9       0       0       0
  1492 ;;Total ram usage:        9 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    2
  1495 ;; This function calls:
  1496 ;;		_putch
  1497 ;; This function is called by:
  1498 ;;		_stoa
  1499 ;;		_vfpfcnvrt
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           	psect	text6
  1504  00089C                     __ptext6:
  1505                           	opt callstack 0
  1506  00089C                     _fputc:
  1507                           	opt callstack 24
  1508  00089C  5005               	movf	fputc@fp^0,w,c
  1509  00089E  1006               	iorwf	(fputc@fp+1)^0,w,c
  1510  0008A0  B4D8               	btfsc	status,2,c
  1511  0008A2  EF55  F004         	goto	u1001
  1512  0008A6  EF57  F004         	goto	u1000
  1513  0008AA                     u1001:
  1514  0008AA  EF60  F004         	goto	l1940
  1515  0008AE                     u1000:
  1516  0008AE  5005               	movf	fputc@fp^0,w,c
  1517  0008B0  1006               	iorwf	(fputc@fp+1)^0,w,c
  1518  0008B2  A4D8               	btfss	status,2,c
  1519  0008B4  EF5E  F004         	goto	u1011
  1520  0008B8  EF60  F004         	goto	u1010
  1521  0008BC                     u1011:
  1522  0008BC  EF65  F004         	goto	l1942
  1523  0008C0                     u1010:
  1524  0008C0                     l1940:
  1525  0008C0  5003               	movf	fputc@c^0,w,c
  1526  0008C2  ECD7  F006         	call	_putch
  1527  0008C6  EFB2  F004         	goto	l1014
  1528  0008CA                     l1942:
  1529  0008CA  EE20 F004          	lfsr	2,4
  1530  0008CE  5005               	movf	fputc@fp^0,w,c
  1531  0008D0  26D9               	addwf	fsr2l,f,c
  1532  0008D2  5006               	movf	(fputc@fp+1)^0,w,c
  1533  0008D4  22DA               	addwfc	fsr2h,f,c
  1534  0008D6  50DE               	movf	postinc2,w,c
  1535  0008D8  10DE               	iorwf	postinc2,w,c
  1536  0008DA  B4D8               	btfsc	status,2,c
  1537  0008DC  EF72  F004         	goto	u1021
  1538  0008E0  EF74  F004         	goto	u1020
  1539  0008E4                     u1021:
  1540  0008E4  EF8F  F004         	goto	l1946
  1541  0008E8                     u1020:
  1542  0008E8  EE20 F004          	lfsr	2,4
  1543  0008EC  5005               	movf	fputc@fp^0,w,c
  1544  0008EE  26D9               	addwf	fsr2l,f,c
  1545  0008F0  5006               	movf	(fputc@fp+1)^0,w,c
  1546  0008F2  22DA               	addwfc	fsr2h,f,c
  1547  0008F4  EE10 F002          	lfsr	1,2
  1548  0008F8  5005               	movf	fputc@fp^0,w,c
  1549  0008FA  26E1               	addwf	fsr1l,f,c
  1550  0008FC  5006               	movf	(fputc@fp+1)^0,w,c
  1551  0008FE  22E2               	addwfc	fsr1h,f,c
  1552  000900  50DE               	movf	postinc2,w,c
  1553  000902  5CE6               	subwf	postinc1,w,c
  1554  000904  50E6               	movf	postinc1,w,c
  1555  000906  0A80               	xorlw	128
  1556  000908  6E0B               	movwf	(??_fputc+4)^0,c
  1557  00090A  50DE               	movf	postinc2,w,c
  1558  00090C  0A80               	xorlw	128
  1559  00090E  580B               	subwfb	(??_fputc+4)^0,w,c
  1560  000910  B0D8               	btfsc	status,0,c
  1561  000912  EF8D  F004         	goto	u1031
  1562  000916  EF8F  F004         	goto	u1030
  1563  00091A                     u1031:
  1564  00091A  EFB2  F004         	goto	l1014
  1565  00091E                     u1030:
  1566  00091E                     l1946:
  1567  00091E  EE20 F002          	lfsr	2,2
  1568  000922  5005               	movf	fputc@fp^0,w,c
  1569  000924  26D9               	addwf	fsr2l,f,c
  1570  000926  5006               	movf	(fputc@fp+1)^0,w,c
  1571  000928  22DA               	addwfc	fsr2h,f,c
  1572  00092A  CFDE F007          	movff	postinc2,??_fputc
  1573  00092E  CFDD F008          	movff	postdec2,??_fputc+1
  1574  000932  C005  FFD9         	movff	fputc@fp,fsr2l
  1575  000936  C006  FFDA         	movff	fputc@fp+1,fsr2h
  1576  00093A  CFDE F009          	movff	postinc2,??_fputc+2
  1577  00093E  CFDD F00A          	movff	postdec2,??_fputc+3
  1578  000942  5007               	movf	??_fputc^0,w,c
  1579  000944  2409               	addwf	(??_fputc+2)^0,w,c
  1580  000946  6ED9               	movwf	fsr2l,c
  1581  000948  5008               	movf	(??_fputc+1)^0,w,c
  1582  00094A  200A               	addwfc	(??_fputc+3)^0,w,c
  1583  00094C  6EDA               	movwf	fsr2h,c
  1584  00094E  C003  FFDF         	movff	fputc@c,indf2
  1585  000952  EE20 F002          	lfsr	2,2
  1586  000956  5005               	movf	fputc@fp^0,w,c
  1587  000958  26D9               	addwf	fsr2l,f,c
  1588  00095A  5006               	movf	(fputc@fp+1)^0,w,c
  1589  00095C  22DA               	addwfc	fsr2h,f,c
  1590  00095E  2ADE               	incf	postinc2,f,c
  1591  000960  0E00               	movlw	0
  1592  000962  22DD               	addwfc	postdec2,f,c
  1593  000964                     l1014:
  1594  000964  0012               	return		;funcret
  1595  000966                     __end_of_fputc:
  1596                           	opt callstack 0
  1597                           
  1598 ;; *************** function _putch *****************
  1599 ;; Defined at:
  1600 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\putch.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;  c               1    wreg     unsigned char 
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;  c               1    0[COMRAM] unsigned char 
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      void 
  1607 ;; Registers used:
  1608 ;;		wreg
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1614 ;;      Params:         0       0       0       0
  1615 ;;      Locals:         0       0       0       0
  1616 ;;      Temps:          0       0       0       0
  1617 ;;      Totals:         0       0       0       0
  1618 ;;Total ram usage:        0 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    1
  1621 ;; This function calls:
  1622 ;;		Nothing
  1623 ;; This function is called by:
  1624 ;;		_fputc
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           	psect	text7
  1629  000DAE                     __ptext7:
  1630                           	opt callstack 0
  1631  000DAE                     _putch:
  1632                           	opt callstack 24
  1633  000DAE  0012               	return		;funcret
  1634  000DB0                     __end_of_putch:
  1635                           	opt callstack 0
  1636                           
  1637 ;; *************** function _atoi *****************
  1638 ;; Defined at:
  1639 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\atoi.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1642 ;;		 -> STR_1(6), 
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;  n               2   22[COMRAM] int 
  1645 ;;  neg             2   15[COMRAM] int 
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  2    9[COMRAM] int 
  1648 ;; Registers used:
  1649 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1655 ;;      Params:         2       0       0       0
  1656 ;;      Locals:         9       0       0       0
  1657 ;;      Temps:          4       0       0       0
  1658 ;;      Totals:        15       0       0       0
  1659 ;;Total ram usage:       15 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; Hardware stack levels required when called:    2
  1662 ;; This function calls:
  1663 ;;		___wmul
  1664 ;;		_isdigit
  1665 ;;		_isspace
  1666 ;; This function is called by:
  1667 ;;		_vfpfcnvrt
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           	psect	text8
  1672  00058A                     __ptext8:
  1673                           	opt callstack 0
  1674  00058A                     _atoi:
  1675                           	opt callstack 25
  1676  00058A  0E00               	movlw	0
  1677  00058C  6E18               	movwf	(atoi@n+1)^0,c
  1678  00058E  0E00               	movlw	0
  1679  000590  6E17               	movwf	atoi@n^0,c
  1680  000592  0E00               	movlw	0
  1681  000594  6E11               	movwf	(atoi@neg+1)^0,c
  1682  000596  0E00               	movlw	0
  1683  000598  6E10               	movwf	atoi@neg^0,c
  1684  00059A  EFD1  F002         	goto	l2034
  1685  00059E                     l2032:
  1686  00059E  4A0A               	infsnz	atoi@s^0,f,c
  1687  0005A0  2A0B               	incf	(atoi@s+1)^0,f,c
  1688  0005A2                     l2034:
  1689  0005A2  0E01               	movlw	1
  1690  0005A4  6E16               	movwf	_atoi$1586^0,c
  1691  0005A6  C00A  FFF6         	movff	atoi@s,tblptrl
  1692  0005AA  C00B  FFF7         	movff	atoi@s+1,tblptrh
  1693  0005AE                     	if	0	;tblptru may be non-zero
  1694  0005AE                     	endif
  1695  0005AE                     	if	0	;tblptru may be non-zero
  1696  0005AE                     	endif
  1697  0005AE  0008               	tblrd		*
  1698  0005B0  50F5               	movf	tablat,w,c
  1699  0005B2  0A20               	xorlw	32
  1700  0005B4  B4D8               	btfsc	status,2,c
  1701  0005B6  EFDF  F002         	goto	u1181
  1702  0005BA  EFE1  F002         	goto	u1180
  1703  0005BE                     u1181:
  1704  0005BE  EFFE  F002         	goto	l2042
  1705  0005C2                     u1180:
  1706  0005C2  0EF7               	movlw	247
  1707  0005C4  6E0C               	movwf	??_atoi^0,c
  1708  0005C6  0EFF               	movlw	255
  1709  0005C8  6E0D               	movwf	(??_atoi+1)^0,c
  1710  0005CA  C00A  FFF6         	movff	atoi@s,tblptrl
  1711  0005CE  C00B  FFF7         	movff	atoi@s+1,tblptrh
  1712  0005D2                     	if	0	;tblptru may be non-zero
  1713  0005D2                     	endif
  1714  0005D2                     	if	0	;tblptru may be non-zero
  1715  0005D2                     	endif
  1716  0005D2  0008               	tblrd		*
  1717  0005D4  50F5               	movf	tablat,w,c
  1718  0005D6  6E0E               	movwf	(??_atoi+2)^0,c
  1719  0005D8  6A0F               	clrf	(??_atoi+3)^0,c
  1720  0005DA  500C               	movf	??_atoi^0,w,c
  1721  0005DC  260E               	addwf	(??_atoi+2)^0,f,c
  1722  0005DE  500D               	movf	(??_atoi+1)^0,w,c
  1723  0005E0  220F               	addwfc	(??_atoi+3)^0,f,c
  1724  0005E2  500F               	movf	(??_atoi+3)^0,w,c
  1725  0005E4  E109               	bnz	u1190
  1726  0005E6  0E05               	movlw	5
  1727  0005E8  5C0E               	subwf	(??_atoi+2)^0,w,c
  1728  0005EA  A0D8               	btfss	status,0,c
  1729  0005EC  EFFA  F002         	goto	u1191
  1730  0005F0  EFFC  F002         	goto	u1190
  1731  0005F4                     u1191:
  1732  0005F4  EFFE  F002         	goto	l2042
  1733  0005F8                     u1190:
  1734  0005F8  0E00               	movlw	0
  1735  0005FA  6E16               	movwf	_atoi$1586^0,c
  1736  0005FC                     l2042:
  1737  0005FC  C016  F012         	movff	_atoi$1586,_atoi$1585
  1738  000600  6A13               	clrf	(_atoi$1585+1)^0,c
  1739  000602  5012               	movf	_atoi$1585^0,w,c
  1740  000604  1013               	iorwf	(_atoi$1585+1)^0,w,c
  1741  000606  A4D8               	btfss	status,2,c
  1742  000608  EF08  F003         	goto	u1201
  1743  00060C  EF0A  F003         	goto	u1200
  1744  000610                     u1201:
  1745  000610  EFCF  F002         	goto	l2032
  1746  000614                     u1200:
  1747  000614  EF14  F003         	goto	l2052
  1748  000618                     l2048:
  1749  000618  0E00               	movlw	0
  1750  00061A  6E11               	movwf	(atoi@neg+1)^0,c
  1751  00061C  0E01               	movlw	1
  1752  00061E  6E10               	movwf	atoi@neg^0,c
  1753  000620                     l2050:
  1754  000620  4A0A               	infsnz	atoi@s^0,f,c
  1755  000622  2A0B               	incf	(atoi@s+1)^0,f,c
  1756  000624  EF49  F003         	goto	l2058
  1757  000628                     l2052:
  1758  000628  C00A  FFF6         	movff	atoi@s,tblptrl
  1759  00062C  C00B  FFF7         	movff	atoi@s+1,tblptrh
  1760  000630                     	if	0	;tblptru may be non-zero
  1761  000630                     	endif
  1762  000630                     	if	0	;tblptru may be non-zero
  1763  000630                     	endif
  1764  000630  0008               	tblrd		*
  1765  000632  50F5               	movf	tablat,w,c
  1766  000634  6E0C               	movwf	??_atoi^0,c
  1767  000636  6A0D               	clrf	(??_atoi+1)^0,c
  1768                           
  1769                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1770                           ; Switch size 1, requested type "simple"
  1771                           ; Number of cases is 1, Range of values is 0 to 0
  1772                           ; switch strategies available:
  1773                           ; Name         Instructions Cycles
  1774                           ; simple_byte            4     3 (average)
  1775                           ;	Chosen strategy is simple_byte
  1776  000638  500D               	movf	(??_atoi+1)^0,w,c
  1777  00063A  0A00               	xorlw	0	; case 0
  1778  00063C  B4D8               	btfsc	status,2,c
  1779  00063E  EF23  F003         	goto	l2316
  1780  000642  EF49  F003         	goto	l2058
  1781  000646                     l2316:
  1782                           
  1783                           ; Switch size 1, requested type "simple"
  1784                           ; Number of cases is 2, Range of values is 43 to 45
  1785                           ; switch strategies available:
  1786                           ; Name         Instructions Cycles
  1787                           ; simple_byte            7     4 (average)
  1788                           ;	Chosen strategy is simple_byte
  1789  000646  500C               	movf	??_atoi^0,w,c
  1790  000648  0A2B               	xorlw	43	; case 43
  1791  00064A  B4D8               	btfsc	status,2,c
  1792  00064C  EF10  F003         	goto	l2050
  1793  000650  0A06               	xorlw	6	; case 45
  1794  000652  B4D8               	btfsc	status,2,c
  1795  000654  EF0C  F003         	goto	l2048
  1796  000658  EF49  F003         	goto	l2058
  1797  00065C                     l2054:
  1798  00065C  C017  F003         	movff	atoi@n,___wmul@multiplier
  1799  000660  C018  F004         	movff	atoi@n+1,___wmul@multiplier+1
  1800  000664  0E00               	movlw	0
  1801  000666  6E06               	movwf	(___wmul@multiplicand+1)^0,c
  1802  000668  0E0A               	movlw	10
  1803  00066A  6E05               	movwf	___wmul@multiplicand^0,c
  1804  00066C  ECAD  F006         	call	___wmul	;wreg free
  1805  000670  C00A  FFF6         	movff	atoi@s,tblptrl
  1806  000674  C00B  FFF7         	movff	atoi@s+1,tblptrh
  1807  000678                     	if	0	;tblptru may be non-zero
  1808  000678                     	endif
  1809  000678                     	if	0	;tblptru may be non-zero
  1810  000678                     	endif
  1811  000678  0008               	tblrd		*
  1812  00067A  50F5               	movf	tablat,w,c
  1813  00067C  5E03               	subwf	?___wmul^0,f,c
  1814  00067E  0E00               	movlw	0
  1815  000680  5A04               	subwfb	(?___wmul+1)^0,f,c
  1816  000682  0E30               	movlw	48
  1817  000684  2403               	addwf	?___wmul^0,w,c
  1818  000686  6E17               	movwf	atoi@n^0,c
  1819  000688  0E00               	movlw	0
  1820  00068A  2004               	addwfc	(?___wmul+1)^0,w,c
  1821  00068C  6E18               	movwf	(atoi@n+1)^0,c
  1822  00068E  EF10  F003         	goto	l2050
  1823  000692                     l2058:
  1824  000692  0ED0               	movlw	208
  1825  000694  6E0C               	movwf	??_atoi^0,c
  1826  000696  0EFF               	movlw	255
  1827  000698  6E0D               	movwf	(??_atoi+1)^0,c
  1828  00069A  C00A  FFF6         	movff	atoi@s,tblptrl
  1829  00069E  C00B  FFF7         	movff	atoi@s+1,tblptrh
  1830  0006A2                     	if	0	;tblptru may be non-zero
  1831  0006A2                     	endif
  1832  0006A2                     	if	0	;tblptru may be non-zero
  1833  0006A2                     	endif
  1834  0006A2  0008               	tblrd		*
  1835  0006A4  50F5               	movf	tablat,w,c
  1836  0006A6  6E0E               	movwf	(??_atoi+2)^0,c
  1837  0006A8  6A0F               	clrf	(??_atoi+3)^0,c
  1838  0006AA  500C               	movf	??_atoi^0,w,c
  1839  0006AC  260E               	addwf	(??_atoi+2)^0,f,c
  1840  0006AE  500D               	movf	(??_atoi+1)^0,w,c
  1841  0006B0  220F               	addwfc	(??_atoi+3)^0,f,c
  1842  0006B2  500F               	movf	(??_atoi+3)^0,w,c
  1843  0006B4  E10A               	bnz	u1210
  1844  0006B6  0E0A               	movlw	10
  1845  0006B8  5C0E               	subwf	(??_atoi+2)^0,w,c
  1846  0006BA  A0D8               	btfss	status,0,c
  1847  0006BC  EF62  F003         	goto	u1211
  1848  0006C0  EF65  F003         	goto	u1210
  1849  0006C4                     u1211:
  1850  0006C4  0E01               	movlw	1
  1851  0006C6  EF66  F003         	goto	u1220
  1852  0006CA                     u1210:
  1853  0006CA  0E00               	movlw	0
  1854  0006CC                     u1220:
  1855  0006CC  6E14               	movwf	_atoi$1587^0,c
  1856  0006CE  6A15               	clrf	(_atoi$1587+1)^0,c
  1857  0006D0  5014               	movf	_atoi$1587^0,w,c
  1858  0006D2  1015               	iorwf	(_atoi$1587+1)^0,w,c
  1859  0006D4  A4D8               	btfss	status,2,c
  1860  0006D6  EF6F  F003         	goto	u1231
  1861  0006DA  EF71  F003         	goto	u1230
  1862  0006DE                     u1231:
  1863  0006DE  EF2E  F003         	goto	l2054
  1864  0006E2                     u1230:
  1865  0006E2  5010               	movf	atoi@neg^0,w,c
  1866  0006E4  1011               	iorwf	(atoi@neg+1)^0,w,c
  1867  0006E6  A4D8               	btfss	status,2,c
  1868  0006E8  EF78  F003         	goto	u1241
  1869  0006EC  EF7A  F003         	goto	u1240
  1870  0006F0                     u1241:
  1871  0006F0  EF88  F003         	goto	l985
  1872  0006F4                     u1240:
  1873  0006F4  C017  F00C         	movff	atoi@n,??_atoi
  1874  0006F8  C018  F00D         	movff	atoi@n+1,??_atoi+1
  1875  0006FC  1E0C               	comf	??_atoi^0,f,c
  1876  0006FE  1E0D               	comf	(??_atoi+1)^0,f,c
  1877  000700  4A0C               	infsnz	??_atoi^0,f,c
  1878  000702  2A0D               	incf	(??_atoi+1)^0,f,c
  1879  000704  C00C  F00A         	movff	??_atoi,?_atoi
  1880  000708  C00D  F00B         	movff	??_atoi+1,?_atoi+1
  1881  00070C  EF8C  F003         	goto	l988
  1882  000710                     l985:
  1883  000710  C017  F00A         	movff	atoi@n,?_atoi
  1884  000714  C018  F00B         	movff	atoi@n+1,?_atoi+1
  1885  000718                     l988:
  1886  000718  0012               	return		;funcret
  1887  00071A                     __end_of_atoi:
  1888                           	opt callstack 0
  1889                           
  1890 ;; *************** function _isspace *****************
  1891 ;; Defined at:
  1892 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isspace.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;  c               2    2[COMRAM] int 
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;		None
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  2    2[COMRAM] int 
  1899 ;; Registers used:
  1900 ;;		wreg, status,2, status,0
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1906 ;;      Params:         2       0       0       0
  1907 ;;      Locals:         1       0       0       0
  1908 ;;      Temps:          4       0       0       0
  1909 ;;      Totals:         7       0       0       0
  1910 ;;Total ram usage:        7 bytes
  1911 ;; Hardware stack levels used:    1
  1912 ;; Hardware stack levels required when called:    1
  1913 ;; This function calls:
  1914 ;;		Nothing
  1915 ;; This function is called by:
  1916 ;;		_atoi
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           	psect	text9
  1921  000BAC                     __ptext9:
  1922                           	opt callstack 0
  1923  000BAC                     _isspace:
  1924                           	opt callstack 25
  1925  000BAC  0E01               	movlw	1
  1926  000BAE  6E09               	movwf	_isspace$1603^0,c
  1927  000BB0  0E20               	movlw	32
  1928  000BB2  1803               	xorwf	isspace@c^0,w,c
  1929  000BB4  1004               	iorwf	(isspace@c+1)^0,w,c
  1930  000BB6  B4D8               	btfsc	status,2,c
  1931  000BB8  EFE0  F005         	goto	u1071
  1932  000BBC  EFE2  F005         	goto	u1070
  1933  000BC0                     u1071:
  1934  000BC0  EFFB  F005         	goto	l1978
  1935  000BC4                     u1070:
  1936  000BC4  0EF7               	movlw	247
  1937  000BC6  6E05               	movwf	??_isspace^0,c
  1938  000BC8  0EFF               	movlw	255
  1939  000BCA  6E06               	movwf	(??_isspace+1)^0,c
  1940  000BCC  C003  F007         	movff	isspace@c,??_isspace+2
  1941  000BD0  C004  F008         	movff	isspace@c+1,??_isspace+3
  1942  000BD4  5005               	movf	??_isspace^0,w,c
  1943  000BD6  2607               	addwf	(??_isspace+2)^0,f,c
  1944  000BD8  5006               	movf	(??_isspace+1)^0,w,c
  1945  000BDA  2208               	addwfc	(??_isspace+3)^0,f,c
  1946  000BDC  5008               	movf	(??_isspace+3)^0,w,c
  1947  000BDE  E109               	bnz	u1080
  1948  000BE0  0E05               	movlw	5
  1949  000BE2  5C07               	subwf	(??_isspace+2)^0,w,c
  1950  000BE4  A0D8               	btfss	status,0,c
  1951  000BE6  EFF7  F005         	goto	u1081
  1952  000BEA  EFF9  F005         	goto	u1080
  1953  000BEE                     u1081:
  1954  000BEE  EFFB  F005         	goto	l1978
  1955  000BF2                     u1080:
  1956  000BF2  0E00               	movlw	0
  1957  000BF4  6E09               	movwf	_isspace$1603^0,c
  1958  000BF6                     l1978:
  1959  000BF6  C009  F003         	movff	_isspace$1603,?_isspace
  1960  000BFA  6A04               	clrf	(?_isspace+1)^0,c
  1961  000BFC  0012               	return		;funcret
  1962  000BFE                     __end_of_isspace:
  1963                           	opt callstack 0
  1964                           
  1965 ;; *************** function _isdigit *****************
  1966 ;; Defined at:
  1967 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isdigit.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;  c               2    2[COMRAM] int 
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;		None
  1972 ;; Return value:  Size  Location     Type
  1973 ;;                  2    2[COMRAM] int 
  1974 ;; Registers used:
  1975 ;;		wreg, status,2, status,0
  1976 ;; Tracked objects:
  1977 ;;		On entry : 0/0
  1978 ;;		On exit  : 0/0
  1979 ;;		Unchanged: 0/0
  1980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1981 ;;      Params:         2       0       0       0
  1982 ;;      Locals:         0       0       0       0
  1983 ;;      Temps:          4       0       0       0
  1984 ;;      Totals:         6       0       0       0
  1985 ;;Total ram usage:        6 bytes
  1986 ;; Hardware stack levels used:    1
  1987 ;; Hardware stack levels required when called:    1
  1988 ;; This function calls:
  1989 ;;		Nothing
  1990 ;; This function is called by:
  1991 ;;		_vfpfcnvrt
  1992 ;;		_atoi
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995                           
  1996                           	psect	text10
  1997  000C88                     __ptext10:
  1998                           	opt callstack 0
  1999  000C88                     _isdigit:
  2000                           	opt callstack 26
  2001  000C88  0ED0               	movlw	208
  2002  000C8A  6E05               	movwf	??_isdigit^0,c
  2003  000C8C  0EFF               	movlw	255
  2004  000C8E  6E06               	movwf	(??_isdigit+1)^0,c
  2005  000C90  C003  F007         	movff	isdigit@c,??_isdigit+2
  2006  000C94  C004  F008         	movff	isdigit@c+1,??_isdigit+3
  2007  000C98  5005               	movf	??_isdigit^0,w,c
  2008  000C9A  2607               	addwf	(??_isdigit+2)^0,f,c
  2009  000C9C  5006               	movf	(??_isdigit+1)^0,w,c
  2010  000C9E  2208               	addwfc	(??_isdigit+3)^0,f,c
  2011  000CA0  5008               	movf	(??_isdigit+3)^0,w,c
  2012  000CA2  E10A               	bnz	u1050
  2013  000CA4  0E0A               	movlw	10
  2014  000CA6  5C07               	subwf	(??_isdigit+2)^0,w,c
  2015  000CA8  A0D8               	btfss	status,0,c
  2016  000CAA  EF59  F006         	goto	u1051
  2017  000CAE  EF5C  F006         	goto	u1050
  2018  000CB2                     u1051:
  2019  000CB2  0E01               	movlw	1
  2020  000CB4  EF5D  F006         	goto	u1060
  2021  000CB8                     u1050:
  2022  000CB8  0E00               	movlw	0
  2023  000CBA                     u1060:
  2024  000CBA  6E03               	movwf	?_isdigit^0,c
  2025  000CBC  6A04               	clrf	(?_isdigit+1)^0,c
  2026  000CBE  0012               	return		;funcret
  2027  000CC0                     __end_of_isdigit:
  2028                           	opt callstack 0
  2029                           
  2030 ;; *************** function ___wmul *****************
  2031 ;; Defined at:
  2032 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;  multiplier      2    2[COMRAM] unsigned int 
  2035 ;;  multiplicand    2    4[COMRAM] unsigned int 
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;  product         2    6[COMRAM] unsigned int 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  2    2[COMRAM] unsigned int 
  2040 ;; Registers used:
  2041 ;;		wreg, status,2, status,0, prodl, prodh
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2047 ;;      Params:         4       0       0       0
  2048 ;;      Locals:         2       0       0       0
  2049 ;;      Temps:          0       0       0       0
  2050 ;;      Totals:         6       0       0       0
  2051 ;;Total ram usage:        6 bytes
  2052 ;; Hardware stack levels used:    1
  2053 ;; Hardware stack levels required when called:    1
  2054 ;; This function calls:
  2055 ;;		Nothing
  2056 ;; This function is called by:
  2057 ;;		_atoi
  2058 ;;		_setMotorPWM
  2059 ;;		_delay_s
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           	psect	text11
  2064  000D5A                     __ptext11:
  2065                           	opt callstack 0
  2066  000D5A                     ___wmul:
  2067                           	opt callstack 25
  2068  000D5A  5003               	movf	___wmul@multiplier^0,w,c
  2069  000D5C  0205               	mulwf	___wmul@multiplicand^0,c
  2070  000D5E  CFF3 F007          	movff	prodl,___wmul@product
  2071  000D62  CFF4 F008          	movff	prodh,___wmul@product+1
  2072  000D66  5003               	movf	___wmul@multiplier^0,w,c
  2073  000D68  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  2074  000D6A  50F3               	movf	243,w,c
  2075  000D6C  2608               	addwf	(___wmul@product+1)^0,f,c
  2076  000D6E  5004               	movf	(___wmul@multiplier+1)^0,w,c
  2077  000D70  0205               	mulwf	___wmul@multiplicand^0,c
  2078  000D72  50F3               	movf	243,w,c
  2079  000D74  2608               	addwf	(___wmul@product+1)^0,f,c
  2080  000D76  C007  F003         	movff	___wmul@product,?___wmul
  2081  000D7A  C008  F004         	movff	___wmul@product+1,?___wmul+1
  2082  000D7E  0012               	return		;funcret
  2083  000D80                     __end_of___wmul:
  2084                           	opt callstack 0
  2085                           
  2086 ;; *************** function _initSerial *****************
  2087 ;; Defined at:
  2088 ;;		line 26 in file "serial.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;		None
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;		None
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  1    wreg      void 
  2095 ;; Registers used:
  2096 ;;		wreg, status,2
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2102 ;;      Params:         0       0       0       0
  2103 ;;      Locals:         0       0       0       0
  2104 ;;      Temps:          0       0       0       0
  2105 ;;      Totals:         0       0       0       0
  2106 ;;Total ram usage:        0 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:    1
  2109 ;; This function calls:
  2110 ;;		Nothing
  2111 ;; This function is called by:
  2112 ;;		_main
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           	psect	text12
  2117  000D80                     __ptext12:
  2118                           	opt callstack 0
  2119  000D80                     _initSerial:
  2120                           	opt callstack 29
  2121  000D80                     
  2122                           ;serial.c: 27:     TRISCbits.RC6 = 1;
  2123  000D80  8C94               	bsf	148,6,c	;volatile
  2124                           
  2125                           ;serial.c: 28:     TRISCbits.RC7 = 1;
  2126  000D82  8E94               	bsf	148,7,c	;volatile
  2127  000D84                     
  2128                           ;serial.c: 29:     SPBRG = 207;
  2129  000D84  0ECF               	movlw	207
  2130  000D86  6EAF               	movwf	175,c	;volatile
  2131                           
  2132                           ;serial.c: 30:     SPBRGH = 0;
  2133  000D88  0E00               	movlw	0
  2134  000D8A  6EB0               	movwf	176,c	;volatile
  2135  000D8C                     
  2136                           ;serial.c: 31:     BAUDCONbits.BRG16 = 1;
  2137  000D8C  86AA               	bsf	170,3,c	;volatile
  2138  000D8E                     
  2139                           ;serial.c: 32:     TXSTAbits.BRGH = 1;
  2140  000D8E  84AC               	bsf	172,2,c	;volatile
  2141  000D90                     
  2142                           ;serial.c: 33:     RCSTAbits.CREN = 1;
  2143  000D90  88AB               	bsf	171,4,c	;volatile
  2144  000D92                     
  2145                           ;serial.c: 34:     RCSTAbits.SPEN = 1;
  2146  000D92  8EAB               	bsf	171,7,c	;volatile
  2147  000D94                     
  2148                           ;serial.c: 35:     TXSTAbits.TXEN = 1;
  2149  000D94  8AAC               	bsf	172,5,c	;volatile
  2150  000D96  0012               	return		;funcret
  2151  000D98                     __end_of_initSerial:
  2152                           	opt callstack 0
  2153                           
  2154 ;; *************** function _SetLine *****************
  2155 ;; Defined at:
  2156 ;;		line 85 in file "lcd.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;  line            1    wreg     unsigned char 
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;  line            1    6[COMRAM] unsigned char 
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  1    wreg      void 
  2163 ;; Registers used:
  2164 ;;		wreg, status,2, status,0, cstack
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2170 ;;      Params:         0       0       0       0
  2171 ;;      Locals:         1       0       0       0
  2172 ;;      Temps:          0       0       0       0
  2173 ;;      Totals:         1       0       0       0
  2174 ;;Total ram usage:        1 bytes
  2175 ;; Hardware stack levels used:    1
  2176 ;; Hardware stack levels required when called:    4
  2177 ;; This function calls:
  2178 ;;		_SendLCD
  2179 ;; This function is called by:
  2180 ;;		_main
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text13
  2185  000CF6                     __ptext13:
  2186                           	opt callstack 0
  2187  000CF6                     _SetLine:
  2188                           	opt callstack 26
  2189                           
  2190                           ;incstack = 0
  2191                           ;SetLine@line stored from wreg
  2192  000CF6  6E07               	movwf	SetLine@line^0,c
  2193  000CF8                     
  2194                           ;lcd.c: 86:     if (line == 1) {
  2195  000CF8  0407               	decf	SetLine@line^0,w,c
  2196  000CFA  A4D8               	btfss	status,2,c
  2197  000CFC  EF82  F006         	goto	u1351
  2198  000D00  EF84  F006         	goto	u1350
  2199  000D04                     u1351:
  2200  000D04  EF8B  F006         	goto	l2180
  2201  000D08                     u1350:
  2202  000D08                     
  2203                           ;lcd.c: 87:         SendLCD(0x80, 0);
  2204  000D08  0E00               	movlw	0
  2205  000D0A  6E05               	movwf	SendLCD@type^0,c
  2206  000D0C  0E80               	movlw	128
  2207  000D0E  EC95  F006         	call	_SendLCD
  2208                           
  2209                           ;lcd.c: 88:     } else {
  2210  000D12  EF90  F006         	goto	l2182
  2211  000D16                     l2180:
  2212                           
  2213                           ;lcd.c: 89:         SendLCD(0xC0, 0);
  2214  000D16  0E00               	movlw	0
  2215  000D18  6E05               	movwf	SendLCD@type^0,c
  2216  000D1A  0EC0               	movlw	192
  2217  000D1C  EC95  F006         	call	_SendLCD
  2218  000D20                     l2182:
  2219                           
  2220                           ;lcd.c: 91:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  2221  000D20  0E21               	movlw	33
  2222  000D22                     u1457:
  2223  000D22  2EE8               	decfsz	wreg,f,c
  2224  000D24  D7FE               	bra	u1457
  2225  000D26  F000               	nop	
  2226  000D28  0012               	return		;funcret
  2227  000D2A                     __end_of_SetLine:
  2228                           	opt callstack 0
  2229                           
  2230 ;; *************** function _LCD_String *****************
  2231 ;; Defined at:
  2232 ;;		line 94 in file "lcd.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;  string          2    6[COMRAM] PTR unsigned char 
  2235 ;;		 -> main@buf(10), 
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;		None
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  1    wreg      void 
  2240 ;; Registers used:
  2241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2247 ;;      Params:         2       0       0       0
  2248 ;;      Locals:         0       0       0       0
  2249 ;;      Temps:          0       0       0       0
  2250 ;;      Totals:         2       0       0       0
  2251 ;;Total ram usage:        2 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    4
  2254 ;; This function calls:
  2255 ;;		_SendLCD
  2256 ;; This function is called by:
  2257 ;;		_main
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text14
  2262  000C4C                     __ptext14:
  2263                           	opt callstack 0
  2264  000C4C                     _LCD_String:
  2265                           	opt callstack 26
  2266  000C4C                     
  2267                           ;lcd.c: 96:     while (*string != 0) {
  2268  000C4C  EF37  F006         	goto	l2192
  2269  000C50                     l2186:
  2270                           
  2271                           ;lcd.c: 99:         SendLCD(*string++, 1);
  2272  000C50  0E01               	movlw	1
  2273  000C52  6E05               	movwf	SendLCD@type^0,c
  2274  000C54  C007  FFD9         	movff	LCD_String@string,fsr2l
  2275  000C58  C008  FFDA         	movff	LCD_String@string+1,fsr2h
  2276  000C5C  50DF               	movf	indf2,w,c
  2277  000C5E  EC95  F006         	call	_SendLCD
  2278  000C62  4A07               	infsnz	LCD_String@string^0,f,c
  2279  000C64  2A08               	incf	(LCD_String@string+1)^0,f,c
  2280  000C66                     
  2281                           ;lcd.c: 100:         _delay((unsigned long)((50)*(8000000/4000000.0)));
  2282  000C66  0E21               	movlw	33
  2283  000C68                     u1467:
  2284  000C68  2EE8               	decfsz	wreg,f,c
  2285  000C6A  D7FE               	bra	u1467
  2286  000C6C  F000               	nop	
  2287  000C6E                     l2192:
  2288                           
  2289                           ;lcd.c: 96:     while (*string != 0) {
  2290  000C6E  C007  FFD9         	movff	LCD_String@string,fsr2l
  2291  000C72  C008  FFDA         	movff	LCD_String@string+1,fsr2h
  2292  000C76  50DF               	movf	indf2,w,c
  2293  000C78  A4D8               	btfss	status,2,c
  2294  000C7A  EF41  F006         	goto	u1361
  2295  000C7E  EF43  F006         	goto	u1360
  2296  000C82                     u1361:
  2297  000C82  EF28  F006         	goto	l2186
  2298  000C86                     u1360:
  2299  000C86  0012               	return		;funcret
  2300  000C88                     __end_of_LCD_String:
  2301                           	opt callstack 0
  2302                           
  2303 ;; *************** function _LCD_Init *****************
  2304 ;; Defined at:
  2305 ;;		line 38 in file "lcd.c"
  2306 ;; Parameters:    Size  Location     Type
  2307 ;;		None
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;		None
  2310 ;; Return value:  Size  Location     Type
  2311 ;;                  1    wreg      void 
  2312 ;; Registers used:
  2313 ;;		wreg, status,2, status,0, cstack
  2314 ;; Tracked objects:
  2315 ;;		On entry : 0/0
  2316 ;;		On exit  : 0/0
  2317 ;;		Unchanged: 0/0
  2318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2319 ;;      Params:         0       0       0       0
  2320 ;;      Locals:         0       0       0       0
  2321 ;;      Temps:          1       0       0       0
  2322 ;;      Totals:         1       0       0       0
  2323 ;;Total ram usage:        1 bytes
  2324 ;; Hardware stack levels used:    1
  2325 ;; Hardware stack levels required when called:    4
  2326 ;; This function calls:
  2327 ;;		_LCDout
  2328 ;;		_SendLCD
  2329 ;; This function is called by:
  2330 ;;		_main
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text15
  2335  000966                     __ptext15:
  2336                           	opt callstack 0
  2337  000966                     _LCD_Init:
  2338                           	opt callstack 26
  2339  000966                     
  2340                           ;lcd.c: 40:     TRISAbits.RA6 = 0;
  2341  000966  9C92               	bcf	146,6,c	;volatile
  2342                           
  2343                           ;lcd.c: 41:     TRISCbits.RC0 = 0;
  2344  000968  9094               	bcf	148,0,c	;volatile
  2345                           
  2346                           ;lcd.c: 42:     TRISCbits.RC1 = 0;
  2347  00096A  9294               	bcf	148,1,c	;volatile
  2348                           
  2349                           ;lcd.c: 43:     TRISCbits.RC2 = 0;
  2350  00096C  9494               	bcf	148,2,c	;volatile
  2351                           
  2352                           ;lcd.c: 44:     TRISDbits.RD0 = 0;
  2353  00096E  9095               	bcf	149,0,c	;volatile
  2354                           
  2355                           ;lcd.c: 45:     TRISDbits.RD1 = 0;
  2356  000970  9295               	bcf	149,1,c	;volatile
  2357                           
  2358                           ;lcd.c: 47:     LATAbits.LA6 = 0;
  2359  000972  9C89               	bcf	137,6,c	;volatile
  2360                           
  2361                           ;lcd.c: 48:     LATCbits.LC0 = 0;
  2362  000974  908B               	bcf	139,0,c	;volatile
  2363                           
  2364                           ;lcd.c: 49:     LATCbits.LC1 = 0;
  2365  000976  928B               	bcf	139,1,c	;volatile
  2366                           
  2367                           ;lcd.c: 50:     LATCbits.LC2 = 0;
  2368  000978  948B               	bcf	139,2,c	;volatile
  2369                           
  2370                           ;lcd.c: 51:     LATDbits.LD0 = 0;
  2371  00097A  908C               	bcf	140,0,c	;volatile
  2372                           
  2373                           ;lcd.c: 52:     LATDbits.LD1 = 0;
  2374  00097C  928C               	bcf	140,1,c	;volatile
  2375  00097E                     
  2376                           ;lcd.c: 64:     _delay((unsigned long)((15)*(8000000/4000.0)));
  2377  00097E  0E27               	movlw	39
  2378  000980  6E07               	movwf	??_LCD_Init^0,c
  2379  000982  0EF5               	movlw	245
  2380  000984                     u1477:
  2381  000984  2EE8               	decfsz	wreg,f,c
  2382  000986  D7FE               	bra	u1477
  2383  000988  2E07               	decfsz	??_LCD_Init^0,f,c
  2384  00098A  D7FC               	bra	u1477
  2385  00098C  F000               	nop	
  2386  00098E                     
  2387                           ;lcd.c: 65:     LCDout(0b0011);
  2388  00098E  0E03               	movlw	3
  2389  000990  EC08  F005         	call	_LCDout
  2390  000994                     
  2391                           ;lcd.c: 66:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2392  000994  0E0D               	movlw	13
  2393  000996  6E07               	movwf	??_LCD_Init^0,c
  2394  000998  0EFC               	movlw	252
  2395  00099A                     u1487:
  2396  00099A  2EE8               	decfsz	wreg,f,c
  2397  00099C  D7FE               	bra	u1487
  2398  00099E  2E07               	decfsz	??_LCD_Init^0,f,c
  2399  0009A0  D7FC               	bra	u1487
  2400                           
  2401                           ;lcd.c: 67:     LCDout(0b0011);
  2402  0009A2  0E03               	movlw	3
  2403  0009A4  EC08  F005         	call	_LCDout
  2404  0009A8                     
  2405                           ;lcd.c: 68:     _delay((unsigned long)((200)*(8000000/4000000.0)));
  2406  0009A8  0E85               	movlw	133
  2407  0009AA                     u1497:
  2408  0009AA  2EE8               	decfsz	wreg,f,c
  2409  0009AC  D7FE               	bra	u1497
  2410  0009AE  F000               	nop	
  2411  0009B0                     
  2412                           ;lcd.c: 69:     LCDout(0b0011);
  2413  0009B0  0E03               	movlw	3
  2414  0009B2  EC08  F005         	call	_LCDout
  2415                           
  2416                           ;lcd.c: 70:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  2417  0009B6  0E21               	movlw	33
  2418  0009B8                     u1507:
  2419  0009B8  2EE8               	decfsz	wreg,f,c
  2420  0009BA  D7FE               	bra	u1507
  2421  0009BC  F000               	nop	
  2422  0009BE                     
  2423                           ;lcd.c: 71:     LCDout(0b0010);
  2424  0009BE  0E02               	movlw	2
  2425  0009C0  EC08  F005         	call	_LCDout
  2426  0009C4                     
  2427                           ;lcd.c: 72:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  2428  0009C4  0E21               	movlw	33
  2429  0009C6                     u1517:
  2430  0009C6  2EE8               	decfsz	wreg,f,c
  2431  0009C8  D7FE               	bra	u1517
  2432  0009CA  F000               	nop	
  2433                           
  2434                           ;lcd.c: 74:     SendLCD(0b00101000, 0);
  2435  0009CC  0E00               	movlw	0
  2436  0009CE  6E05               	movwf	SendLCD@type^0,c
  2437  0009D0  0E28               	movlw	40
  2438  0009D2  EC95  F006         	call	_SendLCD
  2439                           
  2440                           ;lcd.c: 75:     SendLCD(0b00001000, 0);
  2441  0009D6  0E00               	movlw	0
  2442  0009D8  6E05               	movwf	SendLCD@type^0,c
  2443  0009DA  0E08               	movlw	8
  2444  0009DC  EC95  F006         	call	_SendLCD
  2445                           
  2446                           ;lcd.c: 76:     SendLCD(0b00000001, 0);
  2447  0009E0  0E00               	movlw	0
  2448  0009E2  6E05               	movwf	SendLCD@type^0,c
  2449  0009E4  0E01               	movlw	1
  2450  0009E6  EC95  F006         	call	_SendLCD
  2451  0009EA                     
  2452                           ;lcd.c: 77:     _delay((unsigned long)((2)*(8000000/4000.0)));
  2453  0009EA  0E06               	movlw	6
  2454  0009EC  6E07               	movwf	??_LCD_Init^0,c
  2455  0009EE  0E30               	movlw	48
  2456  0009F0                     u1527:
  2457  0009F0  2EE8               	decfsz	wreg,f,c
  2458  0009F2  D7FE               	bra	u1527
  2459  0009F4  2E07               	decfsz	??_LCD_Init^0,f,c
  2460  0009F6  D7FC               	bra	u1527
  2461  0009F8  D000               	nop2	
  2462  0009FA                     
  2463                           ;lcd.c: 78:     SendLCD(0b00000110, 0);
  2464  0009FA  0E00               	movlw	0
  2465  0009FC  6E05               	movwf	SendLCD@type^0,c
  2466  0009FE  0E06               	movlw	6
  2467  000A00  EC95  F006         	call	_SendLCD
  2468  000A04                     
  2469                           ;lcd.c: 79:     SendLCD(0b00001111, 0);
  2470  000A04  0E00               	movlw	0
  2471  000A06  6E05               	movwf	SendLCD@type^0,c
  2472  000A08  0E0F               	movlw	15
  2473  000A0A  EC95  F006         	call	_SendLCD
  2474  000A0E  0012               	return		;funcret
  2475  000A10                     __end_of_LCD_Init:
  2476                           	opt callstack 0
  2477                           
  2478 ;; *************** function _SendLCD *****************
  2479 ;; Defined at:
  2480 ;;		line 26 in file "lcd.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;  Byte            1    wreg     unsigned char 
  2483 ;;  type            1    4[COMRAM] unsigned char 
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  Byte            1    5[COMRAM] unsigned char 
  2486 ;; Return value:  Size  Location     Type
  2487 ;;                  1    wreg      void 
  2488 ;; Registers used:
  2489 ;;		wreg, status,2, status,0, cstack
  2490 ;; Tracked objects:
  2491 ;;		On entry : 0/0
  2492 ;;		On exit  : 0/0
  2493 ;;		Unchanged: 0/0
  2494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2495 ;;      Params:         1       0       0       0
  2496 ;;      Locals:         1       0       0       0
  2497 ;;      Temps:          0       0       0       0
  2498 ;;      Totals:         2       0       0       0
  2499 ;;Total ram usage:        2 bytes
  2500 ;; Hardware stack levels used:    1
  2501 ;; Hardware stack levels required when called:    3
  2502 ;; This function calls:
  2503 ;;		_LCDout
  2504 ;; This function is called by:
  2505 ;;		_LCD_Init
  2506 ;;		_SetLine
  2507 ;;		_LCD_String
  2508 ;;		_ClearLCD
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text16
  2513  000D2A                     __ptext16:
  2514                           	opt callstack 0
  2515  000D2A                     _SendLCD:
  2516                           	opt callstack 26
  2517                           
  2518                           ;incstack = 0
  2519                           ;SendLCD@Byte stored from wreg
  2520  000D2A  6E06               	movwf	SendLCD@Byte^0,c
  2521  000D2C                     
  2522                           ;lcd.c: 29:     LATAbits.LATA6 = type;
  2523  000D2C  B005               	btfsc	SendLCD@type^0,0,c
  2524  000D2E  D002               	bra	u1335
  2525  000D30  9C89               	bcf	137,6,c	;volatile
  2526  000D32  D001               	bra	u1336
  2527  000D34                     u1335:
  2528  000D34  8C89               	bsf	137,6,c	;volatile
  2529  000D36                     u1336:
  2530  000D36                     
  2531                           ;lcd.c: 31:     LCDout((Byte & 0b11110000) >> 4);
  2532  000D36  3806               	swapf	SendLCD@Byte^0,w,c
  2533  000D38  0B0F               	andlw	15
  2534  000D3A  0B0F               	andlw	15
  2535  000D3C  EC08  F005         	call	_LCDout
  2536  000D40                     
  2537                           ;lcd.c: 32:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  2538  000D40  0E06               	movlw	6
  2539  000D42                     u1537:
  2540  000D42  2EE8               	decfsz	wreg,f,c
  2541  000D44  D7FE               	bra	u1537
  2542  000D46  D000               	nop2	
  2543  000D48                     
  2544                           ;lcd.c: 33:     LCDout(Byte & 0b00001111);
  2545  000D48  5006               	movf	SendLCD@Byte^0,w,c
  2546  000D4A  0B0F               	andlw	15
  2547  000D4C  EC08  F005         	call	_LCDout
  2548                           
  2549                           ;lcd.c: 35:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  2550  000D50  0E21               	movlw	33
  2551  000D52                     u1547:
  2552  000D52  2EE8               	decfsz	wreg,f,c
  2553  000D54  D7FE               	bra	u1547
  2554  000D56  F000               	nop	
  2555  000D58  0012               	return		;funcret
  2556  000D5A                     __end_of_SendLCD:
  2557                           	opt callstack 0
  2558                           
  2559 ;; *************** function _LCDout *****************
  2560 ;; Defined at:
  2561 ;;		line 14 in file "lcd.c"
  2562 ;; Parameters:    Size  Location     Type
  2563 ;;  number          1    wreg     unsigned char 
  2564 ;; Auto vars:     Size  Location     Type
  2565 ;;  number          1    3[COMRAM] unsigned char 
  2566 ;; Return value:  Size  Location     Type
  2567 ;;                  1    wreg      void 
  2568 ;; Registers used:
  2569 ;;		wreg, status,2, status,0, cstack
  2570 ;; Tracked objects:
  2571 ;;		On entry : 0/0
  2572 ;;		On exit  : 0/0
  2573 ;;		Unchanged: 0/0
  2574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2575 ;;      Params:         0       0       0       0
  2576 ;;      Locals:         1       0       0       0
  2577 ;;      Temps:          1       0       0       0
  2578 ;;      Totals:         2       0       0       0
  2579 ;;Total ram usage:        2 bytes
  2580 ;; Hardware stack levels used:    1
  2581 ;; Hardware stack levels required when called:    2
  2582 ;; This function calls:
  2583 ;;		_E_TOG
  2584 ;; This function is called by:
  2585 ;;		_SendLCD
  2586 ;;		_LCD_Init
  2587 ;; This function uses a non-reentrant model
  2588 ;;
  2589                           
  2590                           	psect	text17
  2591  000A10                     __ptext17:
  2592                           	opt callstack 0
  2593  000A10                     _LCDout:
  2594                           	opt callstack 26
  2595                           
  2596                           ;incstack = 0
  2597                           ;LCDout@number stored from wreg
  2598  000A10  6E04               	movwf	LCDout@number^0,c
  2599  000A12                     
  2600                           ;lcd.c: 16:     LATCbits.LATC1 = number & 0b0001;
  2601  000A12  C004  F003         	movff	LCDout@number,??_LCDout
  2602  000A16  0E01               	movlw	1
  2603  000A18  1603               	andwf	??_LCDout^0,f,c
  2604  000A1A  4603               	rlncf	??_LCDout^0,f,c
  2605  000A1C  508B               	movf	139,w,c	;volatile
  2606  000A1E  1803               	xorwf	??_LCDout^0,w,c
  2607  000A20  0BFD               	andlw	-3
  2608  000A22  1803               	xorwf	??_LCDout^0,w,c
  2609  000A24  6E8B               	movwf	139,c	;volatile
  2610                           
  2611                           ;lcd.c: 17:     LATCbits.LATC2 = (number & 0b0010) >> 1;
  2612  000A26  C004  F003         	movff	LCDout@number,??_LCDout
  2613  000A2A  90D8               	bcf	status,0,c
  2614  000A2C  3203               	rrcf	??_LCDout^0,f,c
  2615  000A2E  0E01               	movlw	1
  2616  000A30  1603               	andwf	??_LCDout^0,f,c
  2617  000A32  4603               	rlncf	??_LCDout^0,f,c
  2618  000A34  4603               	rlncf	??_LCDout^0,f,c
  2619  000A36  508B               	movf	139,w,c	;volatile
  2620  000A38  1803               	xorwf	??_LCDout^0,w,c
  2621  000A3A  0BFB               	andlw	-5
  2622  000A3C  1803               	xorwf	??_LCDout^0,w,c
  2623  000A3E  6E8B               	movwf	139,c	;volatile
  2624                           
  2625                           ;lcd.c: 18:     LATDbits.LATD0 = (number & 0b0100) >> 2;
  2626  000A40  C004  F003         	movff	LCDout@number,??_LCDout
  2627  000A44  90D8               	bcf	status,0,c
  2628  000A46  3203               	rrcf	??_LCDout^0,f,c
  2629  000A48  90D8               	bcf	status,0,c
  2630  000A4A  3203               	rrcf	??_LCDout^0,f,c
  2631  000A4C  0E01               	movlw	1
  2632  000A4E  1603               	andwf	??_LCDout^0,f,c
  2633  000A50  508C               	movf	140,w,c	;volatile
  2634  000A52  1803               	xorwf	??_LCDout^0,w,c
  2635  000A54  0BFE               	andlw	-2
  2636  000A56  1803               	xorwf	??_LCDout^0,w,c
  2637  000A58  6E8C               	movwf	140,c	;volatile
  2638                           
  2639                           ;lcd.c: 19:     LATDbits.LATD1 = (number & 0b1000) >> 3;
  2640  000A5A  C004  F003         	movff	LCDout@number,??_LCDout
  2641  000A5E  90D8               	bcf	status,0,c
  2642  000A60  3203               	rrcf	??_LCDout^0,f,c
  2643  000A62  90D8               	bcf	status,0,c
  2644  000A64  3203               	rrcf	??_LCDout^0,f,c
  2645  000A66  90D8               	bcf	status,0,c
  2646  000A68  3203               	rrcf	??_LCDout^0,f,c
  2647  000A6A  0E01               	movlw	1
  2648  000A6C  1603               	andwf	??_LCDout^0,f,c
  2649  000A6E  4603               	rlncf	??_LCDout^0,f,c
  2650  000A70  508C               	movf	140,w,c	;volatile
  2651  000A72  1803               	xorwf	??_LCDout^0,w,c
  2652  000A74  0BFD               	andlw	-3
  2653  000A76  1803               	xorwf	??_LCDout^0,w,c
  2654  000A78  6E8C               	movwf	140,c	;volatile
  2655  000A7A                     
  2656                           ;lcd.c: 20:     E_TOG();
  2657  000A7A  ECCC  F006         	call	_E_TOG	;wreg free
  2658  000A7E                     
  2659                           ;lcd.c: 22:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  2660  000A7E  0E03               	movlw	3
  2661  000A80                     u1557:
  2662  000A80  2EE8               	decfsz	wreg,f,c
  2663  000A82  D7FE               	bra	u1557
  2664  000A84  F000               	nop	
  2665  000A86  0012               	return		;funcret
  2666  000A88                     __end_of_LCDout:
  2667                           	opt callstack 0
  2668                           
  2669 ;; *************** function _E_TOG *****************
  2670 ;; Defined at:
  2671 ;;		line 4 in file "lcd.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;		None
  2674 ;; Auto vars:     Size  Location     Type
  2675 ;;		None
  2676 ;; Return value:  Size  Location     Type
  2677 ;;                  1    wreg      void 
  2678 ;; Registers used:
  2679 ;;		wreg
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2685 ;;      Params:         0       0       0       0
  2686 ;;      Locals:         0       0       0       0
  2687 ;;      Temps:          0       0       0       0
  2688 ;;      Totals:         0       0       0       0
  2689 ;;Total ram usage:        0 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    1
  2692 ;; This function calls:
  2693 ;;		Nothing
  2694 ;; This function is called by:
  2695 ;;		_LCDout
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           	psect	text18
  2700  000D98                     __ptext18:
  2701                           	opt callstack 0
  2702  000D98                     _E_TOG:
  2703                           	opt callstack 26
  2704  000D98                     
  2705                           ;lcd.c: 8:     LATCbits.LATC0 = 1;
  2706  000D98  808B               	bsf	139,0,c	;volatile
  2707  000D9A                     
  2708                           ;lcd.c: 9:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  2709  000D9A  0E03               	movlw	3
  2710  000D9C                     u1567:
  2711  000D9C  2EE8               	decfsz	wreg,f,c
  2712  000D9E  D7FE               	bra	u1567
  2713  000DA0  F000               	nop	
  2714  000DA2                     
  2715                           ;lcd.c: 10:     LATCbits.LATC0 = 0;
  2716  000DA2  908B               	bcf	139,0,c	;volatile
  2717  000DA4  0012               	return		;funcret
  2718  000DA6                     __end_of_E_TOG:
  2719                           	opt callstack 0
  2720                           
  2721 ;; *************** function _InterruptHandlerHigh *****************
  2722 ;; Defined at:
  2723 ;;		line 12 in file "main.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;		None
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;		None
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  1    wreg      void 
  2730 ;; Registers used:
  2731 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2737 ;;      Params:         0       0       0       0
  2738 ;;      Locals:         0       0       0       0
  2739 ;;      Temps:          2       0       0       0
  2740 ;;      Totals:         2       0       0       0
  2741 ;;Total ram usage:        2 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; This function calls:
  2744 ;;		Nothing
  2745 ;; This function is called by:
  2746 ;;		Interrupt level 2
  2747 ;; This function uses a non-reentrant model
  2748 ;;
  2749                           
  2750                           	psect	intcode
  2751  000008                     __pintcode:
  2752                           	opt callstack 0
  2753  000008                     _InterruptHandlerHigh:
  2754                           	opt callstack 24
  2755                           
  2756                           ;incstack = 0
  2757  000008  8254               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2758  00000A  CFD9 F001          	movff	fsr2l,??_InterruptHandlerHigh
  2759  00000E  CFDA F002          	movff	fsr2h,??_InterruptHandlerHigh+1
  2760  000012                     
  2761                           ;main.c: 13:     if (PIR1bits.RCIF == 1) {
  2762  000012  AA9E               	btfss	158,5,c	;volatile
  2763  000014  EF0E  F000         	goto	i2u92_41
  2764  000018  EF10  F000         	goto	i2u92_40
  2765  00001C                     i2u92_41:
  2766  00001C  EF19  F000         	goto	i2l193
  2767  000020                     i2u92_40:
  2768  000020                     
  2769                           ;main.c: 14:         A[reader] = RCREG;
  2770  000020  0E80               	movlw	low _A
  2771  000022  2452               	addwf	_reader^0,w,c	;volatile
  2772  000024  6ED9               	movwf	fsr2l,c
  2773  000026  6ADA               	clrf	fsr2h,c
  2774  000028  0E00               	movlw	high _A
  2775  00002A  22DA               	addwfc	fsr2h,f,c
  2776  00002C  CFAE FFDF          	movff	4014,indf2	;volatile
  2777  000030                     
  2778                           ;main.c: 15:         reader++;
  2779  000030  2A52               	incf	_reader^0,f,c	;volatile
  2780  000032                     i2l193:
  2781  000032  C002  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  2782  000036  C001  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  2783  00003A  9254               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2784  00003C  0011               	retfie		f
  2785  00003E                     __end_of_InterruptHandlerHigh:
  2786                           	opt callstack 0
  2787                           
  2788                           	psect	rparam
  2789  0000                     
  2790                           	psect	temp
  2791  000054                     btemp:
  2792                           	opt callstack 0
  2793  000054                     	ds	1
  2794  0000                     int$flags	set	btemp
  2795  0000                     wtemp8	set	btemp+1
  2796  0000                     ttemp5	set	btemp+1
  2797  0000                     ttemp6	set	btemp+4
  2798  0000                     ttemp7	set	btemp+8
  2799                           tosu	equ	0xFFF
  2800                           tosh	equ	0xFFE
  2801                           tosl	equ	0xFFD
  2802                           stkptr	equ	0xFFC
  2803                           pclatu	equ	0xFFB
  2804                           pclath	equ	0xFFA
  2805                           pcl	equ	0xFF9
  2806                           tblptru	equ	0xFF8
  2807                           tblptrh	equ	0xFF7
  2808                           tblptrl	equ	0xFF6
  2809                           tablat	equ	0xFF5
  2810                           prodh	equ	0xFF4
  2811                           prodl	equ	0xFF3
  2812                           indf0	equ	0xFEF
  2813                           postinc0	equ	0xFEE
  2814                           postdec0	equ	0xFED
  2815                           preinc0	equ	0xFEC
  2816                           plusw0	equ	0xFEB
  2817                           fsr0h	equ	0xFEA
  2818                           fsr0l	equ	0xFE9
  2819                           wreg	equ	0xFE8
  2820                           indf1	equ	0xFE7
  2821                           postinc1	equ	0xFE6
  2822                           postdec1	equ	0xFE5
  2823                           preinc1	equ	0xFE4
  2824                           plusw1	equ	0xFE3
  2825                           fsr1h	equ	0xFE2
  2826                           fsr1l	equ	0xFE1
  2827                           bsr	equ	0xFE0
  2828                           indf2	equ	0xFDF
  2829                           postinc2	equ	0xFDE
  2830                           postdec2	equ	0xFDD
  2831                           preinc2	equ	0xFDC
  2832                           plusw2	equ	0xFDB
  2833                           fsr2h	equ	0xFDA
  2834                           fsr2l	equ	0xFD9
  2835                           status	equ	0xFD8


Data Sizes:
    Strings     6
    Constant    0
    Data        8
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     73      83
    BANK0           160     11      78
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(COMRAM[2]), stoa@nuls(COMRAM[7]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(COMRAM[2]), stoa@nuls(COMRAM[7]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 10
		 -> main@buf(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@buf(BANK0[10]), 

    S1607_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@buf(BANK0[10]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@buf(BANK0[10]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    stoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(COMRAM[2]), stoa@nuls(COMRAM[7]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S357DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S357DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 10
		 -> main@buf(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_stoa
    _stoa->_fputc
    _atoi->_isspace
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _LCD_Init->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0   11887
                                             71 COMRAM     2     2      0
                                              0 BANK0     11    11      0
                           _LCD_Init
                         _LCD_String
                            _SetLine
                         _initSerial
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8413
                                             55 COMRAM    16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7921
                                             47 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           45    39      6    7418
                                             33 COMRAM    14     8      6
                               _atoi
                              _fputc
                            _isdigit
                               _stoa
 ---------------------------------------------------------------------------------
 (4) _stoa                                                22    18      4    2632
                                             11 COMRAM    22    18      4
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               4     2      2     290
                                              2 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4    1497
                                              2 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1985
                                              9 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     259
                                              2 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     281
                                              2 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     882
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initSerial                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1058
                                              6 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           2     0      2    1182
                                              6 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0    1151
                                              6 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1027
                                              4 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               2     2      0     124
                                              2 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                 2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _initSerial
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _fputc
           _putch
         _isdigit
         _stoa
           _fputc
             _putch
           _strlen

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      B      4E       5       48.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     49      53       1       88.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A1       3        0.0%
DATA                 0      0      A1      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Nov 25 15:31:48 2019

                            _A 0080                             l20 0A86                             l23 0D58  
                           l31 0D28                             l17 0DA4                             l26 0A0E  
                           l37 0C86            ___wmul@multiplicand 0005                    ?_LCD_String 0007  
                          l149 0D96                            l261 089A                            l245 079A  
                          l247 07A2                            l256 084A                            l257 0892  
                          l282 0B4A                            l283 0B52                            l276 0588  
                          l286 0D7E                            l198 0A8C                            l991 0CBE  
                          l985 0710                            l988 0718                            l999 0BFC  
                          wreg 000FE8                           l1014 0964                           l1032 0DAE  
                         l2000 076A                           l2010 07DC                           l2002 0778  
                         l2020 082C                           l2012 07FA                           l2100 0414  
                         l1029 0C4A                           l2030 058A                           l1038 0CF4  
                         l2014 0806                           l2006 07C4                           l2110 04C6  
                         l2040 05F8                           l2032 059E                           l2024 085C  
                         l2016 0824                           l2008 07D8                           l2120 052C  
                         l2104 045A                           l2050 0620                           l2042 05FC  
                         l2034 05A2                           l2026 0870                           l2018 0828  
                         l2114 04E6                           l2106 046C                           l2130 0552  
                         l2140 0D36                           l2220 0D90                           l2212 0D80  
                         l2052 0628                           l2036 05A6                           l2028 0874  
                         l2132 0576                           l2116 050A                           l2124 0538  
                         l2108 0490                           l2300 0AAC                           l2142 0D40  
                         l2222 0D92                           l2214 0D84                           l2062 06D0  
                         l2054 065C                           l2046 0602                           l2038 05C2  
                         l2126 0546                           l2118 0518                           l2150 0B0A  
                         l2230 0C16                           l2310 0AD6                           l2302 0AAE  
                         l2072 0A12                           l2144 0D48                           l2160 0994  
                         l2224 0D94                           l2216 0D8C                           l2064 06E2  
                         l2048 0618                           l2080 032C                           l2152 0B2E  
                         l2232 0C1E                           l2304 0AB0                           l2074 0A7A  
                         l2138 0D2C                           l2170 09EA                           l2162 09A8  
                         l2154 0966                           l2218 0D8E                           l2066 06F4  
                         l2058 0692                           l2090 037A                           l2082 033A  
                         l2146 0AF6                           l2234 0C3A                           l2226 0BFE  
                         l2306 0AB0                           l2076 0A7E                           l2172 09FA  
                         l2164 09B0                           l2156 097E                           l2180 0D16  
                         l2316 0646                           l2092 0388                           l2084 034A  
                         l2148 0AFE                           l2228 0C0E                           l2308 0ACA  
                         l2174 0A04                           l2166 09BE                           l2158 098E  
                         l2190 0C66                           l2182 0D20                           l2094 03AC  
                         l2086 034E                           l2078 0308                           l2168 09C4  
                         l2192 0C6E                           l2184 0C4C                           l2176 0CF8  
                         l2096 03E6                           l2088 0372                           l2186 0C50  
                         l2178 0D08                           l2098 0406                           l2290 0A9A  
                         l2188 0C62                           l2292 0A9E                           l2294 0AA2  
                         l2296 0AA8                           l2288 0A88                           l2298 0AAA  
                         l1940 08C0                           l1942 08CA                           l1950 0CC0  
                         l1960 0C88                           l1944 08E8                           l1936 089C  
                         l1952 0CCC                           l1970 0BAC                           l1946 091E  
                         l1938 08AE                           l1954 0CD0                           l1964 0D5A  
                         l1972 0BB0                           l1956 0CE8                           l1982 0D98  
                         l1966 0D76                           l1974 0BC4                           l1990 072C  
                         l1984 0D9A                           l1976 0BF2                           l1992 0734  
                         l1986 0DA2                           l1978 0BF6                           l1994 0746  
                         l1996 074E                           l1988 071A                           l1998 0762  
                         STR_1 0301                           u1000 08AE                           u1001 08AA  
                         u1010 08C0                           u1011 08BC                           u1020 08E8  
                         u1100 0746                           u1021 08E4                           u1101 0742  
                         u1030 091E                           u1110 0778                           u1031 091A  
                         u1111 0774                           u1200 0614                           u1040 0CE8  
                         u1120 0796                           u1201 0610                           u1041 0CE4  
                         u1121 0792                           u1050 0CB8                           u1210 06CA  
                         u1130 07C0                           u1051 0CB2                           u1211 06C4  
                         u1131 07BC                           u1060 0CBA                           u1220 06CC  
                         u1140 07FA                           u1300 046C                           u1141 07F6  
                         u1301 0468                           u1070 0BC4                           u1230 06E2  
                         u1150 084A                           u1310 0490                           u1071 0BC0  
                         u1231 06DE                           u1151 0846                           u1311 048C  
                         u1080 0BF2                           u1240 06F4                           u1160 0858  
                         u1320 050A                           u1081 0BEE                           u1241 06F0  
                         u1161 0854                           u1321 0506                           u1170 0892  
                         u1250 032C                           u1171 088E                           u1091 0724  
                         u1251 0328                           u1180 05C2                           u1260 0372  
                         u1340 0B4A                           u1181 05BE                           u1261 036E  
                         u1341 0B46                           u1350 0D08                           u1190 05F8  
                         u1270 03AC                           u1430 0A9A                           _LATB 000F8A  
                         u1335 0D34                           u1351 0D04                           u1191 05F4  
                         u1271 03A8                           u1431 0A96                           u1336 0D36  
                         u1360 0C86                           u1280 0454                           u1361 0C82  
                         u1281 044E                           u1290 0456                           u1507 09B8  
                         u1517 09C6                           u1527 09F0                           u1447 0AE0  
                         u1537 0D42                           u1457 0D22                           u1547 0D52  
                         u1467 0C68                           u1557 0A80                           u1477 0984  
                         u1567 0D9C                           u1487 099A                           u1497 09AA  
                         _dbuf 0060                           _atoi 058A                           _main 0A88  
                         _prec 004E                           _nout 004A                           fsr1h 000FE2  
                         fsr2h 000FDA                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           _stoa 071A                           btemp 0054  
                         prodh 000FF4                           prodl 000FF3                           start 003E  
                 ___param_bank 000000                __end_of_SendLCD 0D5A                __end_of_SetLine 0D2A  
             __end_of_LCD_Init 0A10                          ?_atoi 000A                          ?_main 0001  
                        ?_stoa 000C                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                          _PDC1L 000F77                          i2l193 0032  
                        _RCREG 000FAE                          _E_TOG 0D98                   vfpfcnvrt@fmt 0024  
                        _SPBRG 000FAF                          _TXREG 000FAD                          _flags 0050  
                        _fputc 089C                __end_of_isdigit 0CC0                          atoi@n 0017  
                        atoi@s 000A                          _width 004C                          _putch 0DAE  
              __end_of_isspace 0BFE                          tablat 000FF5                          plusw1 000FE3  
                        plusw2 000FDB                          stoa@i 0018                          stoa@l 0020  
                        stoa@p 001E                          stoa@s 000E                          stoa@w 001A  
                        ttemp5 0055                          ttemp6 0058                          ttemp7 005C  
                        status 000FD8                          wtemp8 0055            __size_of_LCD_String 003C  
              __end_of_sprintf 0C4C                   _TurningSpeed 0053                __initialization 0B54  
                 __end_of_atoi 071A                   __end_of_main 0AF6                   __end_of_stoa 089C  
               __CFG_OSC$IRCIO 000000               LCD_String@string 0007                         ??_atoi 000C  
                       ??_main 0048                         ??_stoa 0010                  __activetblptr 000002  
                       ?_E_TOG 0001                         ?_fputc 0003                         ?_putch 0001  
                       i2l1860 0020                         i2l1862 0030                         i2l1858 0012  
                       _LCDout 0A10                    SendLCD@Byte 0006                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                    SendLCD@type 0005  
                    ??_SendLCD 0006                      ??_SetLine 0007                   vfprintf@cfmt 0036  
                       ___wmul 0D5A                         _reader 0052                         clear_0 0B8C  
                       clear_1 0B98                         _motorL 0093                         _motorR 008A  
                       _strlen 0CC0                         fputc@c 0003                   __pdataCOMRAM 0053  
                    ??_isdigit 0005                   __mediumconst 0000                      ??_isspace 0005  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       stoa@cp 001C                         stoa@fp 000C                         putch@c 0001  
             __end_of_vfprintf 0B54                      ??_sprintf 003E                     __accesstop 0060  
      __end_of__initialization 0B9E                      ?_LCD_Init 0001                  ___rparam_used 000001  
                  SetLine@line 0007                  __end_of_E_TOG 0DA6                 __pcstackCOMRAM 0001  
                 __pidataBANK0 0DA6                  __end_of_fputc 0966                  __end_of_putch 0DB0  
                 ??_LCD_String 0009                        ??_E_TOG 0003  __size_of_InterruptHandlerHigh 0036  
                      ??_fputc 0007                        ??_putch 0003                     __pbssBANK0 0060  
                      ?_LCDout 0001                     ??_LCD_Init 0007             __end_of_LCD_String 0C88  
                      ?___wmul 0003                        ?_strlen 0003             __size_of_vfpfcnvrt 0282  
                      i2u92_40 0020                        i2u92_41 001C                        _PWMCON0 000F6F  
                      _PWMCON1 000F6E                __size_of_LCDout 0078                        _SendLCD 0D2A  
                      __Hparam 0000                        _SetLine 0CF6                        __Lparam 0000  
                   _initSerial 0D80                __size_of___wmul 0026                      ?_vfprintf 0030  
                 __psmallconst 0300                        __pcinit 0B54                        __ramtop 0300  
                      __ptext0 0A88                        __ptext1 0BFE                        __ptext2 0AF6  
                      __ptext3 0308                        __ptext4 071A                        __ptext5 0CC0  
                      __ptext6 089C                        __ptext7 0DAE                        __ptext8 058A  
                      __ptext9 0BAC                __size_of_strlen 0036                        _isdigit 0C88  
                 LCDout@number 0004                        _isspace 0BAC                        atoi@neg 0010  
                      main@buf 009C                        _sprintf 0BFE           end_of_initialization 0B9E  
                      fputc@fp 0005                  __Lmediumconst 0000              __end_of_vfpfcnvrt 058A  
                    _RCSTAbits 000FAB                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
                   ??_vfprintf 0036                        strlen@a 0005                        strlen@s 0003  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISCbits 000F94  
                    _TRISDbits 000F95                 __end_of_LCDout 0A88                      _TXSTAbits 000FAC  
            __size_of_LCD_Init 00AA                    ?_initSerial 0001                    vfpfcnvrt@ap 0026  
                  vfpfcnvrt@cp 002C                    vfpfcnvrt@fp 0022                 __end_of___wmul 0D80  
                  _BAUDCONbits 000FAA                  __pidataCOMRAM 0DB0                 __end_of_strlen 0CF6  
          start_initialization 0B54                       ??_LCDout 0003   __end_of_InterruptHandlerHigh 003E  
                  vfprintf@fmt 0032                       ??___wmul 0007                    __pdataBANK0 00A6  
                     ??_strlen 0005                    __pbssCOMRAM 004A                  __pcstackBANK0 009C  
          __size_of_initSerial 0018                      _atoi$1585 0012                      _atoi$1586 0016  
                    _atoi$1587 0014                       ?_SendLCD 0005                       ?_SetLine 0001  
                    __pintcode 0008              __size_of_vfprintf 005E                    __smallconst 0300  
               __size_of_E_TOG 000E                       ?_isdigit 0003                       ?_isspace 0003  
                     ?_sprintf 0038                 __size_of_fputc 00CA                 __size_of_putch 0002  
                     _LCD_Init 0966                 ___wmul@product 0007                       _LATAbits 000F89  
                     _LATBbits 000F8A                       _LATCbits 000F8B                       _LATDbits 000F8C  
                     _PIE1bits 000F9D                       _PIR1bits 000F9E                       _RCONbits 000FD0  
                    _vfpfcnvrt 0308              ___wmul@multiplier 0003           _InterruptHandlerHigh 0008  
                 _isspace$1603 0009                      copy_data0 0B68                       __Hrparam 0000  
             __size_of_SendLCD 0030                     vfprintf@ap 0034                       __Lrparam 0000  
                   vfprintf@fp 0030               __size_of_SetLine 0034                   ??_initSerial 0003  
                   ?_vfpfcnvrt 0022          ?_InterruptHandlerHigh 0001                     sprintf@fmt 003A  
             __size_of_isdigit 0038               __size_of_isspace 0052                       __ptext10 0C88  
                     __ptext11 0D5A                       __ptext12 0D80                       __ptext13 0CF6  
                     __ptext14 0C4C                       __ptext15 0966                       __ptext16 0D2A  
                     __ptext17 0A10                       __ptext18 0D98               __size_of_sprintf 004E  
           __end_of_initSerial 0D98                  __size_of_atoi 0190                  __size_of_main 006E  
                __size_of_stoa 0182                      stoa@F1131 00A6                       int$flags 0054  
                     _vfprintf 0AF6                     _LCD_String 0C4C                 _vfpfcnvrt$1130 002E  
                   _INTCONbits 000FF2                       isdigit@c 0003                       intlevel2 0000  
                    sprintf@ap 0040                       isspace@c 0003                     _OSCCONbits 000FD3  
                  ??_vfpfcnvrt 0028                       stoa@nuls 0011         ??_InterruptHandlerHigh 0001  
                     sprintf@f 0042                       sprintf@s 0038  
