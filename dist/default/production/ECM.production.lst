

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Nov 28 12:20:19 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    25  0000                     
    26                           ; Version 2.10
    27                           ; Generated 31/07/2019 GMT
    28                           ; 
    29                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4331 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	idataCOMRAM
    62  000394                     __pidataCOMRAM:
    63                           	opt callstack 0
    64                           
    65                           ;initializer for _TurningSpeed
    66  000394  4B                 	db	75
    67  0000                     _PIE1bits	set	3997
    68  0000                     _RCONbits	set	4048
    69  0000                     _INTCONbits	set	4082
    70  0000                     _OSCCONbits	set	4051
    71  0000                     _OSCCON	set	4051
    72  0000                     _RCSTAbits	set	4011
    73  0000                     _TXSTAbits	set	4012
    74  0000                     _BAUDCONbits	set	4010
    75  0000                     _SPBRGH	set	4016
    76  0000                     _SPBRG	set	4015
    77  0000                     _TXREG	set	4013
    78  0000                     _RCREG	set	4014
    79  0000                     _PIR1bits	set	3998
    80  0000                     _LATB	set	3978
    81  0000                     _PTPERH	set	3962
    82  0000                     _PTPERL	set	3963
    83  0000                     _PWMCON1	set	3950
    84  0000                     _PWMCON0	set	3951
    85  0000                     _PTCON1	set	3966
    86  0000                     _PTCON0	set	3967
    87  0000                     _LATBbits	set	3978
    88  0000                     _TRISBbits	set	3987
    89  0000                     _TRISDbits	set	3989
    90  0000                     _TRISCbits	set	3988
    91  0000                     _TRISAbits	set	3986
    92  0000                     _LATAbits	set	3977
    93  0000                     _LATDbits	set	3980
    94  0000                     _LATCbits	set	3979
    95  0000                     _PDC1H	set	3958
    96  0000                     _PDC1L	set	3959
    97  0000                     _PDC0H	set	3960
    98  0000                     _PDC0L	set	3961
    99                           
   100                           ; #config settings
   101  0000                     
   102                           	psect	cinit
   103  000304                     __pcinit:
   104                           	opt callstack 0
   105  000304                     start_initialization:
   106                           	opt callstack 0
   107  000304                     __initialization:
   108                           	opt callstack 0
   109                           
   110                           ; Initialize objects allocated to COMRAM (1 bytes)
   111                           ; load TBLPTR registers with __pidataCOMRAM
   112  000304  0E94               	movlw	low __pidataCOMRAM
   113  000306  6EF6               	movwf	tblptrl,c
   114  000308  0E03               	movlw	high __pidataCOMRAM
   115  00030A  6EF7               	movwf	tblptrh,c
   116  00030C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   117  00030E  6EF8               	movwf	tblptru,c
   118  000310  0009               	tblrd		*+	;fetch initializer
   119  000312  CFF5 F03E          	movff	tablat,__pdataCOMRAM
   120                           
   121                           ; Clear objects allocated to COMRAM (34 bytes)
   122  000316  EE00  F001         	lfsr	0,__pbssCOMRAM
   123  00031A  0E22               	movlw	34
   124  00031C                     clear_0:
   125  00031C  6AEE               	clrf	postinc0,c
   126  00031E  06E8               	decf	wreg,f,c
   127  000320  E1FD               	bnz	clear_0
   128  000322                     end_of_initialization:
   129                           	opt callstack 0
   130  000322                     __end_of__initialization:
   131                           	opt callstack 0
   132  000322  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   133  000324  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   134  000326  0100               	movlb	0
   135  000328  EF21  F000         	goto	_main	;jump to C main() function
   136                           
   137                           	psect	bssCOMRAM
   138  000001                     __pbssCOMRAM:
   139                           	opt callstack 0
   140  000001                     _reader:
   141                           	opt callstack 0
   142  000001                     	ds	1
   143  000002                     _A:
   144                           	opt callstack 0
   145  000002                     	ds	15
   146  000011                     _motorR:
   147                           	opt callstack 0
   148  000011                     	ds	9
   149  00001A                     _motorL:
   150                           	opt callstack 0
   151  00001A                     	ds	9
   152                           
   153                           	psect	dataCOMRAM
   154  00003E                     __pdataCOMRAM:
   155                           	opt callstack 0
   156  00003E                     _TurningSpeed:
   157                           	opt callstack 0
   158  00003E                     	ds	1
   159                           
   160                           	psect	cstackCOMRAM
   161  000023                     __pcstackCOMRAM:
   162                           	opt callstack 0
   163  000023                     ??_InterruptHandlerHigh:
   164  000023                     
   165                           ; 1 bytes @ 0x0
   166  000023                     	ds	2
   167  000025                     ??_LCDout:
   168  000025                     ?___wmul:
   169                           	opt callstack 0
   170  000025                     ___wmul@multiplier:
   171                           	opt callstack 0
   172                           
   173                           ; 2 bytes @ 0x2
   174  000025                     	ds	1
   175  000026                     LCDout@number:
   176                           	opt callstack 0
   177                           
   178                           ; 1 bytes @ 0x3
   179  000026                     	ds	1
   180  000027                     SendLCD@type:
   181                           	opt callstack 0
   182  000027                     ___wmul@multiplicand:
   183                           	opt callstack 0
   184                           
   185                           ; 2 bytes @ 0x4
   186  000027                     	ds	1
   187  000028                     SendLCD@Byte:
   188                           	opt callstack 0
   189                           
   190                           ; 1 bytes @ 0x5
   191  000028                     	ds	1
   192  000029                     ??_LCD_Init:
   193  000029                     ??_ClearLCD:
   194  000029                     SetLine@line:
   195                           	opt callstack 0
   196  000029                     LCD_String@string:
   197                           	opt callstack 0
   198  000029                     ___wmul@product:
   199                           	opt callstack 0
   200                           
   201                           ; 2 bytes @ 0x6
   202  000029                     	ds	2
   203  00002B                     delay_s@seconds:
   204                           	opt callstack 0
   205                           
   206                           ; 2 bytes @ 0x8
   207  00002B                     	ds	2
   208  00002D                     ??_delay_s:
   209                           
   210                           ; 1 bytes @ 0xA
   211  00002D                     	ds	1
   212  00002E                     delay_s@i:
   213                           	opt callstack 0
   214                           
   215                           ; 2 bytes @ 0xB
   216  00002E                     	ds	2
   217  000030                     delay_s@j:
   218                           	opt callstack 0
   219                           
   220                           ; 2 bytes @ 0xD
   221  000030                     	ds	2
   222  000032                     main@buf:
   223                           	opt callstack 0
   224                           
   225                           ; 11 bytes @ 0xF
   226  000032                     	ds	11
   227  00003D                     main@i:
   228                           	opt callstack 0
   229                           
   230                           ; 1 bytes @ 0x1A
   231  00003D                     	ds	1
   232                           
   233 ;;
   234 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   235 ;;
   236 ;; *************** function _main *****************
   237 ;; Defined at:
   238 ;;		line 19 in file "main.c"
   239 ;; Parameters:    Size  Location     Type
   240 ;;		None
   241 ;; Auto vars:     Size  Location     Type
   242 ;;  buf            11   15[COMRAM] unsigned char [11]
   243 ;;  i               1   26[COMRAM] unsigned char 
   244 ;; Return value:  Size  Location     Type
   245 ;;                  1    wreg      void 
   246 ;; Registers used:
   247 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   248 ;; Tracked objects:
   249 ;;		On entry : 0/0
   250 ;;		On exit  : 0/0
   251 ;;		Unchanged: 0/0
   252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   253 ;;      Params:         0       0       0       0
   254 ;;      Locals:        12       0       0       0
   255 ;;      Temps:          0       0       0       0
   256 ;;      Totals:        12       0       0       0
   257 ;;Total ram usage:       12 bytes
   258 ;; Hardware stack levels required when called:    5
   259 ;; This function calls:
   260 ;;		_ClearLCD
   261 ;;		_LCD_Init
   262 ;;		_LCD_String
   263 ;;		_SetLine
   264 ;;		_delay_s
   265 ;;		_initSerial
   266 ;; This function is called by:
   267 ;;		Startup code after reset
   268 ;; This function uses a non-reentrant model
   269 ;;
   270                           
   271                           	psect	text0
   272  000042                     __ptext0:
   273                           	opt callstack 0
   274  000042                     _main:
   275                           	opt callstack 26
   276  000042                     
   277                           ;main.c: 20:     OSCCON = 0x72;
   278  000042  0E72               	movlw	114
   279  000044  6ED3               	movwf	211,c	;volatile
   280  000046                     l196:
   281  000046  A4D3               	btfss	211,2,c	;volatile
   282  000048  EF28  F000         	goto	u261
   283  00004C  EF2A  F000         	goto	u260
   284  000050                     u261:
   285  000050  EF23  F000         	goto	l196
   286  000054                     u260:
   287  000054                     
   288                           ;main.c: 22:     initSerial();
   289  000054  ECB7  F001         	call	_initSerial	;wreg free
   290  000058                     
   291                           ;main.c: 23:     LCD_Init();
   292  000058  EC76  F000         	call	_LCD_Init	;wreg free
   293  00005C                     
   294                           ;main.c: 24:     SetLine(1);
   295  00005C  0E01               	movlw	1
   296  00005E  EC50  F001         	call	_SetLine
   297  000062                     
   298                           ;main.c: 26:     INTCONbits.GIEL = 1;
   299  000062  8CF2               	bsf	242,6,c	;volatile
   300  000064                     
   301                           ;main.c: 27:     RCONbits.IPEN = 1;
   302  000064  8ED0               	bsf	208,7,c	;volatile
   303  000066                     
   304                           ;main.c: 28:     PIE1bits.RCIE = 1;
   305  000066  8A9D               	bsf	157,5,c	;volatile
   306  000068                     
   307                           ;main.c: 29:     INTCONbits.GIEH = 1;
   308  000068  8EF2               	bsf	242,7,c	;volatile
   309  00006A                     l1273:
   310                           
   311                           ;main.c: 31:     char i;;main.c: 32:     char buf[11];;main.c: 33:     reader=0;
   312  00006A  0E00               	movlw	0
   313  00006C  6E01               	movwf	_reader^0,c	;volatile
   314  00006E                     l1275:
   315                           
   316                           ;main.c: 36:         if (reader == 15) {
   317  00006E  0E0F               	movlw	15
   318  000070  1801               	xorwf	_reader^0,w,c	;volatile
   319  000072  A4D8               	btfss	status,2,c
   320  000074  EF3E  F000         	goto	u271
   321  000078  EF40  F000         	goto	u270
   322  00007C                     u271:
   323  00007C  EF37  F000         	goto	l1275
   324  000080                     u270:
   325  000080                     
   326                           ;main.c: 37:             for (i = 0; i<10; i++) {
   327  000080  0E00               	movlw	0
   328  000082  6E3D               	movwf	main@i^0,c
   329  000084                     l1283:
   330                           
   331                           ;main.c: 38:                 buf[i] = A[i + 1];
   332  000084  0E03               	movlw	low (_A+1)
   333  000086  243D               	addwf	main@i^0,w,c
   334  000088  6ED9               	movwf	fsr2l,c
   335  00008A  6ADA               	clrf	fsr2h,c
   336  00008C  0E00               	movlw	high (_A+1)
   337  00008E  22DA               	addwfc	fsr2h,f,c
   338  000090  0E32               	movlw	low main@buf
   339  000092  243D               	addwf	main@i^0,w,c
   340  000094  6EE1               	movwf	fsr1l,c
   341  000096  6AE2               	clrf	fsr1h,c
   342  000098  0E00               	movlw	high main@buf
   343  00009A  22E2               	addwfc	fsr1h,f,c
   344  00009C  CFDF FFE7          	movff	indf2,indf1
   345  0000A0                     
   346                           ;main.c: 39:             }
   347  0000A0  2A3D               	incf	main@i^0,f,c
   348  0000A2  0E09               	movlw	9
   349  0000A4  643D               	cpfsgt	main@i^0,c
   350  0000A6  EF57  F000         	goto	u281
   351  0000AA  EF59  F000         	goto	u280
   352  0000AE                     u281:
   353  0000AE  EF42  F000         	goto	l1283
   354  0000B2                     u280:
   355  0000B2                     
   356                           ;main.c: 40:             buf[10]=0;
   357  0000B2  0E00               	movlw	0
   358  0000B4  6E3C               	movwf	(main@buf+10)^0,c
   359  0000B6                     
   360                           ;main.c: 42:             ClearLCD();
   361  0000B6  ECA9  F001         	call	_ClearLCD	;wreg free
   362  0000BA                     
   363                           ;main.c: 43:             LCD_String(buf);
   364  0000BA  0E32               	movlw	low main@buf
   365  0000BC  6E29               	movwf	LCD_String@string^0,c
   366  0000BE  0E00               	movlw	high main@buf
   367  0000C0  6E2A               	movwf	(LCD_String@string+1)^0,c
   368  0000C2  EC32  F001         	call	_LCD_String	;wreg free
   369  0000C6                     
   370                           ;main.c: 44:             SetLine(2);
   371  0000C6  0E02               	movlw	2
   372  0000C8  EC50  F001         	call	_SetLine
   373  0000CC                     
   374                           ;main.c: 46:             LCD_String(A);
   375  0000CC  0E02               	movlw	low _A
   376  0000CE  6E29               	movwf	LCD_String@string^0,c
   377  0000D0  0E00               	movlw	high _A
   378  0000D2  6E2A               	movwf	(LCD_String@string+1)^0,c
   379  0000D4  EC32  F001         	call	_LCD_String	;wreg free
   380  0000D8                     
   381                           ;main.c: 47:             delay_s(1);
   382  0000D8  0E00               	movlw	0
   383  0000DA  6E2C               	movwf	(delay_s@seconds+1)^0,c
   384  0000DC  0E01               	movlw	1
   385  0000DE  6E2B               	movwf	delay_s@seconds^0,c
   386  0000E0  EC09  F001         	call	_delay_s	;wreg free
   387  0000E4  EF35  F000         	goto	l1273
   388  0000E8  EF1F  F000         	goto	start
   389  0000EC                     __end_of_main:
   390                           	opt callstack 0
   391                           
   392 ;; *************** function _initSerial *****************
   393 ;; Defined at:
   394 ;;		line 26 in file "serial.c"
   395 ;; Parameters:    Size  Location     Type
   396 ;;		None
   397 ;; Auto vars:     Size  Location     Type
   398 ;;		None
   399 ;; Return value:  Size  Location     Type
   400 ;;                  1    wreg      void 
   401 ;; Registers used:
   402 ;;		wreg, status,2
   403 ;; Tracked objects:
   404 ;;		On entry : 0/0
   405 ;;		On exit  : 0/0
   406 ;;		Unchanged: 0/0
   407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   408 ;;      Params:         0       0       0       0
   409 ;;      Locals:         0       0       0       0
   410 ;;      Temps:          0       0       0       0
   411 ;;      Totals:         0       0       0       0
   412 ;;Total ram usage:        0 bytes
   413 ;; Hardware stack levels used:    1
   414 ;; Hardware stack levels required when called:    1
   415 ;; This function calls:
   416 ;;		Nothing
   417 ;; This function is called by:
   418 ;;		_main
   419 ;; This function uses a non-reentrant model
   420 ;;
   421                           
   422                           	psect	text1
   423  00036E                     __ptext1:
   424                           	opt callstack 0
   425  00036E                     _initSerial:
   426                           	opt callstack 29
   427  00036E                     
   428                           ;serial.c: 27:     TRISCbits.RC6 = 1;
   429  00036E  8C94               	bsf	148,6,c	;volatile
   430                           
   431                           ;serial.c: 28:     TRISCbits.RC7 = 1;
   432  000370  8E94               	bsf	148,7,c	;volatile
   433  000372                     
   434                           ;serial.c: 29:     SPBRG = 207;
   435  000372  0ECF               	movlw	207
   436  000374  6EAF               	movwf	175,c	;volatile
   437                           
   438                           ;serial.c: 30:     SPBRGH = 0;
   439  000376  0E00               	movlw	0
   440  000378  6EB0               	movwf	176,c	;volatile
   441  00037A                     
   442                           ;serial.c: 31:     BAUDCONbits.BRG16 = 1;
   443  00037A  86AA               	bsf	170,3,c	;volatile
   444  00037C                     
   445                           ;serial.c: 32:     TXSTAbits.BRGH = 1;
   446  00037C  84AC               	bsf	172,2,c	;volatile
   447  00037E                     
   448                           ;serial.c: 33:     RCSTAbits.CREN = 1;
   449  00037E  88AB               	bsf	171,4,c	;volatile
   450  000380                     
   451                           ;serial.c: 34:     RCSTAbits.SPEN = 1;
   452  000380  8EAB               	bsf	171,7,c	;volatile
   453  000382                     
   454                           ;serial.c: 35:     TXSTAbits.TXEN = 1;
   455  000382  8AAC               	bsf	172,5,c	;volatile
   456  000384  0012               	return		;funcret
   457  000386                     __end_of_initSerial:
   458                           	opt callstack 0
   459                           
   460 ;; *************** function _delay_s *****************
   461 ;; Defined at:
   462 ;;		line 107 in file "motor.c"
   463 ;; Parameters:    Size  Location     Type
   464 ;;  seconds         2    8[COMRAM] int 
   465 ;; Auto vars:     Size  Location     Type
   466 ;;  j               2   13[COMRAM] unsigned int 
   467 ;;  i               2   11[COMRAM] unsigned int 
   468 ;; Return value:  Size  Location     Type
   469 ;;                  1    wreg      void 
   470 ;; Registers used:
   471 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   472 ;; Tracked objects:
   473 ;;		On entry : 0/0
   474 ;;		On exit  : 0/0
   475 ;;		Unchanged: 0/0
   476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   477 ;;      Params:         2       0       0       0
   478 ;;      Locals:         4       0       0       0
   479 ;;      Temps:          1       0       0       0
   480 ;;      Totals:         7       0       0       0
   481 ;;Total ram usage:        7 bytes
   482 ;; Hardware stack levels used:    1
   483 ;; Hardware stack levels required when called:    2
   484 ;; This function calls:
   485 ;;		___wmul
   486 ;; This function is called by:
   487 ;;		_main
   488 ;; This function uses a non-reentrant model
   489 ;;
   490                           
   491                           	psect	text2
   492  000212                     __ptext2:
   493                           	opt callstack 0
   494  000212                     _delay_s:
   495                           	opt callstack 28
   496  000212                     
   497                           ;motor.c: 108:     unsigned int i;;motor.c: 109:     i = seconds * 20;
   498  000212  C02B  F025         	movff	delay_s@seconds,___wmul@multiplier
   499  000216  C02C  F026         	movff	delay_s@seconds+1,___wmul@multiplier+1
   500  00021A  0E00               	movlw	0
   501  00021C  6E28               	movwf	(___wmul@multiplicand+1)^0,c
   502  00021E  0E14               	movlw	20
   503  000220  6E27               	movwf	___wmul@multiplicand^0,c
   504  000222  EC96  F001         	call	___wmul	;wreg free
   505  000226  C025  F02E         	movff	?___wmul,delay_s@i
   506  00022A  C026  F02F         	movff	?___wmul+1,delay_s@i+1
   507  00022E                     
   508                           ;motor.c: 110:     unsigned int j;;motor.c: 111:     for (j = 0; j < i; j++) {
   509  00022E  0E00               	movlw	0
   510  000230  6E31               	movwf	(delay_s@j+1)^0,c
   511  000232  0E00               	movlw	0
   512  000234  6E30               	movwf	delay_s@j^0,c
   513  000236  EF26  F001         	goto	l105
   514  00023A                     l1213:
   515                           
   516                           ;motor.c: 112:         _delay((unsigned long)((50)*(8000000/4000.0)));
   517  00023A  0E82               	movlw	130
   518  00023C  6E2D               	movwf	??_delay_s^0,c
   519  00023E  0EDE               	movlw	222
   520  000240                     u297:
   521  000240  2EE8               	decfsz	wreg,f,c
   522  000242  D7FE               	bra	u297
   523  000244  2E2D               	decfsz	??_delay_s^0,f,c
   524  000246  D7FC               	bra	u297
   525  000248                     
   526                           ;motor.c: 113:     }
   527  000248  4A30               	infsnz	delay_s@j^0,f,c
   528  00024A  2A31               	incf	(delay_s@j+1)^0,f,c
   529  00024C                     l105:
   530  00024C  502E               	movf	delay_s@i^0,w,c
   531  00024E  5C30               	subwf	delay_s@j^0,w,c
   532  000250  502F               	movf	(delay_s@i+1)^0,w,c
   533  000252  5831               	subwfb	(delay_s@j+1)^0,w,c
   534  000254  A0D8               	btfss	status,0,c
   535  000256  EF2F  F001         	goto	u241
   536  00025A  EF31  F001         	goto	u240
   537  00025E                     u241:
   538  00025E  EF1D  F001         	goto	l1213
   539  000262                     u240:
   540  000262  0012               	return		;funcret
   541  000264                     __end_of_delay_s:
   542                           	opt callstack 0
   543                           
   544 ;; *************** function ___wmul *****************
   545 ;; Defined at:
   546 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
   547 ;; Parameters:    Size  Location     Type
   548 ;;  multiplier      2    2[COMRAM] unsigned int 
   549 ;;  multiplicand    2    4[COMRAM] unsigned int 
   550 ;; Auto vars:     Size  Location     Type
   551 ;;  product         2    6[COMRAM] unsigned int 
   552 ;; Return value:  Size  Location     Type
   553 ;;                  2    2[COMRAM] unsigned int 
   554 ;; Registers used:
   555 ;;		wreg, status,2, status,0, prodl, prodh
   556 ;; Tracked objects:
   557 ;;		On entry : 0/0
   558 ;;		On exit  : 0/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   561 ;;      Params:         4       0       0       0
   562 ;;      Locals:         2       0       0       0
   563 ;;      Temps:          0       0       0       0
   564 ;;      Totals:         6       0       0       0
   565 ;;Total ram usage:        6 bytes
   566 ;; Hardware stack levels used:    1
   567 ;; Hardware stack levels required when called:    1
   568 ;; This function calls:
   569 ;;		Nothing
   570 ;; This function is called by:
   571 ;;		_delay_s
   572 ;;		_setMotorPWM
   573 ;; This function uses a non-reentrant model
   574 ;;
   575                           
   576                           	psect	text3
   577  00032C                     __ptext3:
   578                           	opt callstack 0
   579  00032C                     ___wmul:
   580                           	opt callstack 28
   581  00032C  5025               	movf	___wmul@multiplier^0,w,c
   582  00032E  0227               	mulwf	___wmul@multiplicand^0,c
   583  000330  CFF3 F029          	movff	prodl,___wmul@product
   584  000334  CFF4 F02A          	movff	prodh,___wmul@product+1
   585  000338  5025               	movf	___wmul@multiplier^0,w,c
   586  00033A  0228               	mulwf	(___wmul@multiplicand+1)^0,c
   587  00033C  50F3               	movf	243,w,c
   588  00033E  262A               	addwf	(___wmul@product+1)^0,f,c
   589  000340  5026               	movf	(___wmul@multiplier+1)^0,w,c
   590  000342  0227               	mulwf	___wmul@multiplicand^0,c
   591  000344  50F3               	movf	243,w,c
   592  000346  262A               	addwf	(___wmul@product+1)^0,f,c
   593  000348  C029  F025         	movff	___wmul@product,?___wmul
   594  00034C  C02A  F026         	movff	___wmul@product+1,?___wmul+1
   595  000350  0012               	return		;funcret
   596  000352                     __end_of___wmul:
   597                           	opt callstack 0
   598                           
   599 ;; *************** function _SetLine *****************
   600 ;; Defined at:
   601 ;;		line 85 in file "lcd.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;  line            1    wreg     unsigned char 
   604 ;; Auto vars:     Size  Location     Type
   605 ;;  line            1    6[COMRAM] unsigned char 
   606 ;; Return value:  Size  Location     Type
   607 ;;                  1    wreg      void 
   608 ;; Registers used:
   609 ;;		wreg, status,2, status,0, cstack
   610 ;; Tracked objects:
   611 ;;		On entry : 0/0
   612 ;;		On exit  : 0/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   615 ;;      Params:         0       0       0       0
   616 ;;      Locals:         1       0       0       0
   617 ;;      Temps:          0       0       0       0
   618 ;;      Totals:         1       0       0       0
   619 ;;Total ram usage:        1 bytes
   620 ;; Hardware stack levels used:    1
   621 ;; Hardware stack levels required when called:    4
   622 ;; This function calls:
   623 ;;		_SendLCD
   624 ;; This function is called by:
   625 ;;		_main
   626 ;; This function uses a non-reentrant model
   627 ;;
   628                           
   629                           	psect	text4
   630  0002A0                     __ptext4:
   631                           	opt callstack 0
   632  0002A0                     _SetLine:
   633                           	opt callstack 26
   634                           
   635                           ;incstack = 0
   636                           ;SetLine@line stored from wreg
   637  0002A0  6E29               	movwf	SetLine@line^0,c
   638  0002A2                     
   639                           ;lcd.c: 86:     if (line == 1) {
   640  0002A2  0429               	decf	SetLine@line^0,w,c
   641  0002A4  A4D8               	btfss	status,2,c
   642  0002A6  EF57  F001         	goto	u181
   643  0002AA  EF59  F001         	goto	u180
   644  0002AE                     u181:
   645  0002AE  EF60  F001         	goto	l1173
   646  0002B2                     u180:
   647  0002B2                     
   648                           ;lcd.c: 87:         SendLCD(0x80, 0);
   649  0002B2  0E00               	movlw	0
   650  0002B4  6E27               	movwf	SendLCD@type^0,c
   651  0002B6  0E80               	movlw	128
   652  0002B8  EC6A  F001         	call	_SendLCD
   653                           
   654                           ;lcd.c: 88:     } else {
   655  0002BC  EF65  F001         	goto	l1175
   656  0002C0                     l1173:
   657                           
   658                           ;lcd.c: 89:         SendLCD(0xC0, 0);
   659  0002C0  0E00               	movlw	0
   660  0002C2  6E27               	movwf	SendLCD@type^0,c
   661  0002C4  0EC0               	movlw	192
   662  0002C6  EC6A  F001         	call	_SendLCD
   663  0002CA                     l1175:
   664                           
   665                           ;lcd.c: 91:     _delay((unsigned long)((50)*(8000000/4000000.0)));
   666  0002CA  0E21               	movlw	33
   667  0002CC                     u307:
   668  0002CC  2EE8               	decfsz	wreg,f,c
   669  0002CE  D7FE               	bra	u307
   670  0002D0  F000               	nop	
   671  0002D2  0012               	return		;funcret
   672  0002D4                     __end_of_SetLine:
   673                           	opt callstack 0
   674                           
   675 ;; *************** function _LCD_String *****************
   676 ;; Defined at:
   677 ;;		line 94 in file "lcd.c"
   678 ;; Parameters:    Size  Location     Type
   679 ;;  string          2    6[COMRAM] PTR unsigned char 
   680 ;;		 -> main@buf(11), A(15), 
   681 ;; Auto vars:     Size  Location     Type
   682 ;;		None
   683 ;; Return value:  Size  Location     Type
   684 ;;                  1    wreg      void 
   685 ;; Registers used:
   686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   687 ;; Tracked objects:
   688 ;;		On entry : 0/0
   689 ;;		On exit  : 0/0
   690 ;;		Unchanged: 0/0
   691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   692 ;;      Params:         2       0       0       0
   693 ;;      Locals:         0       0       0       0
   694 ;;      Temps:          0       0       0       0
   695 ;;      Totals:         2       0       0       0
   696 ;;Total ram usage:        2 bytes
   697 ;; Hardware stack levels used:    1
   698 ;; Hardware stack levels required when called:    4
   699 ;; This function calls:
   700 ;;		_SendLCD
   701 ;; This function is called by:
   702 ;;		_main
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706                           	psect	text5
   707  000264                     __ptext5:
   708                           	opt callstack 0
   709  000264                     _LCD_String:
   710                           	opt callstack 26
   711  000264                     
   712                           ;lcd.c: 96:     while (*string != 0) {
   713  000264  EF43  F001         	goto	l1185
   714  000268                     l1179:
   715                           
   716                           ;lcd.c: 99:         SendLCD(*string++, 1);
   717  000268  0E01               	movlw	1
   718  00026A  6E27               	movwf	SendLCD@type^0,c
   719  00026C  C029  FFD9         	movff	LCD_String@string,fsr2l
   720  000270  C02A  FFDA         	movff	LCD_String@string+1,fsr2h
   721  000274  50DF               	movf	indf2,w,c
   722  000276  EC6A  F001         	call	_SendLCD
   723  00027A  4A29               	infsnz	LCD_String@string^0,f,c
   724  00027C  2A2A               	incf	(LCD_String@string+1)^0,f,c
   725  00027E                     
   726                           ;lcd.c: 100:         _delay((unsigned long)((50)*(8000000/4000000.0)));
   727  00027E  0E21               	movlw	33
   728  000280                     u317:
   729  000280  2EE8               	decfsz	wreg,f,c
   730  000282  D7FE               	bra	u317
   731  000284  F000               	nop	
   732  000286                     l1185:
   733                           
   734                           ;lcd.c: 96:     while (*string != 0) {
   735  000286  C029  FFD9         	movff	LCD_String@string,fsr2l
   736  00028A  C02A  FFDA         	movff	LCD_String@string+1,fsr2h
   737  00028E  50DF               	movf	indf2,w,c
   738  000290  A4D8               	btfss	status,2,c
   739  000292  EF4D  F001         	goto	u191
   740  000296  EF4F  F001         	goto	u190
   741  00029A                     u191:
   742  00029A  EF34  F001         	goto	l1179
   743  00029E                     u190:
   744  00029E  0012               	return		;funcret
   745  0002A0                     __end_of_LCD_String:
   746                           	opt callstack 0
   747                           
   748 ;; *************** function _LCD_Init *****************
   749 ;; Defined at:
   750 ;;		line 38 in file "lcd.c"
   751 ;; Parameters:    Size  Location     Type
   752 ;;		None
   753 ;; Auto vars:     Size  Location     Type
   754 ;;		None
   755 ;; Return value:  Size  Location     Type
   756 ;;                  1    wreg      void 
   757 ;; Registers used:
   758 ;;		wreg, status,2, status,0, cstack
   759 ;; Tracked objects:
   760 ;;		On entry : 0/0
   761 ;;		On exit  : 0/0
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   764 ;;      Params:         0       0       0       0
   765 ;;      Locals:         0       0       0       0
   766 ;;      Temps:          1       0       0       0
   767 ;;      Totals:         1       0       0       0
   768 ;;Total ram usage:        1 bytes
   769 ;; Hardware stack levels used:    1
   770 ;; Hardware stack levels required when called:    4
   771 ;; This function calls:
   772 ;;		_LCDout
   773 ;;		_SendLCD
   774 ;; This function is called by:
   775 ;;		_main
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           	psect	text6
   780  0000EC                     __ptext6:
   781                           	opt callstack 0
   782  0000EC                     _LCD_Init:
   783                           	opt callstack 26
   784  0000EC                     
   785                           ;lcd.c: 40:     TRISAbits.RA6 = 0;
   786  0000EC  9C92               	bcf	146,6,c	;volatile
   787                           
   788                           ;lcd.c: 41:     TRISCbits.RC0 = 0;
   789  0000EE  9094               	bcf	148,0,c	;volatile
   790                           
   791                           ;lcd.c: 42:     TRISDbits.RD3 = 0;
   792  0000F0  9695               	bcf	149,3,c	;volatile
   793                           
   794                           ;lcd.c: 43:     TRISDbits.RD2 = 0;
   795  0000F2  9495               	bcf	149,2,c	;volatile
   796                           
   797                           ;lcd.c: 44:     TRISDbits.RD0 = 0;
   798  0000F4  9095               	bcf	149,0,c	;volatile
   799                           
   800                           ;lcd.c: 45:     TRISDbits.RD1 = 0;
   801  0000F6  9295               	bcf	149,1,c	;volatile
   802                           
   803                           ;lcd.c: 47:     LATAbits.LA6 = 0;
   804  0000F8  9C89               	bcf	137,6,c	;volatile
   805                           
   806                           ;lcd.c: 48:     LATCbits.LC0 = 0;
   807  0000FA  908B               	bcf	139,0,c	;volatile
   808                           
   809                           ;lcd.c: 49:     LATDbits.LD1 = 0;
   810  0000FC  928C               	bcf	140,1,c	;volatile
   811                           
   812                           ;lcd.c: 50:     LATDbits.LD2 = 0;
   813  0000FE  948C               	bcf	140,2,c	;volatile
   814                           
   815                           ;lcd.c: 51:     LATDbits.LD0 = 0;
   816  000100  908C               	bcf	140,0,c	;volatile
   817                           
   818                           ;lcd.c: 52:     LATDbits.LD1 = 0;
   819  000102  928C               	bcf	140,1,c	;volatile
   820  000104                     
   821                           ;lcd.c: 64:     _delay((unsigned long)((15)*(8000000/4000.0)));
   822  000104  0E27               	movlw	39
   823  000106  6E29               	movwf	??_LCD_Init^0,c
   824  000108  0EF5               	movlw	245
   825  00010A                     u327:
   826  00010A  2EE8               	decfsz	wreg,f,c
   827  00010C  D7FE               	bra	u327
   828  00010E  2E29               	decfsz	??_LCD_Init^0,f,c
   829  000110  D7FC               	bra	u327
   830  000112  F000               	nop	
   831  000114                     
   832                           ;lcd.c: 65:     LCDout(0b0011);
   833  000114  0E03               	movlw	3
   834  000116  ECCB  F000         	call	_LCDout
   835  00011A                     
   836                           ;lcd.c: 66:     _delay((unsigned long)((5)*(8000000/4000.0)));
   837  00011A  0E0D               	movlw	13
   838  00011C  6E29               	movwf	??_LCD_Init^0,c
   839  00011E  0EFC               	movlw	252
   840  000120                     u337:
   841  000120  2EE8               	decfsz	wreg,f,c
   842  000122  D7FE               	bra	u337
   843  000124  2E29               	decfsz	??_LCD_Init^0,f,c
   844  000126  D7FC               	bra	u337
   845                           
   846                           ;lcd.c: 67:     LCDout(0b0011);
   847  000128  0E03               	movlw	3
   848  00012A  ECCB  F000         	call	_LCDout
   849  00012E                     
   850                           ;lcd.c: 68:     _delay((unsigned long)((200)*(8000000/4000000.0)));
   851  00012E  0E85               	movlw	133
   852  000130                     u347:
   853  000130  2EE8               	decfsz	wreg,f,c
   854  000132  D7FE               	bra	u347
   855  000134  F000               	nop	
   856  000136                     
   857                           ;lcd.c: 69:     LCDout(0b0011);
   858  000136  0E03               	movlw	3
   859  000138  ECCB  F000         	call	_LCDout
   860                           
   861                           ;lcd.c: 70:     _delay((unsigned long)((50)*(8000000/4000000.0)));
   862  00013C  0E21               	movlw	33
   863  00013E                     u357:
   864  00013E  2EE8               	decfsz	wreg,f,c
   865  000140  D7FE               	bra	u357
   866  000142  F000               	nop	
   867  000144                     
   868                           ;lcd.c: 71:     LCDout(0b0010);
   869  000144  0E02               	movlw	2
   870  000146  ECCB  F000         	call	_LCDout
   871  00014A                     
   872                           ;lcd.c: 72:     _delay((unsigned long)((50)*(8000000/4000000.0)));
   873  00014A  0E21               	movlw	33
   874  00014C                     u367:
   875  00014C  2EE8               	decfsz	wreg,f,c
   876  00014E  D7FE               	bra	u367
   877  000150  F000               	nop	
   878                           
   879                           ;lcd.c: 74:     SendLCD(0b00101000, 0);
   880  000152  0E00               	movlw	0
   881  000154  6E27               	movwf	SendLCD@type^0,c
   882  000156  0E28               	movlw	40
   883  000158  EC6A  F001         	call	_SendLCD
   884                           
   885                           ;lcd.c: 75:     SendLCD(0b00001000, 0);
   886  00015C  0E00               	movlw	0
   887  00015E  6E27               	movwf	SendLCD@type^0,c
   888  000160  0E08               	movlw	8
   889  000162  EC6A  F001         	call	_SendLCD
   890                           
   891                           ;lcd.c: 76:     SendLCD(0b00000001, 0);
   892  000166  0E00               	movlw	0
   893  000168  6E27               	movwf	SendLCD@type^0,c
   894  00016A  0E01               	movlw	1
   895  00016C  EC6A  F001         	call	_SendLCD
   896  000170                     
   897                           ;lcd.c: 77:     _delay((unsigned long)((2)*(8000000/4000.0)));
   898  000170  0E06               	movlw	6
   899  000172  6E29               	movwf	??_LCD_Init^0,c
   900  000174  0E30               	movlw	48
   901  000176                     u377:
   902  000176  2EE8               	decfsz	wreg,f,c
   903  000178  D7FE               	bra	u377
   904  00017A  2E29               	decfsz	??_LCD_Init^0,f,c
   905  00017C  D7FC               	bra	u377
   906  00017E  D000               	nop2	
   907  000180                     
   908                           ;lcd.c: 78:     SendLCD(0b00000110, 0);
   909  000180  0E00               	movlw	0
   910  000182  6E27               	movwf	SendLCD@type^0,c
   911  000184  0E06               	movlw	6
   912  000186  EC6A  F001         	call	_SendLCD
   913  00018A                     
   914                           ;lcd.c: 79:     SendLCD(0b00001111, 0);
   915  00018A  0E00               	movlw	0
   916  00018C  6E27               	movwf	SendLCD@type^0,c
   917  00018E  0E0F               	movlw	15
   918  000190  EC6A  F001         	call	_SendLCD
   919  000194  0012               	return		;funcret
   920  000196                     __end_of_LCD_Init:
   921                           	opt callstack 0
   922                           
   923 ;; *************** function _ClearLCD *****************
   924 ;; Defined at:
   925 ;;		line 106 in file "lcd.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;		None
   928 ;; Auto vars:     Size  Location     Type
   929 ;;		None
   930 ;; Return value:  Size  Location     Type
   931 ;;                  1    wreg      void 
   932 ;; Registers used:
   933 ;;		wreg, status,2, status,0, cstack
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   939 ;;      Params:         0       0       0       0
   940 ;;      Locals:         0       0       0       0
   941 ;;      Temps:          1       0       0       0
   942 ;;      Totals:         1       0       0       0
   943 ;;Total ram usage:        1 bytes
   944 ;; Hardware stack levels used:    1
   945 ;; Hardware stack levels required when called:    4
   946 ;; This function calls:
   947 ;;		_SendLCD
   948 ;; This function is called by:
   949 ;;		_main
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           	psect	text7
   954  000352                     __ptext7:
   955                           	opt callstack 0
   956  000352                     _ClearLCD:
   957                           	opt callstack 26
   958  000352                     
   959                           ;lcd.c: 107:     SendLCD(0b00000001, 0);
   960  000352  0E00               	movlw	0
   961  000354  6E27               	movwf	SendLCD@type^0,c
   962  000356  0E01               	movlw	1
   963  000358  EC6A  F001         	call	_SendLCD
   964  00035C                     
   965                           ;lcd.c: 108:     _delay((unsigned long)((2)*(8000000/4000.0)));
   966  00035C  0E06               	movlw	6
   967  00035E  6E29               	movwf	??_ClearLCD^0,c
   968  000360  0E30               	movlw	48
   969  000362                     u387:
   970  000362  2EE8               	decfsz	wreg,f,c
   971  000364  D7FE               	bra	u387
   972  000366  2E29               	decfsz	??_ClearLCD^0,f,c
   973  000368  D7FC               	bra	u387
   974  00036A  D000               	nop2	
   975  00036C  0012               	return		;funcret
   976  00036E                     __end_of_ClearLCD:
   977                           	opt callstack 0
   978                           
   979 ;; *************** function _SendLCD *****************
   980 ;; Defined at:
   981 ;;		line 26 in file "lcd.c"
   982 ;; Parameters:    Size  Location     Type
   983 ;;  Byte            1    wreg     unsigned char 
   984 ;;  type            1    4[COMRAM] unsigned char 
   985 ;; Auto vars:     Size  Location     Type
   986 ;;  Byte            1    5[COMRAM] unsigned char 
   987 ;; Return value:  Size  Location     Type
   988 ;;                  1    wreg      void 
   989 ;; Registers used:
   990 ;;		wreg, status,2, status,0, cstack
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   996 ;;      Params:         1       0       0       0
   997 ;;      Locals:         1       0       0       0
   998 ;;      Temps:          0       0       0       0
   999 ;;      Totals:         2       0       0       0
  1000 ;;Total ram usage:        2 bytes
  1001 ;; Hardware stack levels used:    1
  1002 ;; Hardware stack levels required when called:    3
  1003 ;; This function calls:
  1004 ;;		_LCDout
  1005 ;; This function is called by:
  1006 ;;		_LCD_Init
  1007 ;;		_SetLine
  1008 ;;		_LCD_String
  1009 ;;		_ClearLCD
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           	psect	text8
  1014  0002D4                     __ptext8:
  1015                           	opt callstack 0
  1016  0002D4                     _SendLCD:
  1017                           	opt callstack 26
  1018                           
  1019                           ;incstack = 0
  1020                           ;SendLCD@Byte stored from wreg
  1021  0002D4  6E28               	movwf	SendLCD@Byte^0,c
  1022  0002D6                     
  1023                           ;lcd.c: 29:     LATAbits.LATA6 = type;
  1024  0002D6  B027               	btfsc	SendLCD@type^0,0,c
  1025  0002D8  D002               	bra	u175
  1026  0002DA  9C89               	bcf	137,6,c	;volatile
  1027  0002DC  D001               	bra	u176
  1028  0002DE                     u175:
  1029  0002DE  8C89               	bsf	137,6,c	;volatile
  1030  0002E0                     u176:
  1031  0002E0                     
  1032                           ;lcd.c: 31:     LCDout((Byte & 0b11110000) >> 4);
  1033  0002E0  3828               	swapf	SendLCD@Byte^0,w,c
  1034  0002E2  0B0F               	andlw	15
  1035  0002E4  0B0F               	andlw	15
  1036  0002E6  ECCB  F000         	call	_LCDout
  1037  0002EA                     
  1038                           ;lcd.c: 32:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  1039  0002EA  0E06               	movlw	6
  1040  0002EC                     u397:
  1041  0002EC  2EE8               	decfsz	wreg,f,c
  1042  0002EE  D7FE               	bra	u397
  1043  0002F0  D000               	nop2	
  1044  0002F2                     
  1045                           ;lcd.c: 33:     LCDout(Byte & 0b00001111);
  1046  0002F2  5028               	movf	SendLCD@Byte^0,w,c
  1047  0002F4  0B0F               	andlw	15
  1048  0002F6  ECCB  F000         	call	_LCDout
  1049                           
  1050                           ;lcd.c: 35:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  1051  0002FA  0E21               	movlw	33
  1052  0002FC                     u407:
  1053  0002FC  2EE8               	decfsz	wreg,f,c
  1054  0002FE  D7FE               	bra	u407
  1055  000300  F000               	nop	
  1056  000302  0012               	return		;funcret
  1057  000304                     __end_of_SendLCD:
  1058                           	opt callstack 0
  1059                           
  1060 ;; *************** function _LCDout *****************
  1061 ;; Defined at:
  1062 ;;		line 14 in file "lcd.c"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;  number          1    wreg     unsigned char 
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;  number          1    3[COMRAM] unsigned char 
  1067 ;; Return value:  Size  Location     Type
  1068 ;;                  1    wreg      void 
  1069 ;; Registers used:
  1070 ;;		wreg, status,2, status,0, cstack
  1071 ;; Tracked objects:
  1072 ;;		On entry : 0/0
  1073 ;;		On exit  : 0/0
  1074 ;;		Unchanged: 0/0
  1075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1076 ;;      Params:         0       0       0       0
  1077 ;;      Locals:         1       0       0       0
  1078 ;;      Temps:          1       0       0       0
  1079 ;;      Totals:         2       0       0       0
  1080 ;;Total ram usage:        2 bytes
  1081 ;; Hardware stack levels used:    1
  1082 ;; Hardware stack levels required when called:    2
  1083 ;; This function calls:
  1084 ;;		_E_TOG
  1085 ;; This function is called by:
  1086 ;;		_SendLCD
  1087 ;;		_LCD_Init
  1088 ;; This function uses a non-reentrant model
  1089 ;;
  1090                           
  1091                           	psect	text9
  1092  000196                     __ptext9:
  1093                           	opt callstack 0
  1094  000196                     _LCDout:
  1095                           	opt callstack 26
  1096                           
  1097                           ;incstack = 0
  1098                           ;LCDout@number stored from wreg
  1099  000196  6E26               	movwf	LCDout@number^0,c
  1100  000198                     
  1101                           ;lcd.c: 16:     LATDbits.LATD3 = number & 0b0001;
  1102  000198  C026  F025         	movff	LCDout@number,??_LCDout
  1103  00019C  0E01               	movlw	1
  1104  00019E  1625               	andwf	??_LCDout^0,f,c
  1105  0001A0  4625               	rlncf	??_LCDout^0,f,c
  1106  0001A2  4625               	rlncf	??_LCDout^0,f,c
  1107  0001A4  4625               	rlncf	??_LCDout^0,f,c
  1108  0001A6  508C               	movf	140,w,c	;volatile
  1109  0001A8  1825               	xorwf	??_LCDout^0,w,c
  1110  0001AA  0BF7               	andlw	-9
  1111  0001AC  1825               	xorwf	??_LCDout^0,w,c
  1112  0001AE  6E8C               	movwf	140,c	;volatile
  1113                           
  1114                           ;lcd.c: 17:     LATDbits.LATD2 = (number & 0b0010) >> 1;
  1115  0001B0  C026  F025         	movff	LCDout@number,??_LCDout
  1116  0001B4  90D8               	bcf	status,0,c
  1117  0001B6  3225               	rrcf	??_LCDout^0,f,c
  1118  0001B8  0E01               	movlw	1
  1119  0001BA  1625               	andwf	??_LCDout^0,f,c
  1120  0001BC  4625               	rlncf	??_LCDout^0,f,c
  1121  0001BE  4625               	rlncf	??_LCDout^0,f,c
  1122  0001C0  508C               	movf	140,w,c	;volatile
  1123  0001C2  1825               	xorwf	??_LCDout^0,w,c
  1124  0001C4  0BFB               	andlw	-5
  1125  0001C6  1825               	xorwf	??_LCDout^0,w,c
  1126  0001C8  6E8C               	movwf	140,c	;volatile
  1127                           
  1128                           ;lcd.c: 18:     LATDbits.LATD0 = (number & 0b0100) >> 2;
  1129  0001CA  C026  F025         	movff	LCDout@number,??_LCDout
  1130  0001CE  90D8               	bcf	status,0,c
  1131  0001D0  3225               	rrcf	??_LCDout^0,f,c
  1132  0001D2  90D8               	bcf	status,0,c
  1133  0001D4  3225               	rrcf	??_LCDout^0,f,c
  1134  0001D6  0E01               	movlw	1
  1135  0001D8  1625               	andwf	??_LCDout^0,f,c
  1136  0001DA  508C               	movf	140,w,c	;volatile
  1137  0001DC  1825               	xorwf	??_LCDout^0,w,c
  1138  0001DE  0BFE               	andlw	-2
  1139  0001E0  1825               	xorwf	??_LCDout^0,w,c
  1140  0001E2  6E8C               	movwf	140,c	;volatile
  1141                           
  1142                           ;lcd.c: 19:     LATDbits.LATD1 = (number & 0b1000) >> 3;
  1143  0001E4  C026  F025         	movff	LCDout@number,??_LCDout
  1144  0001E8  90D8               	bcf	status,0,c
  1145  0001EA  3225               	rrcf	??_LCDout^0,f,c
  1146  0001EC  90D8               	bcf	status,0,c
  1147  0001EE  3225               	rrcf	??_LCDout^0,f,c
  1148  0001F0  90D8               	bcf	status,0,c
  1149  0001F2  3225               	rrcf	??_LCDout^0,f,c
  1150  0001F4  0E01               	movlw	1
  1151  0001F6  1625               	andwf	??_LCDout^0,f,c
  1152  0001F8  4625               	rlncf	??_LCDout^0,f,c
  1153  0001FA  508C               	movf	140,w,c	;volatile
  1154  0001FC  1825               	xorwf	??_LCDout^0,w,c
  1155  0001FE  0BFD               	andlw	-3
  1156  000200  1825               	xorwf	??_LCDout^0,w,c
  1157  000202  6E8C               	movwf	140,c	;volatile
  1158  000204                     
  1159                           ;lcd.c: 20:     E_TOG();
  1160  000204  ECC3  F001         	call	_E_TOG	;wreg free
  1161  000208                     
  1162                           ;lcd.c: 22:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1163  000208  0E03               	movlw	3
  1164  00020A                     u417:
  1165  00020A  2EE8               	decfsz	wreg,f,c
  1166  00020C  D7FE               	bra	u417
  1167  00020E  F000               	nop	
  1168  000210  0012               	return		;funcret
  1169  000212                     __end_of_LCDout:
  1170                           	opt callstack 0
  1171                           
  1172 ;; *************** function _E_TOG *****************
  1173 ;; Defined at:
  1174 ;;		line 4 in file "lcd.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;		None
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;		None
  1179 ;; Return value:  Size  Location     Type
  1180 ;;                  1    wreg      void 
  1181 ;; Registers used:
  1182 ;;		wreg
  1183 ;; Tracked objects:
  1184 ;;		On entry : 0/0
  1185 ;;		On exit  : 0/0
  1186 ;;		Unchanged: 0/0
  1187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1188 ;;      Params:         0       0       0       0
  1189 ;;      Locals:         0       0       0       0
  1190 ;;      Temps:          0       0       0       0
  1191 ;;      Totals:         0       0       0       0
  1192 ;;Total ram usage:        0 bytes
  1193 ;; Hardware stack levels used:    1
  1194 ;; Hardware stack levels required when called:    1
  1195 ;; This function calls:
  1196 ;;		Nothing
  1197 ;; This function is called by:
  1198 ;;		_LCDout
  1199 ;; This function uses a non-reentrant model
  1200 ;;
  1201                           
  1202                           	psect	text10
  1203  000386                     __ptext10:
  1204                           	opt callstack 0
  1205  000386                     _E_TOG:
  1206                           	opt callstack 26
  1207  000386                     
  1208                           ;lcd.c: 8:     LATCbits.LATC0 = 1;
  1209  000386  808B               	bsf	139,0,c	;volatile
  1210  000388                     
  1211                           ;lcd.c: 9:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1212  000388  0E03               	movlw	3
  1213  00038A                     u427:
  1214  00038A  2EE8               	decfsz	wreg,f,c
  1215  00038C  D7FE               	bra	u427
  1216  00038E  F000               	nop	
  1217  000390                     
  1218                           ;lcd.c: 10:     LATCbits.LATC0 = 0;
  1219  000390  908B               	bcf	139,0,c	;volatile
  1220  000392  0012               	return		;funcret
  1221  000394                     __end_of_E_TOG:
  1222                           	opt callstack 0
  1223                           
  1224 ;; *************** function _InterruptHandlerHigh *****************
  1225 ;; Defined at:
  1226 ;;		line 12 in file "main.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;		None
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;		None
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1240 ;;      Params:         0       0       0       0
  1241 ;;      Locals:         0       0       0       0
  1242 ;;      Temps:          2       0       0       0
  1243 ;;      Totals:         2       0       0       0
  1244 ;;Total ram usage:        2 bytes
  1245 ;; Hardware stack levels used:    1
  1246 ;; This function calls:
  1247 ;;		Nothing
  1248 ;; This function is called by:
  1249 ;;		Interrupt level 2
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           	psect	intcode
  1254  000008                     __pintcode:
  1255                           	opt callstack 0
  1256  000008                     _InterruptHandlerHigh:
  1257                           	opt callstack 26
  1258                           
  1259                           ;incstack = 0
  1260  000008  823F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1261  00000A  CFD9 F023          	movff	fsr2l,??_InterruptHandlerHigh
  1262  00000E  CFDA F024          	movff	fsr2h,??_InterruptHandlerHigh+1
  1263  000012                     
  1264                           ;main.c: 13:     if (PIR1bits.RCIF == 1) {
  1265  000012  AA9E               	btfss	158,5,c	;volatile
  1266  000014  EF0E  F000         	goto	i2u13_41
  1267  000018  EF10  F000         	goto	i2u13_40
  1268  00001C                     i2u13_41:
  1269  00001C  EF19  F000         	goto	i2l191
  1270  000020                     i2u13_40:
  1271  000020                     
  1272                           ;main.c: 14:         A[reader] = RCREG;
  1273  000020  0E02               	movlw	low _A
  1274  000022  2401               	addwf	_reader^0,w,c	;volatile
  1275  000024  6ED9               	movwf	fsr2l,c
  1276  000026  6ADA               	clrf	fsr2h,c
  1277  000028  0E00               	movlw	high _A
  1278  00002A  22DA               	addwfc	fsr2h,f,c
  1279  00002C  CFAE FFDF          	movff	4014,indf2	;volatile
  1280  000030                     
  1281                           ;main.c: 15:         reader++;
  1282  000030  2A01               	incf	_reader^0,f,c	;volatile
  1283  000032                     i2l191:
  1284  000032  C024  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  1285  000036  C023  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  1286  00003A  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1287  00003C  0011               	retfie		f
  1288  00003E                     __end_of_InterruptHandlerHigh:
  1289                           	opt callstack 0
  1290  0000                     
  1291                           	psect	rparam
  1292  0000                     
  1293                           	psect	temp
  1294  00003F                     btemp:
  1295                           	opt callstack 0
  1296  00003F                     	ds	1
  1297  0000                     int$flags	set	btemp
  1298  0000                     wtemp8	set	btemp+1
  1299  0000                     ttemp5	set	btemp+1
  1300  0000                     ttemp6	set	btemp+4
  1301  0000                     ttemp7	set	btemp+8
  1302                           tosu	equ	0xFFF
  1303                           tosh	equ	0xFFE
  1304                           tosl	equ	0xFFD
  1305                           stkptr	equ	0xFFC
  1306                           pclatu	equ	0xFFB
  1307                           pclath	equ	0xFFA
  1308                           pcl	equ	0xFF9
  1309                           tblptru	equ	0xFF8
  1310                           tblptrh	equ	0xFF7
  1311                           tblptrl	equ	0xFF6
  1312                           tablat	equ	0xFF5
  1313                           prodh	equ	0xFF4
  1314                           prodl	equ	0xFF3
  1315                           indf0	equ	0xFEF
  1316                           postinc0	equ	0xFEE
  1317                           postdec0	equ	0xFED
  1318                           preinc0	equ	0xFEC
  1319                           plusw0	equ	0xFEB
  1320                           fsr0h	equ	0xFEA
  1321                           fsr0l	equ	0xFE9
  1322                           wreg	equ	0xFE8
  1323                           indf1	equ	0xFE7
  1324                           postinc1	equ	0xFE6
  1325                           postdec1	equ	0xFE5
  1326                           preinc1	equ	0xFE4
  1327                           plusw1	equ	0xFE3
  1328                           fsr1h	equ	0xFE2
  1329                           fsr1l	equ	0xFE1
  1330                           bsr	equ	0xFE0
  1331                           indf2	equ	0xFDF
  1332                           postinc2	equ	0xFDE
  1333                           postdec2	equ	0xFDD
  1334                           preinc2	equ	0xFDC
  1335                           plusw2	equ	0xFDB
  1336                           fsr2h	equ	0xFDA
  1337                           fsr2l	equ	0xFD9
  1338                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     27      62
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S357DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S357DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 15
		 -> main@buf(COMRAM[11]), A(COMRAM[15]), 


Critical Paths under _main in COMRAM

    _main->_delay_s
    _delay_s->___wmul
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _LCD_Init->_SendLCD
    _ClearLCD->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0    4333
                                             15 COMRAM    12    12      0
                           _ClearLCD
                           _LCD_Init
                         _LCD_String
                            _SetLine
                            _delay_s
                         _initSerial
 ---------------------------------------------------------------------------------
 (1) _initSerial                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              7     5      2     652
                                              8 COMRAM     7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     507
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0     832
                                              6 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           2     0      2    1007
                                              6 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0     870
                                              6 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _ClearLCD                                             1     1      0     810
                                              6 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     810
                                              4 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               2     2      0      60
                                              2 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _InterruptHandlerHigh                                 2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearLCD
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_Init
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _delay_s
     ___wmul
   _initSerial

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1B      3E       1       66.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3E       3        0.0%
DATA                 0      0      3E      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Nov 28 12:20:19 2019

                            _A 0002                             l20 0210                             l23 0302  
                           l31 02D2                             l40 036C                             l17 0392  
                           l26 0194                             l37 029E            ___wmul@multiplicand 0027  
                  ?_LCD_String 0029                            l105 024C                            l108 0262  
                          l208 0350                            l149 0384                            l196 0046  
                          l881 0386                            l883 0388                            l891 0208  
                          l885 0390                            l981 036E                            l887 0198  
                          l991 0380                            l983 0372                            l889 0204  
                          l993 0382                            l985 037A                            l987 037C  
                          l989 037E                            u240 0262                            u241 025E  
                          u307 02CC                            u180 02B2                            u260 0054  
                          u317 0280                            u181 02AE                            u261 0050  
                          u190 029E                            u270 0080                            u407 02FC  
                          u175 02DE                            u327 010A                            u191 029A  
                          u271 007C                            u176 02E0                            u280 00B2  
                          u417 020A                            u337 0120                            u281 00AE  
                          u427 038A                            u347 0130                            u357 013E  
                          u367 014C                            u377 0176                            u297 0240  
                          u387 0362                            u397 02EC                            wreg 000FE8  
                 __CFG_LVP$OFF 000000                           l1211 022E                           l1133 02D6  
                         l1141 032C                           l1213 023A                           l1135 02E0  
                         l1151 0114                           l1143 0348                           l1215 0248  
                         l1137 02EA                           l1161 014A                           l1153 011A  
                         l1209 0212                           l1139 02F2                           l1163 0170  
                         l1155 012E                           l1147 00EC                           l1171 02B2  
                         l1165 0180                           l1157 0136                           l1149 0104  
                         l1181 027A                           l1173 02C0                           l1261 0058  
                         l1167 018A                           l1159 0144                           l1183 027E  
                         l1175 02CA                           l1271 0068                           l1263 005C  
                         l1185 0286                           l1177 0264                           l1169 02A2  
                         l1273 006A                           l1265 0062                           l1257 0042  
                         l1187 0352                           l1179 0268                           l1291 00B6  
                         l1283 0084                           l1275 006E                           l1267 0064  
                         l1259 0054                           l1189 035C                           l1293 00BA  
                         l1285 00A0                           l1277 0080                           l1269 0066  
                         l1295 00C6                           l1287 00A2                           l1297 00CC  
                         l1289 00B2                           l1299 00D8                           _LATB 000F8A  
                         _main 0042                           fsr2h 000FDA                           indf1 000FE7  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 003F                           prodh 000FF4                           prodl 000FF3  
                         start 003E                 delay_s@seconds 002B                   ___param_bank 000000  
              __end_of_SendLCD 0304                __end_of_SetLine 02D4               __end_of_LCD_Init 0196  
                        ?_main 0023                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                          _PDC1L 000F77                          i2l191 0032  
                        _RCREG 000FAE                          _E_TOG 0386                          _SPBRG 000FAF  
                        _TXREG 000FAD                __end_of_delay_s 0264                          main@i 003D  
                        tablat 000FF5                          ttemp5 0040                          ttemp6 0043  
                        ttemp7 0047                          status 000FD8                          wtemp8 0040  
          __size_of_LCD_String 003C               __end_of_ClearLCD 036E                   _TurningSpeed 003E  
               __CFG_MCLRE$OFF 000000                __initialization 0304                   __end_of_main 00EC  
               __CFG_OSC$IRCIO 000000               LCD_String@string 0029                         ??_main 0032  
                __activetblptr 000000                         ?_E_TOG 0023                         i2l1081 0012  
                       i2l1083 0020                         i2l1085 0030                         _LCDout 0196  
                  SendLCD@Byte 0028                         _OSCCON 000FD3                         _PTCON0 000F7F  
                       _PTCON1 000F7E                         _SPBRGH 000FB0                         _PTPERH 000F7A  
                       _PTPERL 000F7B                    SendLCD@type 0027                      ??_SendLCD 0028  
                    ??_SetLine 0029                         ___wmul 032C                         _reader 0001  
                       clear_0 031C                      ??_delay_s 002D                         _motorL 001A  
                       _motorR 0011                   __pdataCOMRAM 003E                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                     __accesstop 0060  
      __end_of__initialization 0322                      ?_LCD_Init 0023                  ___rparam_used 000001  
                  SetLine@line 0029                  __end_of_E_TOG 0394                 __pcstackCOMRAM 0023  
                 ??_LCD_String 002B                        ??_E_TOG 0025  __size_of_InterruptHandlerHigh 0036  
                    ?_ClearLCD 0023                        ?_LCDout 0023                     ??_LCD_Init 0029  
           __end_of_LCD_String 02A0                        ?___wmul 0025                     ??_ClearLCD 0029  
                      i2u13_40 0020                        i2u13_41 001C                        _PWMCON0 000F6F  
                      _PWMCON1 000F6E                __size_of_LCDout 007C                        _SendLCD 02D4  
                      __Hparam 0000                        _SetLine 02A0                        __Lparam 0000  
                   _initSerial 036E                __size_of___wmul 0026                        __pcinit 0304  
                      _delay_s 0212                        __ramtop 0300                        __ptext0 0042  
                      __ptext1 036E                        __ptext2 0212                        __ptext3 032C  
                      __ptext4 02A0                        __ptext5 0264                        __ptext6 00EC  
                      __ptext7 0352                        __ptext8 02D4                        __ptext9 0196  
                 LCDout@number 0026                        main@buf 0032           end_of_initialization 0322  
                    _RCSTAbits 000FAB                        postinc0 000FEE                      _TRISAbits 000F92  
                    _TRISBbits 000F93                      _TRISCbits 000F94                      _TRISDbits 000F95  
               __end_of_LCDout 0212                      _TXSTAbits 000FAC              __size_of_LCD_Init 00AA  
                  ?_initSerial 0023                 __end_of___wmul 0352                    _BAUDCONbits 000FAA  
                __pidataCOMRAM 0394            start_initialization 0304              __size_of_ClearLCD 001C  
                     ??_LCDout 0025   __end_of_InterruptHandlerHigh 003E                       ??___wmul 0029  
                  __pbssCOMRAM 0001            __size_of_initSerial 0018                       ?_SendLCD 0027  
                     ?_SetLine 0023                      __pintcode 0008                       ?_delay_s 002B  
               __size_of_E_TOG 000E                       _LCD_Init 00EC                 ___wmul@product 0029  
                     _LATAbits 000F89                       _LATBbits 000F8A                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _PIE1bits 000F9D                       _PIR1bits 000F9E  
                     _RCONbits 000FD0              ___wmul@multiplier 0025           _InterruptHandlerHigh 0008  
                     _ClearLCD 0352                       __Hrparam 0000               __size_of_SendLCD 0030  
                     __Lrparam 0000               __size_of_SetLine 0034                   ??_initSerial 0025  
             __size_of_delay_s 0052          ?_InterruptHandlerHigh 0023                       __ptext10 0386  
           __end_of_initSerial 0386                  __size_of_main 00AA                       delay_s@i 002E  
                     delay_s@j 0030                       int$flags 003F                     _LCD_String 0264  
                   _INTCONbits 000FF2                       intlevel2 0000                     _OSCCONbits 000FD3  
       ??_InterruptHandlerHigh 0023  
