

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Nov 27 18:27:28 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15  0000                     
    16                           ; Version 2.10
    17                           ; Generated 31/07/2019 GMT
    18                           ; 
    19                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC18F4331 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     
    51                           	psect	idataCOMRAM
    52  001EED                     __pidataCOMRAM:
    53                           	opt callstack 0
    54                           
    55                           ;initializer for _TurningSpeed
    56  001EED  4B                 	db	75
    57  0000                     _TRISD	set	3989
    58  0000                     _TRISC	set	3988
    59  0000                     _LATD	set	3980
    60  0000                     _LATC	set	3979
    61  0000                     _OSCCONbits	set	4051
    62  0000                     _OSCCON	set	4051
    63  0000                     _RCSTAbits	set	4011
    64  0000                     _TXSTAbits	set	4012
    65  0000                     _BAUDCONbits	set	4010
    66  0000                     _SPBRGH	set	4016
    67  0000                     _SPBRG	set	4015
    68  0000                     _TXREG	set	4013
    69  0000                     _RCREG	set	4014
    70  0000                     _PIR1bits	set	3998
    71  0000                     _LATB	set	3978
    72  0000                     _PTPERH	set	3962
    73  0000                     _PTPERL	set	3963
    74  0000                     _PWMCON1	set	3950
    75  0000                     _PWMCON0	set	3951
    76  0000                     _PTCON1	set	3966
    77  0000                     _PTCON0	set	3967
    78  0000                     _LATBbits	set	3978
    79  0000                     _TRISBbits	set	3987
    80  0000                     _TRISDbits	set	3989
    81  0000                     _TRISCbits	set	3988
    82  0000                     _TRISAbits	set	3986
    83  0000                     _LATAbits	set	3977
    84  0000                     _LATDbits	set	3980
    85  0000                     _LATCbits	set	3979
    86  0000                     _PDC1H	set	3958
    87  0000                     _PDC1L	set	3959
    88  0000                     _PDC0H	set	3960
    89  0000                     _PDC0L	set	3961
    90                           
    91                           ; #config settings
    92  0000                     
    93                           	psect	cinit
    94  001F00                     __pcinit:
    95                           	opt callstack 0
    96  001F00                     start_initialization:
    97                           	opt callstack 0
    98  001F00                     __initialization:
    99                           	opt callstack 0
   100                           
   101                           ; Initialize objects allocated to COMRAM (1 bytes)
   102                           ; load TBLPTR registers with __pidataCOMRAM
   103  001F00  0EED               	movlw	low __pidataCOMRAM
   104  001F02  6EF6               	movwf	tblptrl,c
   105  001F04  0E1E               	movlw	high __pidataCOMRAM
   106  001F06  6EF7               	movwf	tblptrh,c
   107  001F08  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   108  001F0A  6EF8               	movwf	tblptru,c
   109  001F0C  0009               	tblrd		*+	;fetch initializer
   110  001F0E  CFF5 F016          	movff	tablat,__pdataCOMRAM
   111                           
   112                           ; Clear objects allocated to COMRAM (18 bytes)
   113  001F12  EE00  F001         	lfsr	0,__pbssCOMRAM
   114  001F16  0E12               	movlw	18
   115  001F18                     clear_0:
   116  001F18  6AEE               	clrf	postinc0,c
   117  001F1A  06E8               	decf	wreg,f,c
   118  001F1C  E1FD               	bnz	clear_0
   119  001F1E                     end_of_initialization:
   120                           	opt callstack 0
   121  001F1E                     __end_of__initialization:
   122                           	opt callstack 0
   123  001F1E  0100               	movlb	0
   124  001F20  EF92  F00F         	goto	_main	;jump to C main() function
   125                           
   126                           	psect	bssCOMRAM
   127  000001                     __pbssCOMRAM:
   128                           	opt callstack 0
   129  000001                     _motorR:
   130                           	opt callstack 0
   131  000001                     	ds	9
   132  00000A                     _motorL:
   133                           	opt callstack 0
   134  00000A                     	ds	9
   135                           
   136                           	psect	dataCOMRAM
   137  000016                     __pdataCOMRAM:
   138                           	opt callstack 0
   139  000016                     _TurningSpeed:
   140                           	opt callstack 0
   141  000016                     	ds	1
   142                           
   143                           	psect	cstackCOMRAM
   144  000013                     __pcstackCOMRAM:
   145                           	opt callstack 0
   146  000013                     LEDout@number:
   147                           	opt callstack 0
   148                           
   149                           ; 2 bytes @ 0x0
   150  000013                     	ds	2
   151  000015                     ??_LEDout:
   152                           
   153                           ; 1 bytes @ 0x2
   154  000015                     	ds	1
   155  000016                     
   156                           ; 1 bytes @ 0x3
   157 ;;
   158 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   159 ;;
   160 ;; *************** function _main *****************
   161 ;; Defined at:
   162 ;;		line 42 in file "main.c"
   163 ;; Parameters:    Size  Location     Type
   164 ;;		None
   165 ;; Auto vars:     Size  Location     Type
   166 ;;		None
   167 ;; Return value:  Size  Location     Type
   168 ;;                  1    wreg      void 
   169 ;; Registers used:
   170 ;;		wreg, status,2, status,0, cstack
   171 ;; Tracked objects:
   172 ;;		On entry : 0/0
   173 ;;		On exit  : 0/0
   174 ;;		Unchanged: 0/0
   175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   176 ;;      Params:         0       0       0       0
   177 ;;      Locals:         0       0       0       0
   178 ;;      Temps:          0       0       0       0
   179 ;;      Totals:         0       0       0       0
   180 ;;Total ram usage:        0 bytes
   181 ;; Hardware stack levels required when called:    1
   182 ;; This function calls:
   183 ;;		_LEDInit
   184 ;;		_LEDout
   185 ;; This function is called by:
   186 ;;		Startup code after reset
   187 ;; This function uses a non-reentrant model
   188 ;;
   189                           
   190                           	psect	text0
   191  001F24                     __ptext0:
   192                           	opt callstack 0
   193  001F24                     _main:
   194                           	opt callstack 30
   195  001F24                     
   196                           ;main.c: 43:     OSCCON = 0x72;
   197  001F24  0E72               	movlw	114
   198  001F26  6ED3               	movwf	211,c	;volatile
   199  001F28                     l162:
   200  001F28  A4D3               	btfss	211,2,c	;volatile
   201  001F2A  EF99  F00F         	goto	u141
   202  001F2E  EF9B  F00F         	goto	u140
   203  001F32                     u141:
   204  001F32  EF94  F00F         	goto	l162
   205  001F36                     u140:
   206  001F36                     
   207                           ;main.c: 66:     LEDInit();
   208  001F36  EC77  F00F         	call	_LEDInit	;wreg free
   209  001F3A                     
   210                           ;main.c: 85: LEDout(84);
   211  001F3A  0E00               	movlw	0
   212  001F3C  6E14               	movwf	(LEDout@number+1)^0,c
   213  001F3E  0E54               	movlw	84
   214  001F40  6E13               	movwf	LEDout@number^0,c
   215  001F42  ECA7  F00F         	call	_LEDout	;wreg free
   216  001F46                     l165:
   217  001F46  EFA3  F00F         	goto	l165
   218  001F4A  EF00  F000         	goto	start
   219  001F4E                     __end_of_main:
   220                           	opt callstack 0
   221                           
   222 ;; *************** function _LEDout *****************
   223 ;; Defined at:
   224 ;;		line 4 in file "led.c"
   225 ;; Parameters:    Size  Location     Type
   226 ;;  number          2    0[COMRAM] int 
   227 ;; Auto vars:     Size  Location     Type
   228 ;;		None
   229 ;; Return value:  Size  Location     Type
   230 ;;                  1    wreg      void 
   231 ;; Registers used:
   232 ;;		wreg, status,2, status,0
   233 ;; Tracked objects:
   234 ;;		On entry : 0/0
   235 ;;		On exit  : 0/0
   236 ;;		Unchanged: 0/0
   237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   238 ;;      Params:         2       0       0       0
   239 ;;      Locals:         0       0       0       0
   240 ;;      Temps:          1       0       0       0
   241 ;;      Totals:         3       0       0       0
   242 ;;Total ram usage:        3 bytes
   243 ;; Hardware stack levels used:    1
   244 ;; This function calls:
   245 ;;		Nothing
   246 ;; This function is called by:
   247 ;;		_main
   248 ;; This function uses a non-reentrant model
   249 ;;
   250                           
   251                           	psect	text1
   252  001F4E                     __ptext1:
   253                           	opt callstack 0
   254  001F4E                     _LEDout:
   255                           	opt callstack 30
   256  001F4E                     
   257                           ;led.c: 5:     LATDbits.LATD2 = number & 0b00000001;
   258  001F4E  C013  F015         	movff	LEDout@number,??_LEDout
   259  001F52  0E01               	movlw	1
   260  001F54  1615               	andwf	??_LEDout^0,f,c
   261  001F56  4615               	rlncf	??_LEDout^0,f,c
   262  001F58  4615               	rlncf	??_LEDout^0,f,c
   263  001F5A  508C               	movf	140,w,c	;volatile
   264  001F5C  1815               	xorwf	??_LEDout^0,w,c
   265  001F5E  0BFB               	andlw	-5
   266  001F60  1815               	xorwf	??_LEDout^0,w,c
   267  001F62  6E8C               	movwf	140,c	;volatile
   268                           
   269                           ;led.c: 6:     LATDbits.LATD3 = number & 0b00000010;
   270  001F64  C013  F015         	movff	LEDout@number,??_LEDout
   271  001F68  0E02               	movlw	2
   272  001F6A  1615               	andwf	??_LEDout^0,f,c
   273  001F6C  4615               	rlncf	??_LEDout^0,f,c
   274  001F6E  4615               	rlncf	??_LEDout^0,f,c
   275  001F70  4615               	rlncf	??_LEDout^0,f,c
   276  001F72  508C               	movf	140,w,c	;volatile
   277  001F74  1815               	xorwf	??_LEDout^0,w,c
   278  001F76  0BF7               	andlw	-9
   279  001F78  1815               	xorwf	??_LEDout^0,w,c
   280  001F7A  6E8C               	movwf	140,c	;volatile
   281                           
   282                           ;led.c: 7:     LATCbits.LATC4 = number & 0b00000100;
   283  001F7C  C013  F015         	movff	LEDout@number,??_LEDout
   284  001F80  0E04               	movlw	4
   285  001F82  1615               	andwf	??_LEDout^0,f,c
   286  001F84  3A15               	swapf	??_LEDout^0,f,c
   287  001F86  508B               	movf	139,w,c	;volatile
   288  001F88  1815               	xorwf	??_LEDout^0,w,c
   289  001F8A  0BEF               	andlw	-17
   290  001F8C  1815               	xorwf	??_LEDout^0,w,c
   291  001F8E  6E8B               	movwf	139,c	;volatile
   292                           
   293                           ;led.c: 8:     LATCbits.LATC5 = number & 0b00001000;
   294  001F90  C013  F015         	movff	LEDout@number,??_LEDout
   295  001F94  0E08               	movlw	8
   296  001F96  1615               	andwf	??_LEDout^0,f,c
   297  001F98  3A15               	swapf	??_LEDout^0,f,c
   298  001F9A  4615               	rlncf	??_LEDout^0,f,c
   299  001F9C  508B               	movf	139,w,c	;volatile
   300  001F9E  1815               	xorwf	??_LEDout^0,w,c
   301  001FA0  0BDF               	andlw	-33
   302  001FA2  1815               	xorwf	??_LEDout^0,w,c
   303  001FA4  6E8B               	movwf	139,c	;volatile
   304                           
   305                           ;led.c: 9:     LATCbits.LATC6 = number & 0b00010000;
   306  001FA6  C013  F015         	movff	LEDout@number,??_LEDout
   307  001FAA  0E10               	movlw	16
   308  001FAC  1615               	andwf	??_LEDout^0,f,c
   309  001FAE  3A15               	swapf	??_LEDout^0,f,c
   310  001FB0  4615               	rlncf	??_LEDout^0,f,c
   311  001FB2  4615               	rlncf	??_LEDout^0,f,c
   312  001FB4  508B               	movf	139,w,c	;volatile
   313  001FB6  1815               	xorwf	??_LEDout^0,w,c
   314  001FB8  0BBF               	andlw	-65
   315  001FBA  1815               	xorwf	??_LEDout^0,w,c
   316  001FBC  6E8B               	movwf	139,c	;volatile
   317                           
   318                           ;led.c: 10:     LATCbits.LATC7 = number & 0b00100000;
   319  001FBE  C013  F015         	movff	LEDout@number,??_LEDout
   320  001FC2  0E20               	movlw	32
   321  001FC4  1615               	andwf	??_LEDout^0,f,c
   322  001FC6  3215               	rrcf	??_LEDout^0,f,c
   323  001FC8  3215               	rrcf	??_LEDout^0,f,c
   324  001FCA  508B               	movf	139,w,c	;volatile
   325  001FCC  1815               	xorwf	??_LEDout^0,w,c
   326  001FCE  0B7F               	andlw	-129
   327  001FD0  1815               	xorwf	??_LEDout^0,w,c
   328  001FD2  6E8B               	movwf	139,c	;volatile
   329                           
   330                           ;led.c: 11:     LATDbits.LATD4 = number & 0b01000000;
   331  001FD4  C013  F015         	movff	LEDout@number,??_LEDout
   332  001FD8  0E40               	movlw	64
   333  001FDA  1615               	andwf	??_LEDout^0,f,c
   334  001FDC  3A15               	swapf	??_LEDout^0,f,c
   335  001FDE  508C               	movf	140,w,c	;volatile
   336  001FE0  1815               	xorwf	??_LEDout^0,w,c
   337  001FE2  0BEF               	andlw	-17
   338  001FE4  1815               	xorwf	??_LEDout^0,w,c
   339  001FE6  6E8C               	movwf	140,c	;volatile
   340                           
   341                           ;led.c: 12:     LATDbits.LATD5 = number & 0b10000000;
   342  001FE8  C013  F015         	movff	LEDout@number,??_LEDout
   343  001FEC  0E80               	movlw	128
   344  001FEE  1615               	andwf	??_LEDout^0,f,c
   345  001FF0  3A15               	swapf	??_LEDout^0,f,c
   346  001FF2  4615               	rlncf	??_LEDout^0,f,c
   347  001FF4  508C               	movf	140,w,c	;volatile
   348  001FF6  1815               	xorwf	??_LEDout^0,w,c
   349  001FF8  0BDF               	andlw	-33
   350  001FFA  1815               	xorwf	??_LEDout^0,w,c
   351  001FFC  6E8C               	movwf	140,c	;volatile
   352  001FFE  0012               	return		;funcret
   353  002000                     __end_of_LEDout:
   354                           	opt callstack 0
   355                           
   356 ;; *************** function _LEDInit *****************
   357 ;; Defined at:
   358 ;;		line 17 in file "led.c"
   359 ;; Parameters:    Size  Location     Type
   360 ;;		None
   361 ;; Auto vars:     Size  Location     Type
   362 ;;		None
   363 ;; Return value:  Size  Location     Type
   364 ;;                  1    wreg      void 
   365 ;; Registers used:
   366 ;;		wreg, status,2
   367 ;; Tracked objects:
   368 ;;		On entry : 0/0
   369 ;;		On exit  : 0/0
   370 ;;		Unchanged: 0/0
   371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   372 ;;      Params:         0       0       0       0
   373 ;;      Locals:         0       0       0       0
   374 ;;      Temps:          0       0       0       0
   375 ;;      Totals:         0       0       0       0
   376 ;;Total ram usage:        0 bytes
   377 ;; Hardware stack levels used:    1
   378 ;; This function calls:
   379 ;;		Nothing
   380 ;; This function is called by:
   381 ;;		_main
   382 ;; This function uses a non-reentrant model
   383 ;;
   384                           
   385                           	psect	text2
   386  001EEE                     __ptext2:
   387                           	opt callstack 0
   388  001EEE                     _LEDInit:
   389                           	opt callstack 30
   390  001EEE                     
   391                           ;led.c: 34:     LATC = 0;
   392  001EEE  0E00               	movlw	0
   393  001EF0  6E8B               	movwf	139,c	;volatile
   394                           
   395                           ;led.c: 35:     LATD = 0;
   396  001EF2  0E00               	movlw	0
   397  001EF4  6E8C               	movwf	140,c	;volatile
   398                           
   399                           ;led.c: 36:     TRISC = 0;
   400  001EF6  0E00               	movlw	0
   401  001EF8  6E94               	movwf	148,c	;volatile
   402                           
   403                           ;led.c: 37:     TRISD = 0;
   404  001EFA  0E00               	movlw	0
   405  001EFC  6E95               	movwf	149,c	;volatile
   406  001EFE  0012               	return		;funcret
   407  001F00                     __end_of_LEDInit:
   408                           	opt callstack 0
   409  0000                     
   410                           	psect	rparam
   411  0000                     tosu	equ	0xFFF
   412                           tosh	equ	0xFFE
   413                           tosl	equ	0xFFD
   414                           stkptr	equ	0xFFC
   415                           pclatu	equ	0xFFB
   416                           pclath	equ	0xFFA
   417                           pcl	equ	0xFF9
   418                           tblptru	equ	0xFF8
   419                           tblptrh	equ	0xFF7
   420                           tblptrl	equ	0xFF6
   421                           tablat	equ	0xFF5
   422                           prodh	equ	0xFF4
   423                           prodl	equ	0xFF3
   424                           indf0	equ	0xFEF
   425                           postinc0	equ	0xFEE
   426                           postdec0	equ	0xFED
   427                           preinc0	equ	0xFEC
   428                           plusw0	equ	0xFEB
   429                           fsr0h	equ	0xFEA
   430                           fsr0l	equ	0xFE9
   431                           wreg	equ	0xFE8
   432                           indf1	equ	0xFE7
   433                           postinc1	equ	0xFE6
   434                           postdec1	equ	0xFE5
   435                           preinc1	equ	0xFE4
   436                           plusw1	equ	0xFE3
   437                           fsr1h	equ	0xFE2
   438                           fsr1l	equ	0xFE1
   439                           bsr	equ	0xFE0
   440                           indf2	equ	0xFDF
   441                           postinc2	equ	0xFDE
   442                           postdec2	equ	0xFDD
   443                           preinc2	equ	0xFDC
   444                           plusw2	equ	0xFDB
   445                           fsr2h	equ	0xFDA
   446                           fsr2l	equ	0xFD9
   447                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      3      22
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S357DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S357DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_LEDout

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     252
                            _LEDInit
                             _LEDout
 ---------------------------------------------------------------------------------
 (1) _LEDout                                               3     1      2     252
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LEDInit
   _LEDout

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      3      16       1       23.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      16       3        0.0%
DATA                 0      0      16      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Nov 27 18:27:28 2019

                    l162 1F28                      l165 1F46                      l166 1F46  
                    l183 1FFE                      l186 1EFE                      l904 1EEE  
                    u140 1F36                      u141 1F32                      wreg 000FE8  
        __end_of_LEDInit 1F00                     l1070 1F36                     l1072 1F3A  
                   l1066 1F4E                     l1068 1F24                     _LATB 000F8A  
                   _LATC 000F8B                     _LATD 000F8C                     _main 1F24  
                   start 0000             ___param_bank 000000                    ?_main 0013  
                  _PDC0H 000F78                    _PDC1H 000F76                    _PDC0L 000F79  
                  _PDC1L 000F77                    _RCREG 000FAE                    _SPBRG 000FAF  
                  _TRISC 000F94                    _TRISD 000F95                    _TXREG 000FAD  
                  tablat 000FF5             _TurningSpeed 0016          __initialization 1F00  
           __end_of_main 1F4E           __CFG_OSC$IRCIO 000000                   ??_main 0016  
          __activetblptr 000000                ??_LEDInit 0013                   _LEDout 1F4E  
                 _OSCCON 000FD3                   _PTCON0 000F7F                   _PTCON1 000F7E  
                 _SPBRGH 000FB0                   _PTPERH 000F7A                   _PTPERL 000F7B  
                 clear_0 1F18                   _motorL 000A                   _motorR 0001  
           __pdataCOMRAM 0016                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 1F1E  
          ___rparam_used 000001           __pcstackCOMRAM 0013                  ?_LEDout 0013  
                _LEDInit 1EEE                  _PWMCON0 000F6F                  _PWMCON1 000F6E  
        __size_of_LEDout 00B2                  __Hparam 0000                  __Lparam 0000  
                __pcinit 1F00                  __ramtop 0300                  __ptext0 1F24  
                __ptext1 1F4E                  __ptext2 1EEE     end_of_initialization 1F1E  
              _RCSTAbits 000FAB                  postinc0 000FEE             LEDout@number 0013  
              _TRISAbits 000F92                _TRISBbits 000F93                _TRISCbits 000F94  
              _TRISDbits 000F95                _TXSTAbits 000FAC           __end_of_LEDout 2000  
            _BAUDCONbits 000FAA            __pidataCOMRAM 1EED      start_initialization 1F00  
               ??_LEDout 0015                 ?_LEDInit 0013              __pbssCOMRAM 0001  
               _LATAbits 000F89                 _LATBbits 000F8A                 _LATCbits 000F8B  
               _LATDbits 000F8C                 _PIR1bits 000F9E         __size_of_LEDInit 0012  
               __Hrparam 0000                 __Lrparam 0000            __size_of_main 002A  
             _OSCCONbits 000FD3  
