

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Nov 28 11:36:34 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22  0000                     
    23                           ; Version 2.10
    24                           ; Generated 31/07/2019 GMT
    25                           ; 
    26                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4331 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	idataCOMRAM
    59  0005E0                     __pidataCOMRAM:
    60                           	opt callstack 0
    61                           
    62                           ;initializer for _TurningSpeed
    63  0005E0  4B                 	db	75
    64  0000                     _LATD	set	3980
    65  0000                     _LATC	set	3979
    66  0000                     _OSCCONbits	set	4051
    67  0000                     _OSCCON	set	4051
    68  0000                     _RCSTAbits	set	4011
    69  0000                     _TXSTAbits	set	4012
    70  0000                     _BAUDCONbits	set	4010
    71  0000                     _SPBRGH	set	4016
    72  0000                     _SPBRG	set	4015
    73  0000                     _TXREG	set	4013
    74  0000                     _RCREG	set	4014
    75  0000                     _PIR1bits	set	3998
    76  0000                     _LATB	set	3978
    77  0000                     _PTPERH	set	3962
    78  0000                     _PTPERL	set	3963
    79  0000                     _PWMCON1	set	3950
    80  0000                     _PWMCON0	set	3951
    81  0000                     _PTCON1	set	3966
    82  0000                     _PTCON0	set	3967
    83  0000                     _LATBbits	set	3978
    84  0000                     _TRISBbits	set	3987
    85  0000                     _TRISDbits	set	3989
    86  0000                     _TRISCbits	set	3988
    87  0000                     _TRISAbits	set	3986
    88  0000                     _LATAbits	set	3977
    89  0000                     _LATDbits	set	3980
    90  0000                     _LATCbits	set	3979
    91  0000                     _PDC1H	set	3958
    92  0000                     _PDC1L	set	3959
    93  0000                     _PDC0H	set	3960
    94  0000                     _PDC0L	set	3961
    95                           
    96                           	psect	smallconst
    97  000300                     __psmallconst:
    98                           	opt callstack 0
    99  000300  00                 	db	0
   100  000301                     STR_1:
   101  000301  48                 	db	72	;'H'
   102  000302  65                 	db	101	;'e'
   103  000303  6C                 	db	108	;'l'
   104  000304  6C                 	db	108	;'l'
   105  000305  6F                 	db	111	;'o'
   106  000306  20                 	db	32
   107  000307  57                 	db	87	;'W'
   108  000308  6F                 	db	111	;'o'
   109  000309  72                 	db	114	;'r'
   110  00030A  6C                 	db	108	;'l'
   111  00030B  64                 	db	100	;'d'
   112  00030C  21                 	db	33
   113  00030D  00                 	db	0
   114                           
   115                           ; #config settings
   116  00030E  00                 	db	0	; dummy byte at the end
   117  0000                     
   118                           	psect	cinit
   119  0005A6                     __pcinit:
   120                           	opt callstack 0
   121  0005A6                     start_initialization:
   122                           	opt callstack 0
   123  0005A6                     __initialization:
   124                           	opt callstack 0
   125                           
   126                           ; Initialize objects allocated to COMRAM (1 bytes)
   127                           ; load TBLPTR registers with __pidataCOMRAM
   128  0005A6  0EE0               	movlw	low __pidataCOMRAM
   129  0005A8  6EF6               	movwf	tblptrl,c
   130  0005AA  0E05               	movlw	high __pidataCOMRAM
   131  0005AC  6EF7               	movwf	tblptrh,c
   132  0005AE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   133  0005B0  6EF8               	movwf	tblptru,c
   134  0005B2  0009               	tblrd		*+	;fetch initializer
   135  0005B4  CFF5 F029          	movff	tablat,__pdataCOMRAM
   136                           
   137                           ; Clear objects allocated to COMRAM (22 bytes)
   138  0005B8  EE00  F001         	lfsr	0,__pbssCOMRAM
   139  0005BC  0E16               	movlw	22
   140  0005BE                     clear_0:
   141  0005BE  6AEE               	clrf	postinc0,c
   142  0005C0  06E8               	decf	wreg,f,c
   143  0005C2  E1FD               	bnz	clear_0
   144  0005C4                     end_of_initialization:
   145                           	opt callstack 0
   146  0005C4                     __end_of__initialization:
   147                           	opt callstack 0
   148  0005C4  0E00               	movlw	low (__Lsmallconst shr (0+16))
   149  0005C6  6EF8               	movwf	tblptru,c
   150  0005C8  0E03               	movlw	high __Lsmallconst
   151  0005CA  6EF7               	movwf	tblptrh,c
   152  0005CC  0100               	movlb	0
   153  0005CE  EF1B  F002         	goto	_main	;jump to C main() function
   154                           
   155                           	psect	bssCOMRAM
   156  000001                     __pbssCOMRAM:
   157                           	opt callstack 0
   158  000001                     _left:
   159                           	opt callstack 0
   160  000001                     	ds	2
   161  000003                     _right:
   162                           	opt callstack 0
   163  000003                     	ds	2
   164  000005                     _motorR:
   165                           	opt callstack 0
   166  000005                     	ds	9
   167  00000E                     _motorL:
   168                           	opt callstack 0
   169  00000E                     	ds	9
   170                           
   171                           	psect	dataCOMRAM
   172  000029                     __pdataCOMRAM:
   173                           	opt callstack 0
   174  000029                     _TurningSpeed:
   175                           	opt callstack 0
   176  000029                     	ds	1
   177                           
   178                           	psect	cstackCOMRAM
   179  000017                     __pcstackCOMRAM:
   180                           	opt callstack 0
   181  000017                     ??_LCDout:
   182  000017                     LEDout@number:
   183                           	opt callstack 0
   184  000017                     strcpy@dest:
   185                           	opt callstack 0
   186                           
   187                           ; 2 bytes @ 0x0
   188  000017                     	ds	1
   189  000018                     LCDout@number:
   190                           	opt callstack 0
   191                           
   192                           ; 1 bytes @ 0x1
   193  000018                     	ds	1
   194  000019                     ??_LEDout:
   195  000019                     SendLCD@type:
   196                           	opt callstack 0
   197  000019                     strcpy@src:
   198                           	opt callstack 0
   199                           
   200                           ; 2 bytes @ 0x2
   201  000019                     	ds	1
   202  00001A                     SendLCD@Byte:
   203                           	opt callstack 0
   204                           
   205                           ; 1 bytes @ 0x3
   206  00001A                     	ds	1
   207  00001B                     ??_LCD_Init:
   208  00001B                     SetLine@line:
   209                           	opt callstack 0
   210  00001B                     LCD_String@string:
   211                           	opt callstack 0
   212  00001B                     strcpy@s:
   213                           	opt callstack 0
   214                           
   215                           ; 2 bytes @ 0x4
   216  00001B                     	ds	2
   217  00001D                     strcpy@d:
   218                           	opt callstack 0
   219                           
   220                           ; 2 bytes @ 0x6
   221  00001D                     	ds	2
   222  00001F                     main@buf:
   223                           	opt callstack 0
   224                           
   225                           ; 10 bytes @ 0x8
   226  00001F                     	ds	10
   227                           
   228 ;;
   229 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   230 ;;
   231 ;; *************** function _main *****************
   232 ;; Defined at:
   233 ;;		line 42 in file "main.c"
   234 ;; Parameters:    Size  Location     Type
   235 ;;		None
   236 ;; Auto vars:     Size  Location     Type
   237 ;;  buf            10    8[COMRAM] unsigned char [10]
   238 ;; Return value:  Size  Location     Type
   239 ;;                  1    wreg      void 
   240 ;; Registers used:
   241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   242 ;; Tracked objects:
   243 ;;		On entry : 0/0
   244 ;;		On exit  : 0/0
   245 ;;		Unchanged: 0/0
   246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   247 ;;      Params:         0       0       0       0
   248 ;;      Locals:        10       0       0       0
   249 ;;      Temps:          0       0       0       0
   250 ;;      Totals:        10       0       0       0
   251 ;;Total ram usage:       10 bytes
   252 ;; Hardware stack levels required when called:    4
   253 ;; This function calls:
   254 ;;		_LCD_Init
   255 ;;		_LCD_String
   256 ;;		_LEDout
   257 ;;		_SetLine
   258 ;;		_strcpy
   259 ;; This function is called by:
   260 ;;		Startup code after reset
   261 ;; This function uses a non-reentrant model
   262 ;;
   263                           
   264                           	psect	text0
   265  000436                     __ptext0:
   266                           	opt callstack 0
   267  000436                     _main:
   268                           	opt callstack 27
   269  000436                     
   270                           ;main.c: 43:     OSCCON = 0x72;
   271  000436  0E72               	movlw	114
   272  000438  6ED3               	movwf	211,c	;volatile
   273  00043A                     l178:
   274  00043A  A4D3               	btfss	211,2,c	;volatile
   275  00043C  EF22  F002         	goto	u191
   276  000440  EF24  F002         	goto	u190
   277  000444                     u191:
   278  000444  EF1D  F002         	goto	l178
   279  000448                     u190:
   280  000448                     
   281                           ;main.c: 46:     LCD_Init();
   282  000448  EC88  F001         	call	_LCD_Init	;wreg free
   283                           
   284                           ;main.c: 47:     SetLine(1);
   285  00044C  0E01               	movlw	1
   286  00044E  ECA1  F002         	call	_SetLine
   287  000452                     
   288                           ;main.c: 82:         char buf[10];;main.c: 83:         strcpy(buf, "Hello World!");
   289  000452  0E1F               	movlw	low main@buf
   290  000454  6E17               	movwf	strcpy@dest^0,c
   291  000456  0E00               	movlw	high main@buf
   292  000458  6E18               	movwf	(strcpy@dest+1)^0,c
   293  00045A  0E01               	movlw	low STR_1
   294  00045C  6E19               	movwf	strcpy@src^0,c
   295  00045E  0E03               	movlw	high STR_1
   296  000460  6E1A               	movwf	(strcpy@src+1)^0,c
   297  000462  EC43  F002         	call	_strcpy	;wreg free
   298  000466                     
   299                           ;main.c: 84:         LCD_String(buf);
   300  000466  0E1F               	movlw	low main@buf
   301  000468  6E1B               	movwf	LCD_String@string^0,c
   302  00046A  0E00               	movlw	high main@buf
   303  00046C  6E1C               	movwf	(LCD_String@string+1)^0,c
   304  00046E  EC83  F002         	call	_LCD_String	;wreg free
   305  000472                     
   306                           ;main.c: 85: LEDout(84);
   307  000472  0E00               	movlw	0
   308  000474  6E18               	movwf	(LEDout@number+1)^0,c
   309  000476  0E54               	movlw	84
   310  000478  6E17               	movwf	LEDout@number^0,c
   311  00047A  EC63  F002         	call	_LEDout	;wreg free
   312  00047E                     l181:
   313  00047E  EF3F  F002         	goto	l181
   314  000482  EF00  F000         	goto	start
   315  000486                     __end_of_main:
   316                           	opt callstack 0
   317                           
   318 ;; *************** function _strcpy *****************
   319 ;; Defined at:
   320 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strcpy.c"
   321 ;; Parameters:    Size  Location     Type
   322 ;;  dest            2    0[COMRAM] PTR unsigned char 
   323 ;;		 -> main@buf(10), 
   324 ;;  src             2    2[COMRAM] PTR const unsigned char 
   325 ;;		 -> STR_1(13), 
   326 ;; Auto vars:     Size  Location     Type
   327 ;;  d               2    6[COMRAM] PTR unsigned char 
   328 ;;		 -> main@buf(10), 
   329 ;;  s               2    4[COMRAM] PTR const unsigned char 
   330 ;;		 -> STR_1(13), 
   331 ;; Return value:  Size  Location     Type
   332 ;;                  2    0[COMRAM] PTR unsigned char 
   333 ;; Registers used:
   334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   335 ;; Tracked objects:
   336 ;;		On entry : 0/0
   337 ;;		On exit  : 0/0
   338 ;;		Unchanged: 0/0
   339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   340 ;;      Params:         4       0       0       0
   341 ;;      Locals:         4       0       0       0
   342 ;;      Temps:          0       0       0       0
   343 ;;      Totals:         8       0       0       0
   344 ;;Total ram usage:        8 bytes
   345 ;; Hardware stack levels used:    1
   346 ;; This function calls:
   347 ;;		Nothing
   348 ;; This function is called by:
   349 ;;		_main
   350 ;; This function uses a non-reentrant model
   351 ;;
   352                           
   353                           	psect	text1
   354  000486                     __ptext1:
   355                           	opt callstack 0
   356  000486                     _strcpy:
   357                           	opt callstack 30
   358  000486  C019  F01B         	movff	strcpy@src,strcpy@s
   359  00048A  C01A  F01C         	movff	strcpy@src+1,strcpy@s+1
   360  00048E  C017  F01D         	movff	strcpy@dest,strcpy@d
   361  000492  C018  F01E         	movff	strcpy@dest+1,strcpy@d+1
   362  000496                     l1146:
   363  000496  C01B  FFF6         	movff	strcpy@s,tblptrl
   364  00049A  C01C  FFF7         	movff	strcpy@s+1,tblptrh
   365  00049E  4A1B               	infsnz	strcpy@s^0,f,c
   366  0004A0  2A1C               	incf	(strcpy@s+1)^0,f,c
   367  0004A2                     	if	0	;tblptru may be non-zero
   368  0004A2                     	endif
   369  0004A2                     	if	0	;tblptru may be non-zero
   370  0004A2                     	endif
   371  0004A2  C01D  FFD9         	movff	strcpy@d,fsr2l
   372  0004A6  C01E  FFDA         	movff	strcpy@d+1,fsr2h
   373  0004AA  4A1D               	infsnz	strcpy@d^0,f,c
   374  0004AC  2A1E               	incf	(strcpy@d+1)^0,f,c
   375  0004AE  0008               	tblrd		*
   376  0004B0  CFF5 FFDF          	movff	tablat,indf2
   377  0004B4  50DF               	movf	indf2,w,c
   378  0004B6  A4D8               	btfss	status,2,c
   379  0004B8  EF60  F002         	goto	u181
   380  0004BC  EF62  F002         	goto	u180
   381  0004C0                     u181:
   382  0004C0  EF4B  F002         	goto	l1146
   383  0004C4                     u180:
   384  0004C4  0012               	return		;funcret
   385  0004C6                     __end_of_strcpy:
   386                           	opt callstack 0
   387                           
   388 ;; *************** function _SetLine *****************
   389 ;; Defined at:
   390 ;;		line 85 in file "lcd.c"
   391 ;; Parameters:    Size  Location     Type
   392 ;;  line            1    wreg     unsigned char 
   393 ;; Auto vars:     Size  Location     Type
   394 ;;  line            1    4[COMRAM] unsigned char 
   395 ;; Return value:  Size  Location     Type
   396 ;;                  1    wreg      void 
   397 ;; Registers used:
   398 ;;		wreg, status,2, status,0, cstack
   399 ;; Tracked objects:
   400 ;;		On entry : 0/0
   401 ;;		On exit  : 0/0
   402 ;;		Unchanged: 0/0
   403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   404 ;;      Params:         0       0       0       0
   405 ;;      Locals:         1       0       0       0
   406 ;;      Temps:          0       0       0       0
   407 ;;      Totals:         1       0       0       0
   408 ;;Total ram usage:        1 bytes
   409 ;; Hardware stack levels used:    1
   410 ;; Hardware stack levels required when called:    3
   411 ;; This function calls:
   412 ;;		_SendLCD
   413 ;; This function is called by:
   414 ;;		_main
   415 ;; This function uses a non-reentrant model
   416 ;;
   417                           
   418                           	psect	text2
   419  000542                     __ptext2:
   420                           	opt callstack 0
   421  000542                     _SetLine:
   422                           	opt callstack 27
   423                           
   424                           ;incstack = 0
   425                           ;SetLine@line stored from wreg
   426  000542  6E1B               	movwf	SetLine@line^0,c
   427  000544                     
   428                           ;lcd.c: 86:     if (line == 1) {
   429  000544  041B               	decf	SetLine@line^0,w,c
   430  000546  A4D8               	btfss	status,2,c
   431  000548  EFA8  F002         	goto	u161
   432  00054C  EFAA  F002         	goto	u160
   433  000550                     u161:
   434  000550  EFB1  F002         	goto	l1130
   435  000554                     u160:
   436  000554                     
   437                           ;lcd.c: 87:         SendLCD(0x80, 0);
   438  000554  0E00               	movlw	0
   439  000556  6E19               	movwf	SendLCD@type^0,c
   440  000558  0E80               	movlw	128
   441  00055A  ECBB  F002         	call	_SendLCD
   442                           
   443                           ;lcd.c: 88:     } else {
   444  00055E  EFB6  F002         	goto	l1132
   445  000562                     l1130:
   446                           
   447                           ;lcd.c: 89:         SendLCD(0xC0, 0);
   448  000562  0E00               	movlw	0
   449  000564  6E19               	movwf	SendLCD@type^0,c
   450  000566  0EC0               	movlw	192
   451  000568  ECBB  F002         	call	_SendLCD
   452  00056C                     l1132:
   453                           
   454                           ;lcd.c: 91:     _delay((unsigned long)((50)*(8000000/4000000.0)));
   455  00056C  0E21               	movlw	33
   456  00056E                     u207:
   457  00056E  2EE8               	decfsz	wreg,f,c
   458  000570  D7FE               	bra	u207
   459  000572  F000               	nop	
   460  000574  0012               	return		;funcret
   461  000576                     __end_of_SetLine:
   462                           	opt callstack 0
   463                           
   464 ;; *************** function _LEDout *****************
   465 ;; Defined at:
   466 ;;		line 4 in file "led.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;  number          2    0[COMRAM] int 
   469 ;; Auto vars:     Size  Location     Type
   470 ;;		None
   471 ;; Return value:  Size  Location     Type
   472 ;;                  1    wreg      void 
   473 ;; Registers used:
   474 ;;		wreg, status,2, status,0
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   480 ;;      Params:         2       0       0       0
   481 ;;      Locals:         0       0       0       0
   482 ;;      Temps:          3       0       0       0
   483 ;;      Totals:         5       0       0       0
   484 ;;Total ram usage:        5 bytes
   485 ;; Hardware stack levels used:    1
   486 ;; This function calls:
   487 ;;		Nothing
   488 ;; This function is called by:
   489 ;;		_main
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493                           	psect	text3
   494  0004C6                     __ptext3:
   495                           	opt callstack 0
   496  0004C6                     _LEDout:
   497                           	opt callstack 30
   498  0004C6                     
   499                           ;led.c: 13:     LATC = (number & 0b00111100) << 2;
   500  0004C6  C017  F019         	movff	LEDout@number,??_LEDout
   501  0004CA  0E3C               	movlw	60
   502  0004CC  1619               	andwf	??_LEDout^0,f,c
   503  0004CE  90D8               	bcf	status,0,c
   504  0004D0  3619               	rlcf	??_LEDout^0,f,c
   505  0004D2  90D8               	bcf	status,0,c
   506  0004D4  3419               	rlcf	??_LEDout^0,w,c
   507  0004D6  6E8B               	movwf	139,c	;volatile
   508                           
   509                           ;led.c: 14:     LATD = ((number & 0b00000011) << 2) | ((number & 0b11000000) >> 2);
   510  0004D8  C017  F019         	movff	LEDout@number,??_LEDout
   511  0004DC  C018  F01A         	movff	LEDout@number+1,??_LEDout+1
   512  0004E0  341A               	rlcf	(??_LEDout+1)^0,w,c
   513  0004E2  321A               	rrcf	(??_LEDout+1)^0,f,c
   514  0004E4  3219               	rrcf	??_LEDout^0,f,c
   515  0004E6  341A               	rlcf	(??_LEDout+1)^0,w,c
   516  0004E8  321A               	rrcf	(??_LEDout+1)^0,f,c
   517  0004EA  3219               	rrcf	??_LEDout^0,f,c
   518  0004EC  0E30               	movlw	48
   519  0004EE  1619               	andwf	??_LEDout^0,f,c
   520  0004F0  C017  F01B         	movff	LEDout@number,??_LEDout+2
   521  0004F4  0E03               	movlw	3
   522  0004F6  161B               	andwf	(??_LEDout+2)^0,f,c
   523  0004F8  90D8               	bcf	status,0,c
   524  0004FA  361B               	rlcf	(??_LEDout+2)^0,f,c
   525  0004FC  90D8               	bcf	status,0,c
   526  0004FE  341B               	rlcf	(??_LEDout+2)^0,w,c
   527  000500  1019               	iorwf	??_LEDout^0,w,c
   528  000502  6E8C               	movwf	140,c	;volatile
   529  000504  0012               	return		;funcret
   530  000506                     __end_of_LEDout:
   531                           	opt callstack 0
   532                           
   533 ;; *************** function _LCD_String *****************
   534 ;; Defined at:
   535 ;;		line 94 in file "lcd.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;  string          2    4[COMRAM] PTR unsigned char 
   538 ;;		 -> main@buf(10), 
   539 ;; Auto vars:     Size  Location     Type
   540 ;;		None
   541 ;; Return value:  Size  Location     Type
   542 ;;                  1    wreg      void 
   543 ;; Registers used:
   544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   545 ;; Tracked objects:
   546 ;;		On entry : 0/0
   547 ;;		On exit  : 0/0
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   550 ;;      Params:         2       0       0       0
   551 ;;      Locals:         0       0       0       0
   552 ;;      Temps:          0       0       0       0
   553 ;;      Totals:         2       0       0       0
   554 ;;Total ram usage:        2 bytes
   555 ;; Hardware stack levels used:    1
   556 ;; Hardware stack levels required when called:    3
   557 ;; This function calls:
   558 ;;		_SendLCD
   559 ;; This function is called by:
   560 ;;		_main
   561 ;; This function uses a non-reentrant model
   562 ;;
   563                           
   564                           	psect	text4
   565  000506                     __ptext4:
   566                           	opt callstack 0
   567  000506                     _LCD_String:
   568                           	opt callstack 27
   569  000506                     
   570                           ;lcd.c: 96:     while (*string != 0) {
   571  000506  EF94  F002         	goto	l1142
   572  00050A                     l1136:
   573                           
   574                           ;lcd.c: 99:         SendLCD(*string++, 1);
   575  00050A  0E01               	movlw	1
   576  00050C  6E19               	movwf	SendLCD@type^0,c
   577  00050E  C01B  FFD9         	movff	LCD_String@string,fsr2l
   578  000512  C01C  FFDA         	movff	LCD_String@string+1,fsr2h
   579  000516  50DF               	movf	indf2,w,c
   580  000518  ECBB  F002         	call	_SendLCD
   581  00051C  4A1B               	infsnz	LCD_String@string^0,f,c
   582  00051E  2A1C               	incf	(LCD_String@string+1)^0,f,c
   583  000520                     
   584                           ;lcd.c: 100:         _delay((unsigned long)((50)*(8000000/4000000.0)));
   585  000520  0E21               	movlw	33
   586  000522                     u217:
   587  000522  2EE8               	decfsz	wreg,f,c
   588  000524  D7FE               	bra	u217
   589  000526  F000               	nop	
   590  000528                     l1142:
   591                           
   592                           ;lcd.c: 96:     while (*string != 0) {
   593  000528  C01B  FFD9         	movff	LCD_String@string,fsr2l
   594  00052C  C01C  FFDA         	movff	LCD_String@string+1,fsr2h
   595  000530  50DF               	movf	indf2,w,c
   596  000532  A4D8               	btfss	status,2,c
   597  000534  EF9E  F002         	goto	u171
   598  000538  EFA0  F002         	goto	u170
   599  00053C                     u171:
   600  00053C  EF85  F002         	goto	l1136
   601  000540                     u170:
   602  000540  0012               	return		;funcret
   603  000542                     __end_of_LCD_String:
   604                           	opt callstack 0
   605                           
   606 ;; *************** function _LCD_Init *****************
   607 ;; Defined at:
   608 ;;		line 38 in file "lcd.c"
   609 ;; Parameters:    Size  Location     Type
   610 ;;		None
   611 ;; Auto vars:     Size  Location     Type
   612 ;;		None
   613 ;; Return value:  Size  Location     Type
   614 ;;                  1    wreg      void 
   615 ;; Registers used:
   616 ;;		wreg, status,2, status,0, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   622 ;;      Params:         0       0       0       0
   623 ;;      Locals:         0       0       0       0
   624 ;;      Temps:          1       0       0       0
   625 ;;      Totals:         1       0       0       0
   626 ;;Total ram usage:        1 bytes
   627 ;; Hardware stack levels used:    1
   628 ;; Hardware stack levels required when called:    3
   629 ;; This function calls:
   630 ;;		_LCDout
   631 ;;		_SendLCD
   632 ;; This function is called by:
   633 ;;		_main
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637                           	psect	text5
   638  000310                     __ptext5:
   639                           	opt callstack 0
   640  000310                     _LCD_Init:
   641                           	opt callstack 27
   642  000310                     
   643                           ;lcd.c: 40:     TRISAbits.RA6 = 0;
   644  000310  9C92               	bcf	146,6,c	;volatile
   645                           
   646                           ;lcd.c: 41:     TRISCbits.RC0 = 0;
   647  000312  9094               	bcf	148,0,c	;volatile
   648                           
   649                           ;lcd.c: 42:     TRISDbits.RD3 = 0;
   650  000314  9695               	bcf	149,3,c	;volatile
   651                           
   652                           ;lcd.c: 43:     TRISDbits.RD2 = 0;
   653  000316  9495               	bcf	149,2,c	;volatile
   654                           
   655                           ;lcd.c: 44:     TRISDbits.RD0 = 0;
   656  000318  9095               	bcf	149,0,c	;volatile
   657                           
   658                           ;lcd.c: 45:     TRISDbits.RD1 = 0;
   659  00031A  9295               	bcf	149,1,c	;volatile
   660                           
   661                           ;lcd.c: 47:     LATAbits.LA6 = 0;
   662  00031C  9C89               	bcf	137,6,c	;volatile
   663                           
   664                           ;lcd.c: 48:     LATCbits.LC0 = 0;
   665  00031E  908B               	bcf	139,0,c	;volatile
   666                           
   667                           ;lcd.c: 49:     LATDbits.LD1 = 0;
   668  000320  928C               	bcf	140,1,c	;volatile
   669                           
   670                           ;lcd.c: 50:     LATDbits.LD2 = 0;
   671  000322  948C               	bcf	140,2,c	;volatile
   672                           
   673                           ;lcd.c: 51:     LATDbits.LD0 = 0;
   674  000324  908C               	bcf	140,0,c	;volatile
   675                           
   676                           ;lcd.c: 52:     LATDbits.LD1 = 0;
   677  000326  928C               	bcf	140,1,c	;volatile
   678  000328                     
   679                           ;lcd.c: 64:     _delay((unsigned long)((15)*(8000000/4000.0)));
   680  000328  0E27               	movlw	39
   681  00032A  6E1B               	movwf	??_LCD_Init^0,c
   682  00032C  0EF5               	movlw	245
   683  00032E                     u227:
   684  00032E  2EE8               	decfsz	wreg,f,c
   685  000330  D7FE               	bra	u227
   686  000332  2E1B               	decfsz	??_LCD_Init^0,f,c
   687  000334  D7FC               	bra	u227
   688  000336  F000               	nop	
   689  000338                     
   690                           ;lcd.c: 65:     LCDout(0b0011);
   691  000338  0E03               	movlw	3
   692  00033A  ECDD  F001         	call	_LCDout
   693  00033E                     
   694                           ;lcd.c: 66:     _delay((unsigned long)((5)*(8000000/4000.0)));
   695  00033E  0E0D               	movlw	13
   696  000340  6E1B               	movwf	??_LCD_Init^0,c
   697  000342  0EFC               	movlw	252
   698  000344                     u237:
   699  000344  2EE8               	decfsz	wreg,f,c
   700  000346  D7FE               	bra	u237
   701  000348  2E1B               	decfsz	??_LCD_Init^0,f,c
   702  00034A  D7FC               	bra	u237
   703                           
   704                           ;lcd.c: 67:     LCDout(0b0011);
   705  00034C  0E03               	movlw	3
   706  00034E  ECDD  F001         	call	_LCDout
   707  000352                     
   708                           ;lcd.c: 68:     _delay((unsigned long)((200)*(8000000/4000000.0)));
   709  000352  0E85               	movlw	133
   710  000354                     u247:
   711  000354  2EE8               	decfsz	wreg,f,c
   712  000356  D7FE               	bra	u247
   713  000358  F000               	nop	
   714  00035A                     
   715                           ;lcd.c: 69:     LCDout(0b0011);
   716  00035A  0E03               	movlw	3
   717  00035C  ECDD  F001         	call	_LCDout
   718                           
   719                           ;lcd.c: 70:     _delay((unsigned long)((50)*(8000000/4000000.0)));
   720  000360  0E21               	movlw	33
   721  000362                     u257:
   722  000362  2EE8               	decfsz	wreg,f,c
   723  000364  D7FE               	bra	u257
   724  000366  F000               	nop	
   725  000368                     
   726                           ;lcd.c: 71:     LCDout(0b0010);
   727  000368  0E02               	movlw	2
   728  00036A  ECDD  F001         	call	_LCDout
   729  00036E                     
   730                           ;lcd.c: 72:     _delay((unsigned long)((50)*(8000000/4000000.0)));
   731  00036E  0E21               	movlw	33
   732  000370                     u267:
   733  000370  2EE8               	decfsz	wreg,f,c
   734  000372  D7FE               	bra	u267
   735  000374  F000               	nop	
   736                           
   737                           ;lcd.c: 74:     SendLCD(0b00101000, 0);
   738  000376  0E00               	movlw	0
   739  000378  6E19               	movwf	SendLCD@type^0,c
   740  00037A  0E28               	movlw	40
   741  00037C  ECBB  F002         	call	_SendLCD
   742                           
   743                           ;lcd.c: 75:     SendLCD(0b00001000, 0);
   744  000380  0E00               	movlw	0
   745  000382  6E19               	movwf	SendLCD@type^0,c
   746  000384  0E08               	movlw	8
   747  000386  ECBB  F002         	call	_SendLCD
   748                           
   749                           ;lcd.c: 76:     SendLCD(0b00000001, 0);
   750  00038A  0E00               	movlw	0
   751  00038C  6E19               	movwf	SendLCD@type^0,c
   752  00038E  0E01               	movlw	1
   753  000390  ECBB  F002         	call	_SendLCD
   754  000394                     
   755                           ;lcd.c: 77:     _delay((unsigned long)((2)*(8000000/4000.0)));
   756  000394  0E06               	movlw	6
   757  000396  6E1B               	movwf	??_LCD_Init^0,c
   758  000398  0E30               	movlw	48
   759  00039A                     u277:
   760  00039A  2EE8               	decfsz	wreg,f,c
   761  00039C  D7FE               	bra	u277
   762  00039E  2E1B               	decfsz	??_LCD_Init^0,f,c
   763  0003A0  D7FC               	bra	u277
   764  0003A2  D000               	nop2	
   765  0003A4                     
   766                           ;lcd.c: 78:     SendLCD(0b00000110, 0);
   767  0003A4  0E00               	movlw	0
   768  0003A6  6E19               	movwf	SendLCD@type^0,c
   769  0003A8  0E06               	movlw	6
   770  0003AA  ECBB  F002         	call	_SendLCD
   771  0003AE                     
   772                           ;lcd.c: 79:     SendLCD(0b00001111, 0);
   773  0003AE  0E00               	movlw	0
   774  0003B0  6E19               	movwf	SendLCD@type^0,c
   775  0003B2  0E0F               	movlw	15
   776  0003B4  ECBB  F002         	call	_SendLCD
   777  0003B8  0012               	return		;funcret
   778  0003BA                     __end_of_LCD_Init:
   779                           	opt callstack 0
   780                           
   781 ;; *************** function _SendLCD *****************
   782 ;; Defined at:
   783 ;;		line 26 in file "lcd.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;  Byte            1    wreg     unsigned char 
   786 ;;  type            1    2[COMRAM] unsigned char 
   787 ;; Auto vars:     Size  Location     Type
   788 ;;  Byte            1    3[COMRAM] unsigned char 
   789 ;; Return value:  Size  Location     Type
   790 ;;                  1    wreg      void 
   791 ;; Registers used:
   792 ;;		wreg, status,2, status,0, cstack
   793 ;; Tracked objects:
   794 ;;		On entry : 0/0
   795 ;;		On exit  : 0/0
   796 ;;		Unchanged: 0/0
   797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   798 ;;      Params:         1       0       0       0
   799 ;;      Locals:         1       0       0       0
   800 ;;      Temps:          0       0       0       0
   801 ;;      Totals:         2       0       0       0
   802 ;;Total ram usage:        2 bytes
   803 ;; Hardware stack levels used:    1
   804 ;; Hardware stack levels required when called:    2
   805 ;; This function calls:
   806 ;;		_LCDout
   807 ;; This function is called by:
   808 ;;		_LCD_Init
   809 ;;		_SetLine
   810 ;;		_LCD_String
   811 ;;		_ClearLCD
   812 ;; This function uses a non-reentrant model
   813 ;;
   814                           
   815                           	psect	text6
   816  000576                     __ptext6:
   817                           	opt callstack 0
   818  000576                     _SendLCD:
   819                           	opt callstack 27
   820                           
   821                           ;incstack = 0
   822                           ;SendLCD@Byte stored from wreg
   823  000576  6E1A               	movwf	SendLCD@Byte^0,c
   824  000578                     
   825                           ;lcd.c: 29:     LATAbits.LATA6 = type;
   826  000578  B019               	btfsc	SendLCD@type^0,0,c
   827  00057A  D002               	bra	u155
   828  00057C  9C89               	bcf	137,6,c	;volatile
   829  00057E  D001               	bra	u156
   830  000580                     u155:
   831  000580  8C89               	bsf	137,6,c	;volatile
   832  000582                     u156:
   833  000582                     
   834                           ;lcd.c: 31:     LCDout((Byte & 0b11110000) >> 4);
   835  000582  381A               	swapf	SendLCD@Byte^0,w,c
   836  000584  0B0F               	andlw	15
   837  000586  0B0F               	andlw	15
   838  000588  ECDD  F001         	call	_LCDout
   839  00058C                     
   840                           ;lcd.c: 32:     _delay((unsigned long)((10)*(8000000/4000000.0)));
   841  00058C  0E06               	movlw	6
   842  00058E                     u287:
   843  00058E  2EE8               	decfsz	wreg,f,c
   844  000590  D7FE               	bra	u287
   845  000592  D000               	nop2	
   846  000594                     
   847                           ;lcd.c: 33:     LCDout(Byte & 0b00001111);
   848  000594  501A               	movf	SendLCD@Byte^0,w,c
   849  000596  0B0F               	andlw	15
   850  000598  ECDD  F001         	call	_LCDout
   851                           
   852                           ;lcd.c: 35:     _delay((unsigned long)((50)*(8000000/4000000.0)));
   853  00059C  0E21               	movlw	33
   854  00059E                     u297:
   855  00059E  2EE8               	decfsz	wreg,f,c
   856  0005A0  D7FE               	bra	u297
   857  0005A2  F000               	nop	
   858  0005A4  0012               	return		;funcret
   859  0005A6                     __end_of_SendLCD:
   860                           	opt callstack 0
   861                           
   862 ;; *************** function _LCDout *****************
   863 ;; Defined at:
   864 ;;		line 14 in file "lcd.c"
   865 ;; Parameters:    Size  Location     Type
   866 ;;  number          1    wreg     unsigned char 
   867 ;; Auto vars:     Size  Location     Type
   868 ;;  number          1    1[COMRAM] unsigned char 
   869 ;; Return value:  Size  Location     Type
   870 ;;                  1    wreg      void 
   871 ;; Registers used:
   872 ;;		wreg, status,2, status,0, cstack
   873 ;; Tracked objects:
   874 ;;		On entry : 0/0
   875 ;;		On exit  : 0/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   878 ;;      Params:         0       0       0       0
   879 ;;      Locals:         1       0       0       0
   880 ;;      Temps:          1       0       0       0
   881 ;;      Totals:         2       0       0       0
   882 ;;Total ram usage:        2 bytes
   883 ;; Hardware stack levels used:    1
   884 ;; Hardware stack levels required when called:    1
   885 ;; This function calls:
   886 ;;		_E_TOG
   887 ;; This function is called by:
   888 ;;		_SendLCD
   889 ;;		_LCD_Init
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           	psect	text7
   894  0003BA                     __ptext7:
   895                           	opt callstack 0
   896  0003BA                     _LCDout:
   897                           	opt callstack 27
   898                           
   899                           ;incstack = 0
   900                           ;LCDout@number stored from wreg
   901  0003BA  6E18               	movwf	LCDout@number^0,c
   902  0003BC                     
   903                           ;lcd.c: 16:     LATDbits.LATD3 = number & 0b0001;
   904  0003BC  C018  F017         	movff	LCDout@number,??_LCDout
   905  0003C0  0E01               	movlw	1
   906  0003C2  1617               	andwf	??_LCDout^0,f,c
   907  0003C4  4617               	rlncf	??_LCDout^0,f,c
   908  0003C6  4617               	rlncf	??_LCDout^0,f,c
   909  0003C8  4617               	rlncf	??_LCDout^0,f,c
   910  0003CA  508C               	movf	140,w,c	;volatile
   911  0003CC  1817               	xorwf	??_LCDout^0,w,c
   912  0003CE  0BF7               	andlw	-9
   913  0003D0  1817               	xorwf	??_LCDout^0,w,c
   914  0003D2  6E8C               	movwf	140,c	;volatile
   915                           
   916                           ;lcd.c: 17:     LATDbits.LATD2 = (number & 0b0010) >> 1;
   917  0003D4  C018  F017         	movff	LCDout@number,??_LCDout
   918  0003D8  90D8               	bcf	status,0,c
   919  0003DA  3217               	rrcf	??_LCDout^0,f,c
   920  0003DC  0E01               	movlw	1
   921  0003DE  1617               	andwf	??_LCDout^0,f,c
   922  0003E0  4617               	rlncf	??_LCDout^0,f,c
   923  0003E2  4617               	rlncf	??_LCDout^0,f,c
   924  0003E4  508C               	movf	140,w,c	;volatile
   925  0003E6  1817               	xorwf	??_LCDout^0,w,c
   926  0003E8  0BFB               	andlw	-5
   927  0003EA  1817               	xorwf	??_LCDout^0,w,c
   928  0003EC  6E8C               	movwf	140,c	;volatile
   929                           
   930                           ;lcd.c: 18:     LATDbits.LATD0 = (number & 0b0100) >> 2;
   931  0003EE  C018  F017         	movff	LCDout@number,??_LCDout
   932  0003F2  90D8               	bcf	status,0,c
   933  0003F4  3217               	rrcf	??_LCDout^0,f,c
   934  0003F6  90D8               	bcf	status,0,c
   935  0003F8  3217               	rrcf	??_LCDout^0,f,c
   936  0003FA  0E01               	movlw	1
   937  0003FC  1617               	andwf	??_LCDout^0,f,c
   938  0003FE  508C               	movf	140,w,c	;volatile
   939  000400  1817               	xorwf	??_LCDout^0,w,c
   940  000402  0BFE               	andlw	-2
   941  000404  1817               	xorwf	??_LCDout^0,w,c
   942  000406  6E8C               	movwf	140,c	;volatile
   943                           
   944                           ;lcd.c: 19:     LATDbits.LATD1 = (number & 0b1000) >> 3;
   945  000408  C018  F017         	movff	LCDout@number,??_LCDout
   946  00040C  90D8               	bcf	status,0,c
   947  00040E  3217               	rrcf	??_LCDout^0,f,c
   948  000410  90D8               	bcf	status,0,c
   949  000412  3217               	rrcf	??_LCDout^0,f,c
   950  000414  90D8               	bcf	status,0,c
   951  000416  3217               	rrcf	??_LCDout^0,f,c
   952  000418  0E01               	movlw	1
   953  00041A  1617               	andwf	??_LCDout^0,f,c
   954  00041C  4617               	rlncf	??_LCDout^0,f,c
   955  00041E  508C               	movf	140,w,c	;volatile
   956  000420  1817               	xorwf	??_LCDout^0,w,c
   957  000422  0BFD               	andlw	-3
   958  000424  1817               	xorwf	??_LCDout^0,w,c
   959  000426  6E8C               	movwf	140,c	;volatile
   960  000428                     
   961                           ;lcd.c: 20:     E_TOG();
   962  000428  ECE9  F002         	call	_E_TOG	;wreg free
   963  00042C                     
   964                           ;lcd.c: 22:     _delay((unsigned long)((5)*(8000000/4000000.0)));
   965  00042C  0E03               	movlw	3
   966  00042E                     u307:
   967  00042E  2EE8               	decfsz	wreg,f,c
   968  000430  D7FE               	bra	u307
   969  000432  F000               	nop	
   970  000434  0012               	return		;funcret
   971  000436                     __end_of_LCDout:
   972                           	opt callstack 0
   973                           
   974 ;; *************** function _E_TOG *****************
   975 ;; Defined at:
   976 ;;		line 4 in file "lcd.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;		None
   979 ;; Auto vars:     Size  Location     Type
   980 ;;		None
   981 ;; Return value:  Size  Location     Type
   982 ;;                  1    wreg      void 
   983 ;; Registers used:
   984 ;;		wreg
   985 ;; Tracked objects:
   986 ;;		On entry : 0/0
   987 ;;		On exit  : 0/0
   988 ;;		Unchanged: 0/0
   989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   990 ;;      Params:         0       0       0       0
   991 ;;      Locals:         0       0       0       0
   992 ;;      Temps:          0       0       0       0
   993 ;;      Totals:         0       0       0       0
   994 ;;Total ram usage:        0 bytes
   995 ;; Hardware stack levels used:    1
   996 ;; This function calls:
   997 ;;		Nothing
   998 ;; This function is called by:
   999 ;;		_LCDout
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           	psect	text8
  1004  0005D2                     __ptext8:
  1005                           	opt callstack 0
  1006  0005D2                     _E_TOG:
  1007                           	opt callstack 27
  1008  0005D2                     
  1009                           ;lcd.c: 8:     LATCbits.LATC0 = 1;
  1010  0005D2  808B               	bsf	139,0,c	;volatile
  1011  0005D4                     
  1012                           ;lcd.c: 9:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1013  0005D4  0E03               	movlw	3
  1014  0005D6                     u317:
  1015  0005D6  2EE8               	decfsz	wreg,f,c
  1016  0005D8  D7FE               	bra	u317
  1017  0005DA  F000               	nop	
  1018  0005DC                     
  1019                           ;lcd.c: 10:     LATCbits.LATC0 = 0;
  1020  0005DC  908B               	bcf	139,0,c	;volatile
  1021  0005DE  0012               	return		;funcret
  1022  0005E0                     __end_of_E_TOG:
  1023                           	opt callstack 0
  1024                           
  1025                           	psect	rparam
  1026  0000                     tosu	equ	0xFFF
  1027                           tosh	equ	0xFFE
  1028                           tosl	equ	0xFFD
  1029                           stkptr	equ	0xFFC
  1030                           pclatu	equ	0xFFB
  1031                           pclath	equ	0xFFA
  1032                           pcl	equ	0xFF9
  1033                           tblptru	equ	0xFF8
  1034                           tblptrh	equ	0xFF7
  1035                           tblptrl	equ	0xFF6
  1036                           tablat	equ	0xFF5
  1037                           prodh	equ	0xFF4
  1038                           prodl	equ	0xFF3
  1039                           indf0	equ	0xFEF
  1040                           postinc0	equ	0xFEE
  1041                           postdec0	equ	0xFED
  1042                           preinc0	equ	0xFEC
  1043                           plusw0	equ	0xFEB
  1044                           fsr0h	equ	0xFEA
  1045                           fsr0l	equ	0xFE9
  1046                           wreg	equ	0xFE8
  1047                           indf1	equ	0xFE7
  1048                           postinc1	equ	0xFE6
  1049                           postdec1	equ	0xFE5
  1050                           preinc1	equ	0xFE4
  1051                           plusw1	equ	0xFE3
  1052                           fsr1h	equ	0xFE2
  1053                           fsr1l	equ	0xFE1
  1054                           bsr	equ	0xFE0
  1055                           indf2	equ	0xFDF
  1056                           postinc2	equ	0xFDE
  1057                           postdec2	equ	0xFDD
  1058                           preinc2	equ	0xFDC
  1059                           plusw2	equ	0xFDB
  1060                           fsr2h	equ	0xFDA
  1061                           fsr2l	equ	0xFD9
  1062                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    0
    Data        1
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     18      41
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    strcpy@dest	PTR unsigned char  size(2) Largest target is 10
		 -> main@buf(COMRAM[10]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 10
		 -> main@buf(COMRAM[10]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 10
		 -> main@buf(COMRAM[10]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S357DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S357DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 10
		 -> main@buf(COMRAM[10]), 


Critical Paths under _main in COMRAM

    _main->_strcpy
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _LCD_Init->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    3071
                                              8 COMRAM    10    10      0
                           _LCD_Init
                         _LCD_String
                             _LEDout
                            _SetLine
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               8     4      4     248
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0     832
                                              4 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LEDout                                               5     3      2     142
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           2     0      2     931
                                              4 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0     870
                                              4 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     810
                                              2 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               2     2      0      60
                                              0 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _LEDout
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _strcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     12      29       1       43.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      29       3        0.0%
DATA                 0      0      29      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Nov 28 11:36:34 2019

                     l20 0434                       l23 05A4                       l31 0574  
                     l17 05DE                       l26 03B8                       l37 0540  
            ?_LCD_String 001B                      l181 047E                      l182 047E  
                    l178 043A                      l199 0504                      l890 03BC  
                    l882 04C4                      l884 05D2                      l892 0428  
                    l886 05D4                      l894 042C                      l888 05DC  
                    u207 056E                      u160 0554                      u217 0522  
                    u161 0550                      u170 0540                      u307 042E  
                    u155 0580                      u227 032E                      u171 053C  
                    u156 0582                      u180 04C4                      u317 05D6  
                    u237 0344                      u181 04C0                      u190 0448  
                    u247 0354                      u191 0444                      u257 0362  
                    u267 0370                      u277 039A                      u287 058E  
                    u297 059E                      wreg 000FE8                     l1100 058C  
                   l1102 0594                     l1110 033E                     l1120 0394  
                   l1112 0352                     l1104 0310                     l1122 03A4  
                   l1114 035A                     l1106 0328                     l1130 0562  
                   l1124 03AE                     l1116 0368                     l1108 0338  
                   l1140 0520                     l1132 056C                     l1118 036E  
                   l1142 0528                     l1134 0506                     l1126 0544  
                   l1136 050A                     l1128 0554                     l1144 0486  
                   l1160 0466                     l1138 051C                     l1146 0496  
                   l1162 0472                     l1154 0436                     l1148 04C6  
                   l1156 0448                     l1158 0452                     l1096 0578  
                   l1098 0582                     STR_1 0301                     _LATB 000F8A  
                   _LATC 000F8B                     _LATD 000F8C                     _main 0436  
                   _left 0001                     fsr2h 000FDA                     indf2 000FDF  
                   fsr2l 000FD9                     start 0000             ___param_bank 000000  
        __end_of_SendLCD 05A6          __end_of_SetLine 0576         __end_of_LCD_Init 03BA  
                  ?_main 0017                    _PDC0H 000F78                    _PDC1H 000F76  
                  _PDC0L 000F79                    _PDC1L 000F77                    _RCREG 000FAE  
                  _E_TOG 05D2                    _SPBRG 000FAF                    _TXREG 000FAD  
                  _right 0003                    tablat 000FF5                    status 000FD8  
    __size_of_LCD_String 003C             _TurningSpeed 0029          __initialization 05A6  
           __end_of_main 0486           __CFG_OSC$IRCIO 000000         LCD_String@string 001B  
                 ??_main 001F            __activetblptr 000001                   ?_E_TOG 0017  
                 _LCDout 03BA              SendLCD@Byte 001A                   _LEDout 04C6  
                 _OSCCON 000FD3                   _PTCON0 000F7F                   _PTCON1 000F7E  
                 _SPBRGH 000FB0                   _PTPERH 000F7A                   _PTPERL 000F7B  
            SendLCD@type 0019                ??_SendLCD 001A                ??_SetLine 001B  
                 clear_0 05BE                   _motorL 000E                   _motorR 0005  
                 _strcpy 0486             __pdataCOMRAM 0029             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0060  __end_of__initialization 05C4                ?_LCD_Init 0017  
          ___rparam_used 000001              SetLine@line 001B            __end_of_E_TOG 05E0  
         __pcstackCOMRAM 0017             ??_LCD_String 001D                  ??_E_TOG 0017  
                ?_LCDout 0017                  ?_LEDout 0017               ??_LCD_Init 001B  
     __end_of_LCD_String 0542                  ?_strcpy 0017                  _PWMCON0 000F6F  
                _PWMCON1 000F6E          __size_of_LCDout 007C          __size_of_LEDout 0040  
                _SendLCD 0576                  __Hparam 0000                  _SetLine 0542  
                __Lparam 0000             __psmallconst 0300                  __pcinit 05A6  
                __ramtop 0300                  __ptext0 0436                  __ptext1 0486  
                __ptext2 0542                  __ptext3 04C6                  __ptext4 0506  
                __ptext5 0310                  __ptext6 0576                  __ptext7 03BA  
                __ptext8 05D2          __size_of_strcpy 0040             LCDout@number 0018  
                main@buf 001F     end_of_initialization 05C4                _RCSTAbits 000FAB  
                postinc0 000FEE                  strcpy@d 001D                  strcpy@s 001B  
           LEDout@number 0017                _TRISAbits 000F92                _TRISBbits 000F93  
              _TRISCbits 000F94                _TRISDbits 000F95           __end_of_LCDout 0436  
              _TXSTAbits 000FAC           __end_of_LEDout 0506        __size_of_LCD_Init 00AA  
            _BAUDCONbits 000FAA            __pidataCOMRAM 05E0           __end_of_strcpy 04C6  
    start_initialization 05A6                 ??_LCDout 0017                 ??_LEDout 0019  
               ??_strcpy 001B              __pbssCOMRAM 0001                 ?_SendLCD 0019  
               ?_SetLine 0017              __smallconst 0300           __size_of_E_TOG 000E  
               _LCD_Init 0310                 _LATAbits 000F89                 _LATBbits 000F8A  
               _LATCbits 000F8B                 _LATDbits 000F8C                 _PIR1bits 000F9E  
               __Hrparam 0000         __size_of_SendLCD 0030                 __Lrparam 0000  
       __size_of_SetLine 0034             __Lsmallconst 0300               strcpy@dest 0017  
          __size_of_main 0050               _LCD_String 0506                strcpy@src 0019  
             _OSCCONbits 000FD3  
